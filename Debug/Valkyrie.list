
Valkyrie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000584c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08005a1c  08005a1c  00006a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ac0  08005ac0  00007060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ac0  08005ac0  00006ac0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ac8  08005ac8  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ac8  08005ac8  00006ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005acc  08005acc  00006acc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08005ad0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004bcc  20000060  08005b30  00007060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c2c  08005b30  00007c2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016155  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003696  00000000  00000000  0001d1e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001360  00000000  00000000  00020880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ec3  00000000  00000000  00021be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024db4  00000000  00000000  00022aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017870  00000000  00000000  00047857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dba0c  00000000  00000000  0005f0c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013aad3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052fc  00000000  00000000  0013ab18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0013fe14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005a04 	.word	0x08005a04

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	08005a04 	.word	0x08005a04

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <ComplementaryFilter_Init>:
#define PI 3.14159265358979323846f
#endif

#define ALPHA 0.98f

void ComplementaryFilter_Init(comp *filter){
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	filter->roll = 0.0f;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f04f 0200 	mov.w	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
	filter->pitch = 0.0f;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f04f 0200 	mov.w	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <ComplementaryFilter_Update>:

void ComplementaryFilter_Update(comp *filter, float ax, float ay, float az, float gx, float gy, float dt){
 8000560:	b580      	push	{r7, lr}
 8000562:	ed2d 8b02 	vpush	{d8}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	61f8      	str	r0, [r7, #28]
 800056c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000570:	edc7 0a05 	vstr	s1, [r7, #20]
 8000574:	ed87 1a04 	vstr	s2, [r7, #16]
 8000578:	edc7 1a03 	vstr	s3, [r7, #12]
 800057c:	ed87 2a02 	vstr	s4, [r7, #8]
 8000580:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate roll and pitch from the accelerometer
	float roll_accel = atan2f(ay, az) * (180.0f/PI);
 8000584:	edd7 0a04 	vldr	s1, [r7, #16]
 8000588:	ed97 0a05 	vldr	s0, [r7, #20]
 800058c:	f005 f89a 	bl	80056c4 <atan2f>
 8000590:	eef0 7a40 	vmov.f32	s15, s0
 8000594:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000658 <ComplementaryFilter_Update+0xf8>
 8000598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800059c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float pitch_accel = atan2f(-ax, sqrtf(ay * ay + az * az)) * (180.0f/PI);
 80005a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80005a4:	eeb1 8a67 	vneg.f32	s16, s15
 80005a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80005ac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80005b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80005b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80005b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005bc:	eeb0 0a67 	vmov.f32	s0, s15
 80005c0:	f005 f882 	bl	80056c8 <sqrtf>
 80005c4:	eef0 7a40 	vmov.f32	s15, s0
 80005c8:	eef0 0a67 	vmov.f32	s1, s15
 80005cc:	eeb0 0a48 	vmov.f32	s0, s16
 80005d0:	f005 f878 	bl	80056c4 <atan2f>
 80005d4:	eef0 7a40 	vmov.f32	s15, s0
 80005d8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000658 <ComplementaryFilter_Update+0xf8>
 80005dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005e0:	edc7 7a08 	vstr	s15, [r7, #32]

	// Complementary filter formula
	// angle = α * (angle + gyro * dt) + (1 - α) * accel_angle;
	filter->roll = ALPHA * (filter->roll+gx*dt) + (1.0f-ALPHA) * roll_accel;
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	ed93 7a00 	vldr	s14, [r3]
 80005ea:	edd7 6a03 	vldr	s13, [r7, #12]
 80005ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80005f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005fa:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800065c <ComplementaryFilter_Update+0xfc>
 80005fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000602:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000606:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000660 <ComplementaryFilter_Update+0x100>
 800060a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800060e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	edc3 7a00 	vstr	s15, [r3]
	filter->pitch = ALPHA * (filter->pitch+gy*dt) + (1.0f-ALPHA) * pitch_accel;
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	ed93 7a01 	vldr	s14, [r3, #4]
 800061e:	edd7 6a02 	vldr	s13, [r7, #8]
 8000622:	edd7 7a01 	vldr	s15, [r7, #4]
 8000626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800062a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800062e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800065c <ComplementaryFilter_Update+0xfc>
 8000632:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000636:	edd7 7a08 	vldr	s15, [r7, #32]
 800063a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8000660 <ComplementaryFilter_Update+0x100>
 800063e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	edc3 7a01 	vstr	s15, [r3, #4]

}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	@ 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	ecbd 8b02 	vpop	{d8}
 8000656:	bd80      	pop	{r7, pc}
 8000658:	42652ee0 	.word	0x42652ee0
 800065c:	3f7ae148 	.word	0x3f7ae148
 8000660:	3ca3d700 	.word	0x3ca3d700

08000664 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af02      	add	r7, sp, #8
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800066a:	4a10      	ldr	r2, [pc, #64]	@ (80006ac <MX_FREERTOS_Init+0x48>)
 800066c:	2100      	movs	r1, #0
 800066e:	4810      	ldr	r0, [pc, #64]	@ (80006b0 <MX_FREERTOS_Init+0x4c>)
 8000670:	f002 f94a 	bl	8002908 <osThreadNew>
 8000674:	4603      	mov	r3, r0
 8000676:	4a0f      	ldr	r2, [pc, #60]	@ (80006b4 <MX_FREERTOS_Init+0x50>)
 8000678:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(IMU_Task,  "IMU",  256, NULL, tskIDLE_PRIORITY+2, &IMU_TaskHandle);
 800067a:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <MX_FREERTOS_Init+0x54>)
 800067c:	9301      	str	r3, [sp, #4]
 800067e:	2302      	movs	r3, #2
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2300      	movs	r3, #0
 8000684:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000688:	490c      	ldr	r1, [pc, #48]	@ (80006bc <MX_FREERTOS_Init+0x58>)
 800068a:	480d      	ldr	r0, [pc, #52]	@ (80006c0 <MX_FREERTOS_Init+0x5c>)
 800068c:	f003 f82c 	bl	80036e8 <xTaskCreate>
  xTaskCreate(IBUS_Task, "IBUS", 256, NULL, tskIDLE_PRIORITY+1, &IBUS_TaskHandle);
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_FREERTOS_Init+0x60>)
 8000692:	9301      	str	r3, [sp, #4]
 8000694:	2301      	movs	r3, #1
 8000696:	9300      	str	r3, [sp, #0]
 8000698:	2300      	movs	r3, #0
 800069a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800069e:	490a      	ldr	r1, [pc, #40]	@ (80006c8 <MX_FREERTOS_Init+0x64>)
 80006a0:	480a      	ldr	r0, [pc, #40]	@ (80006cc <MX_FREERTOS_Init+0x68>)
 80006a2:	f003 f821 	bl	80036e8 <xTaskCreate>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80006a6:	bf00      	nop
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}
 80006ac:	08005a4c 	.word	0x08005a4c
 80006b0:	080006d1 	.word	0x080006d1
 80006b4:	2000008c 	.word	0x2000008c
 80006b8:	2000007c 	.word	0x2000007c
 80006bc:	08005a28 	.word	0x08005a28
 80006c0:	080006e1 	.word	0x080006e1
 80006c4:	20000080 	.word	0x20000080
 80006c8:	08005a2c 	.word	0x08005a2c
 80006cc:	0800078d 	.word	0x0800078d

080006d0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f002 f9a7 	bl	8002a2c <osDelay>
 80006de:	e7fb      	b.n	80006d8 <StartDefaultTask+0x8>

080006e0 <IMU_Task>:
  /* USER CODE END StartDefaultTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void IMU_Task(void *pvParameters){
 80006e0:	b590      	push	{r4, r7, lr}
 80006e2:	b08f      	sub	sp, #60	@ 0x3c
 80006e4:	af02      	add	r7, sp, #8
 80006e6:	6078      	str	r0, [r7, #4]
	const float loop_dt = 0.01f; // 10ms loop time --> 100Hz frequency
 80006e8:	4b23      	ldr	r3, [pc, #140]	@ (8000778 <IMU_Task+0x98>)
 80006ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
	TickType_t lastWakeTime = xTaskGetTickCount();
 80006ec:	f003 fb2c 	bl	8003d48 <xTaskGetTickCount>
 80006f0:	4603      	mov	r3, r0
 80006f2:	627b      	str	r3, [r7, #36]	@ 0x24
	const TickType_t frequency = pdMS_TO_TICKS(10); // 10ms converted to equivalent number of ticks
 80006f4:	230a      	movs	r3, #10
 80006f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	while(1){
		float ax_g, ay_g, az_g;
		float gx_dps, gy_dps, gz_dps;

		MPU6050_Read_Calibrated(&ax_g, &ay_g, &az_g, &gx_dps, &gy_dps, &gz_dps);
 80006f8:	f107 0414 	add.w	r4, r7, #20
 80006fc:	f107 0218 	add.w	r2, r7, #24
 8000700:	f107 011c 	add.w	r1, r7, #28
 8000704:	f107 0020 	add.w	r0, r7, #32
 8000708:	f107 030c 	add.w	r3, r7, #12
 800070c:	9301      	str	r3, [sp, #4]
 800070e:	f107 0310 	add.w	r3, r7, #16
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	4623      	mov	r3, r4
 8000716:	f000 fc07 	bl	8000f28 <MPU6050_Read_Calibrated>
		ComplementaryFilter_Update(&imu_CA, ax_g, ay_g, az_g, gx_dps, gy_dps, loop_dt);
 800071a:	edd7 7a08 	vldr	s15, [r7, #32]
 800071e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000722:	edd7 6a06 	vldr	s13, [r7, #24]
 8000726:	ed97 6a05 	vldr	s12, [r7, #20]
 800072a:	edd7 5a04 	vldr	s11, [r7, #16]
 800072e:	edd7 2a0b 	vldr	s5, [r7, #44]	@ 0x2c
 8000732:	eeb0 2a65 	vmov.f32	s4, s11
 8000736:	eef0 1a46 	vmov.f32	s3, s12
 800073a:	eeb0 1a66 	vmov.f32	s2, s13
 800073e:	eef0 0a47 	vmov.f32	s1, s14
 8000742:	eeb0 0a67 	vmov.f32	s0, s15
 8000746:	480d      	ldr	r0, [pc, #52]	@ (800077c <IMU_Task+0x9c>)
 8000748:	f7ff ff0a 	bl	8000560 <ComplementaryFilter_Update>

		// results
		roll = imu_CA.roll;
 800074c:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <IMU_Task+0x9c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a0b      	ldr	r2, [pc, #44]	@ (8000780 <IMU_Task+0xa0>)
 8000752:	6013      	str	r3, [r2, #0]
		pitch = imu_CA.pitch;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <IMU_Task+0x9c>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	4a0a      	ldr	r2, [pc, #40]	@ (8000784 <IMU_Task+0xa4>)
 800075a:	6013      	str	r3, [r2, #0]

		// Optional print statements here for roll pitch
		//char buffer[64];
		//snprintf(buffer, sizeof(buffer), "Roll: %.2f\tPitch: %.2f\r\n", roll, pitch);
		//UART2_WriteString(buffer);
		IMUTaskProfiler++;
 800075c:	4b0a      	ldr	r3, [pc, #40]	@ (8000788 <IMU_Task+0xa8>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	3301      	adds	r3, #1
 8000762:	4a09      	ldr	r2, [pc, #36]	@ (8000788 <IMU_Task+0xa8>)
 8000764:	6013      	str	r3, [r2, #0]

		vTaskDelayUntil(&lastWakeTime, frequency);
 8000766:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800076a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800076c:	4618      	mov	r0, r3
 800076e:	f003 f919 	bl	80039a4 <vTaskDelayUntil>
	while(1){
 8000772:	bf00      	nop
 8000774:	e7c0      	b.n	80006f8 <IMU_Task+0x18>
 8000776:	bf00      	nop
 8000778:	3c23d70a 	.word	0x3c23d70a
 800077c:	20000090 	.word	0x20000090
 8000780:	20000098 	.word	0x20000098
 8000784:	2000009c 	.word	0x2000009c
 8000788:	20000084 	.word	0x20000084

0800078c <IBUS_Task>:
	}
}

void IBUS_Task(void *pvParameters){
 800078c:	b580      	push	{r7, lr}
 800078e:	b08a      	sub	sp, #40	@ 0x28
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
	uint8_t buffer[18];

	while(1){
		// Wait for the iBUS packet to start
		if(IBUS_ReadByte() == 0x20){
 8000794:	f000 fd60 	bl	8001258 <IBUS_ReadByte>
 8000798:	4603      	mov	r3, r0
 800079a:	2b20      	cmp	r3, #32
 800079c:	d138      	bne.n	8000810 <IBUS_Task+0x84>
			if(IBUS_ReadByte() == 0x40){
 800079e:	f000 fd5b 	bl	8001258 <IBUS_ReadByte>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b40      	cmp	r3, #64	@ 0x40
 80007a6:	d133      	bne.n	8000810 <IBUS_Task+0x84>
				// Read remaining 16 bytes
				for(int i = 0; i < 16; i++){
 80007a8:	2300      	movs	r3, #0
 80007aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80007ac:	e00c      	b.n	80007c8 <IBUS_Task+0x3c>
					buffer[i] = IBUS_ReadByte();
 80007ae:	f000 fd53 	bl	8001258 <IBUS_ReadByte>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4619      	mov	r1, r3
 80007b6:	f107 020c 	add.w	r2, r7, #12
 80007ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007bc:	4413      	add	r3, r2
 80007be:	460a      	mov	r2, r1
 80007c0:	701a      	strb	r2, [r3, #0]
				for(int i = 0; i < 16; i++){
 80007c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007c4:	3301      	adds	r3, #1
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80007c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80007ca:	2b0f      	cmp	r3, #15
 80007cc:	ddef      	ble.n	80007ae <IBUS_Task+0x22>
				}

				// Decode channels
				for(int ch = 0; ch < 6; ch++){
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
 80007d2:	e01a      	b.n	800080a <IBUS_Task+0x7e>
					ibus_channels[ch] = buffer[ch*2] | (buffer[ch*2+1]<<8);
 80007d4:	6a3b      	ldr	r3, [r7, #32]
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	3328      	adds	r3, #40	@ 0x28
 80007da:	443b      	add	r3, r7
 80007dc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80007e0:	b21a      	sxth	r2, r3
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	005b      	lsls	r3, r3, #1
 80007e6:	3301      	adds	r3, #1
 80007e8:	3328      	adds	r3, #40	@ 0x28
 80007ea:	443b      	add	r3, r7
 80007ec:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21b      	sxth	r3, r3
 80007fa:	b299      	uxth	r1, r3
 80007fc:	4a09      	ldr	r2, [pc, #36]	@ (8000824 <IBUS_Task+0x98>)
 80007fe:	6a3b      	ldr	r3, [r7, #32]
 8000800:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int ch = 0; ch < 6; ch++){
 8000804:	6a3b      	ldr	r3, [r7, #32]
 8000806:	3301      	adds	r3, #1
 8000808:	623b      	str	r3, [r7, #32]
 800080a:	6a3b      	ldr	r3, [r7, #32]
 800080c:	2b05      	cmp	r3, #5
 800080e:	dde1      	ble.n	80007d4 <IBUS_Task+0x48>
				//char str[64];
				//snprintf(str, sizeof(str), "CH1: %d CH2: %d CH3: %d\r\n", ibus_channels[0], ibus_channels[1], ibus_channels[2]);
				//UART2_WriteString(str);
			}
		}
		IBUSTaskProfiler++;
 8000810:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <IBUS_Task+0x9c>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	3301      	adds	r3, #1
 8000816:	4a04      	ldr	r2, [pc, #16]	@ (8000828 <IBUS_Task+0x9c>)
 8000818:	6013      	str	r3, [r2, #0]
		vTaskDelay(pdMS_TO_TICKS(1));
 800081a:	2001      	movs	r0, #1
 800081c:	f003 f942 	bl	8003aa4 <vTaskDelay>
		if(IBUS_ReadByte() == 0x20){
 8000820:	e7b8      	b.n	8000794 <IBUS_Task+0x8>
 8000822:	bf00      	nop
 8000824:	200000a0 	.word	0x200000a0
 8000828:	20000088 	.word	0x20000088

0800082c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b10      	ldr	r3, [pc, #64]	@ (8000878 <MX_GPIO_Init+0x4c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a0f      	ldr	r2, [pc, #60]	@ (8000878 <MX_GPIO_Init+0x4c>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b0d      	ldr	r3, [pc, #52]	@ (8000878 <MX_GPIO_Init+0x4c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	603b      	str	r3, [r7, #0]
 8000852:	4b09      	ldr	r3, [pc, #36]	@ (8000878 <MX_GPIO_Init+0x4c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a08      	ldr	r2, [pc, #32]	@ (8000878 <MX_GPIO_Init+0x4c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b06      	ldr	r3, [pc, #24]	@ (8000878 <MX_GPIO_Init+0x4c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	603b      	str	r3, [r7, #0]
 8000868:	683b      	ldr	r3, [r7, #0]

}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	40023800 	.word	0x40023800

0800087c <I2C_Init>:
#define AC_GPIOB_OTYPER_OT9 (1U<<9)
#define I2C_100KHZ 80
#define SD_MODE_MAX_RISE_TIME 17
#define I2C1_AF4 (4U)

void I2C_Init(void) {
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
	// Enable clock access for GPIOB
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000880:	4b39      	ldr	r3, [pc, #228]	@ (8000968 <I2C_Init+0xec>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000884:	4a38      	ldr	r2, [pc, #224]	@ (8000968 <I2C_Init+0xec>)
 8000886:	f043 0302 	orr.w	r3, r3, #2
 800088a:	6313      	str	r3, [r2, #48]	@ 0x30

	// Configure GPIO pins for I2C (Alternate Function, Open Drain)
	// Set  PB8 and PB9 mode to alternate function [10] for I2C1
	GPIOB->MODER |= (1U<<17);
 800088c:	4b37      	ldr	r3, [pc, #220]	@ (800096c <I2C_Init+0xf0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	4a36      	ldr	r2, [pc, #216]	@ (800096c <I2C_Init+0xf0>)
 8000892:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000896:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<16);
 8000898:	4b34      	ldr	r3, [pc, #208]	@ (800096c <I2C_Init+0xf0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a33      	ldr	r2, [pc, #204]	@ (800096c <I2C_Init+0xf0>)
 800089e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80008a2:	6013      	str	r3, [r2, #0]

	GPIOB->MODER |= (1U<<19);
 80008a4:	4b31      	ldr	r3, [pc, #196]	@ (800096c <I2C_Init+0xf0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a30      	ldr	r2, [pc, #192]	@ (800096c <I2C_Init+0xf0>)
 80008aa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008ae:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<18);
 80008b0:	4b2e      	ldr	r3, [pc, #184]	@ (800096c <I2C_Init+0xf0>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a2d      	ldr	r2, [pc, #180]	@ (800096c <I2C_Init+0xf0>)
 80008b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80008ba:	6013      	str	r3, [r2, #0]

	// Configure Open-Drain output type
	GPIOB->OTYPER |= AC_GPIOB_OTYPER_OT8; // Output open drain pin 8
 80008bc:	4b2b      	ldr	r3, [pc, #172]	@ (800096c <I2C_Init+0xf0>)
 80008be:	685b      	ldr	r3, [r3, #4]
 80008c0:	4a2a      	ldr	r2, [pc, #168]	@ (800096c <I2C_Init+0xf0>)
 80008c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008c6:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= AC_GPIOB_OTYPER_OT9; // Output open drain pin 9
 80008c8:	4b28      	ldr	r3, [pc, #160]	@ (800096c <I2C_Init+0xf0>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	4a27      	ldr	r2, [pc, #156]	@ (800096c <I2C_Init+0xf0>)
 80008ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008d2:	6053      	str	r3, [r2, #4]

	// Enable Pull-up [01] for PB8 and PB9
	GPIOB->PUPDR &= ~(1U<<17);
 80008d4:	4b25      	ldr	r3, [pc, #148]	@ (800096c <I2C_Init+0xf0>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	4a24      	ldr	r2, [pc, #144]	@ (800096c <I2C_Init+0xf0>)
 80008da:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80008de:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1U<<16);
 80008e0:	4b22      	ldr	r3, [pc, #136]	@ (800096c <I2C_Init+0xf0>)
 80008e2:	68db      	ldr	r3, [r3, #12]
 80008e4:	4a21      	ldr	r2, [pc, #132]	@ (800096c <I2C_Init+0xf0>)
 80008e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008ea:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR &= ~(1U<<19);
 80008ec:	4b1f      	ldr	r3, [pc, #124]	@ (800096c <I2C_Init+0xf0>)
 80008ee:	68db      	ldr	r3, [r3, #12]
 80008f0:	4a1e      	ldr	r2, [pc, #120]	@ (800096c <I2C_Init+0xf0>)
 80008f2:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80008f6:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1U<<18);
 80008f8:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <I2C_Init+0xf0>)
 80008fa:	68db      	ldr	r3, [r3, #12]
 80008fc:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <I2C_Init+0xf0>)
 80008fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000902:	60d3      	str	r3, [r2, #12]

	// Configure Alternate Function I2C1 (AF4) for PB8 and PB9
	// We know AF4 based on Alternate function mapping on datasheet
	GPIOB->AFR[1] |= (4U << 0);  // PB8: AFRH[3:0]
 8000904:	4b19      	ldr	r3, [pc, #100]	@ (800096c <I2C_Init+0xf0>)
 8000906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000908:	4a18      	ldr	r2, [pc, #96]	@ (800096c <I2C_Init+0xf0>)
 800090a:	f043 0304 	orr.w	r3, r3, #4
 800090e:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (4U << 4);  // PB9: AFRH[7:4]
 8000910:	4b16      	ldr	r3, [pc, #88]	@ (800096c <I2C_Init+0xf0>)
 8000912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000914:	4a15      	ldr	r2, [pc, #84]	@ (800096c <I2C_Init+0xf0>)
 8000916:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800091a:	6253      	str	r3, [r2, #36]	@ 0x24


    // Enable clock access to I2C1 peripheral
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 800091c:	4b12      	ldr	r3, [pc, #72]	@ (8000968 <I2C_Init+0xec>)
 800091e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000920:	4a11      	ldr	r2, [pc, #68]	@ (8000968 <I2C_Init+0xec>)
 8000922:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000926:	6413      	str	r3, [r2, #64]	@ 0x40

    // RESET I2C1
	// 1. Enter RESET Mode then immediately come out of RESET
	I2C1->CR1 |= I2C_CR1_SWRST;
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <I2C_Init+0xf4>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <I2C_Init+0xf4>)
 800092e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000932:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 8000934:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <I2C_Init+0xf4>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0d      	ldr	r2, [pc, #52]	@ (8000970 <I2C_Init+0xf4>)
 800093a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800093e:	6013      	str	r3, [r2, #0]

	// 2. Set clock Frequency to 16 MHz
	I2C1->CR2 = 16U; //I2C1->CR2 |= (1U<<4); //FREQ[5:0] ==> (1U<<4) = 0b0100 = 16
 8000940:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <I2C_Init+0xf4>)
 8000942:	2210      	movs	r2, #16
 8000944:	605a      	str	r2, [r3, #4]
	 *
	 * TRISE = (Maximum rise time/ T_PCLK1) + 1
	 * TRISE = (1000 ns / 62.5 ns) + 1
	 * TRISE = 16 + 1 = 17
	 * */
	I2C1->CCR = I2C_100KHZ;
 8000946:	4b0a      	ldr	r3, [pc, #40]	@ (8000970 <I2C_Init+0xf4>)
 8000948:	2250      	movs	r2, #80	@ 0x50
 800094a:	61da      	str	r2, [r3, #28]

	// 4. Set rise time
	I2C1->TRISE = SD_MODE_MAX_RISE_TIME;
 800094c:	4b08      	ldr	r3, [pc, #32]	@ (8000970 <I2C_Init+0xf4>)
 800094e:	2211      	movs	r2, #17
 8000950:	621a      	str	r2, [r3, #32]

	// 5. Enable I2C peripheral
	I2C1->CR1 |= I2C_CR1_PE;
 8000952:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <I2C_Init+0xf4>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a06      	ldr	r2, [pc, #24]	@ (8000970 <I2C_Init+0xf4>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6013      	str	r3, [r2, #0]
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr
 8000968:	40023800 	.word	0x40023800
 800096c:	40020400 	.word	0x40020400
 8000970:	40005400 	.word	0x40005400

08000974 <I2C_Mem_Write>:
	    // 6. Re-enable ACK for future transfers
	    I2C1->CR1 |= I2C_CR1_ACK;
}


void I2C_Mem_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	603a      	str	r2, [r7, #0]
 800097c:	461a      	mov	r2, r3
 800097e:	4603      	mov	r3, r0
 8000980:	71fb      	strb	r3, [r7, #7]
 8000982:	460b      	mov	r3, r1
 8000984:	71bb      	strb	r3, [r7, #6]
 8000986:	4613      	mov	r3, r2
 8000988:	80bb      	strh	r3, [r7, #4]
    // Send register address, then write data

	// 1. Generate a START condition (set the START bit in CR1)
	I2C1->CR1 |= I2C_CR1_START;
 800098a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a2a      	ldr	r2, [pc, #168]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 8000990:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000994:	6013      	str	r3, [r2, #0]

	// 2. Wait until the SB (Start Bit) flag is set in SR1
	while(!(I2C1->SR1 & I2C_SR1_SB)){}
 8000996:	bf00      	nop
 8000998:	4b27      	ldr	r3, [pc, #156]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 800099a:	695b      	ldr	r3, [r3, #20]
 800099c:	f003 0301 	and.w	r3, r3, #1
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d0f9      	beq.n	8000998 <I2C_Mem_Write+0x24>

	// 3. Send the slave address with the write bit (LSB = 0)
	I2C1->DR = dev_addr << 1;
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	4a24      	ldr	r2, [pc, #144]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 80009a8:	005b      	lsls	r3, r3, #1
 80009aa:	6113      	str	r3, [r2, #16]

	// 4. Wait until the ADDR (Address Sent) flag is set in SR1
	while(!(I2C1->SR1 & I2C_SR1_ADDR)){}
 80009ac:	bf00      	nop
 80009ae:	4b22      	ldr	r3, [pc, #136]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d0f9      	beq.n	80009ae <I2C_Mem_Write+0x3a>

	// 5. Clear the ADDR flag by reading SR1 followed by SR2
	// To clear this flag (which is required to continue the transfer):
	(void)I2C1->SR1; // Read SR1
 80009ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 80009bc:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2; // Then immediately after read SR2
 80009be:	4b1e      	ldr	r3, [pc, #120]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 80009c0:	699b      	ldr	r3, [r3, #24]

	// 6. Send the memory/register address (mem_addr)
	while(!(I2C1->SR1 & I2C_SR1_TXE)); // Must wait for TXE before sending register address
 80009c2:	bf00      	nop
 80009c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 80009c6:	695b      	ldr	r3, [r3, #20]
 80009c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0f9      	beq.n	80009c4 <I2C_Mem_Write+0x50>
	I2C1->DR = reg_addr;
 80009d0:	4a19      	ldr	r2, [pc, #100]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 80009d2:	79bb      	ldrb	r3, [r7, #6]
 80009d4:	6113      	str	r3, [r2, #16]

	// 8. Loop through the data array:
	//    For each byte:
	//    a. Wait until TXE is set
	//    b. Write the byte to the DR register
	for(int i = 0; i < len; i++){
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	e00f      	b.n	80009fc <I2C_Mem_Write+0x88>

		while(!(I2C1->SR1 & I2C_SR1_TXE)){}
 80009dc:	bf00      	nop
 80009de:	4b16      	ldr	r3, [pc, #88]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d0f9      	beq.n	80009de <I2C_Mem_Write+0x6a>

		I2C1->DR = data[i]; // Write the current byte to the DR register
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	683a      	ldr	r2, [r7, #0]
 80009ee:	4413      	add	r3, r2
 80009f0:	781a      	ldrb	r2, [r3, #0]
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 80009f4:	611a      	str	r2, [r3, #16]
	for(int i = 0; i < len; i++){
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	3301      	adds	r3, #1
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	88bb      	ldrh	r3, [r7, #4]
 80009fe:	68fa      	ldr	r2, [r7, #12]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbeb      	blt.n	80009dc <I2C_Mem_Write+0x68>
	}

	// 9. After all bytes are sent, wait until BTF (Byte Transfer Finished) flag is set (optional but recommended)
	while(!(I2C1->SR1 & I2C_SR1_TXE)){}
 8000a04:	bf00      	nop
 8000a06:	4b0c      	ldr	r3, [pc, #48]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d0f9      	beq.n	8000a06 <I2C_Mem_Write+0x92>
	while(!(I2C1->SR1 & I2C_SR1_BTF)){}
 8000a12:	bf00      	nop
 8000a14:	4b08      	ldr	r3, [pc, #32]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d0f9      	beq.n	8000a14 <I2C_Mem_Write+0xa0>

	// 10. Generate a STOP condition (set the STOP bit in CR1)
	I2C1->CR1 |= I2C_CR1_STOP;
 8000a20:	4b05      	ldr	r3, [pc, #20]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a04      	ldr	r2, [pc, #16]	@ (8000a38 <I2C_Mem_Write+0xc4>)
 8000a26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	40005400 	.word	0x40005400

08000a3c <I2C_Mem_Read>:

void I2C_Mem_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	603a      	str	r2, [r7, #0]
 8000a44:	461a      	mov	r2, r3
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	460b      	mov	r3, r1
 8000a4c:	71bb      	strb	r3, [r7, #6]
 8000a4e:	4613      	mov	r3, r2
 8000a50:	80bb      	strh	r3, [r7, #4]
	// Send register address, then read data (Combined Transaction)

		// ====== Phase 1: Write the register address to read from ======

		// 1. Generate a START condition
		I2C1->CR1 |= I2C_CR1_START;
 8000a52:	4b40      	ldr	r3, [pc, #256]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a3f      	ldr	r2, [pc, #252]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a5c:	6013      	str	r3, [r2, #0]
		while(!(I2C1->SR1 & I2C_SR1_SB));
 8000a5e:	bf00      	nop
 8000a60:	4b3c      	ldr	r3, [pc, #240]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	f003 0301 	and.w	r3, r3, #1
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d0f9      	beq.n	8000a60 <I2C_Mem_Read+0x24>

		// 2. Send the slave address with the WRITE bit
		I2C1->DR = dev_addr << 1;
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	4a39      	ldr	r2, [pc, #228]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	6113      	str	r3, [r2, #16]
		while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000a74:	bf00      	nop
 8000a76:	4b37      	ldr	r3, [pc, #220]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000a78:	695b      	ldr	r3, [r3, #20]
 8000a7a:	f003 0302 	and.w	r3, r3, #2
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d0f9      	beq.n	8000a76 <I2C_Mem_Read+0x3a>

		// 3. Clear the ADDR flag
		(void)I2C1->SR1;
 8000a82:	4b34      	ldr	r3, [pc, #208]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000a84:	695b      	ldr	r3, [r3, #20]
		(void)I2C1->SR2;
 8000a86:	4b33      	ldr	r3, [pc, #204]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000a88:	699b      	ldr	r3, [r3, #24]

		// 4. Send the memory/register address
		while(!(I2C1->SR1 & I2C_SR1_TXE));
 8000a8a:	bf00      	nop
 8000a8c:	4b31      	ldr	r3, [pc, #196]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d0f9      	beq.n	8000a8c <I2C_Mem_Read+0x50>
		I2C1->DR = reg_addr;
 8000a98:	4a2e      	ldr	r2, [pc, #184]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	6113      	str	r3, [r2, #16]

		// 5. Wait for TXE flag to set, indicating address is sent
		while(!(I2C1->SR1 & I2C_SR1_TXE));
 8000a9e:	bf00      	nop
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d0f9      	beq.n	8000aa0 <I2C_Mem_Read+0x64>


		// ====== Phase 2: Read data from the specified register ======

		// 6. Generate a REPEATED START condition
		I2C1->CR1 |= I2C_CR1_START;
 8000aac:	4b29      	ldr	r3, [pc, #164]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a28      	ldr	r2, [pc, #160]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000ab2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ab6:	6013      	str	r3, [r2, #0]
		while(!(I2C1->SR1 & I2C_SR1_SB));
 8000ab8:	bf00      	nop
 8000aba:	4b26      	ldr	r3, [pc, #152]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f9      	beq.n	8000aba <I2C_Mem_Read+0x7e>

		// 7. Send the slave address with the READ bit
		I2C1->DR = (dev_addr << 1) | 1;
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	f043 0201 	orr.w	r2, r3, #1
 8000ace:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000ad0:	611a      	str	r2, [r3, #16]
		while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000ad2:	bf00      	nop
 8000ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000ad6:	695b      	ldr	r3, [r3, #20]
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d0f9      	beq.n	8000ad4 <I2C_Mem_Read+0x98>

		// 8. Clear the ADDR flag
		(void)I2C1->SR1;
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
		(void)I2C1->SR2;
 8000ae4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000ae6:	699b      	ldr	r3, [r3, #24]

		// 9. Read the data bytes (using the same logic as I2C_Read)
	    // FIX: Use the corrected read logic here as well.
	    for (int i = 0; i < len; i++) {
 8000ae8:	2300      	movs	r3, #0
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	e021      	b.n	8000b32 <I2C_Mem_Read+0xf6>
	        if (i == len - 1) {
 8000aee:	88bb      	ldrh	r3, [r7, #4]
 8000af0:	3b01      	subs	r3, #1
 8000af2:	68fa      	ldr	r2, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d10b      	bne.n	8000b10 <I2C_Mem_Read+0xd4>
	            // For the last byte, NACK it and STOP.
	            I2C1->CR1 &= ~I2C_CR1_ACK;
 8000af8:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a15      	ldr	r2, [pc, #84]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000afe:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000b02:	6013      	str	r3, [r2, #0]
	            I2C1->CR1 |= I2C_CR1_STOP;
 8000b04:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a12      	ldr	r2, [pc, #72]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000b0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b0e:	6013      	str	r3, [r2, #0]
	        }

	        while(!(I2C1->SR1 & I2C_SR1_RXNE));
 8000b10:	bf00      	nop
 8000b12:	4b10      	ldr	r3, [pc, #64]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d0f9      	beq.n	8000b12 <I2C_Mem_Read+0xd6>
	        data[i] = I2C1->DR;
 8000b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000b20:	6919      	ldr	r1, [r3, #16]
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	683a      	ldr	r2, [r7, #0]
 8000b26:	4413      	add	r3, r2
 8000b28:	b2ca      	uxtb	r2, r1
 8000b2a:	701a      	strb	r2, [r3, #0]
	    for (int i = 0; i < len; i++) {
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	3301      	adds	r3, #1
 8000b30:	60fb      	str	r3, [r7, #12]
 8000b32:	88bb      	ldrh	r3, [r7, #4]
 8000b34:	68fa      	ldr	r2, [r7, #12]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	dbd9      	blt.n	8000aee <I2C_Mem_Read+0xb2>
	    }

	    // 10. Re-enable ACK for future transfers
	    I2C1->CR1 |= I2C_CR1_ACK;
 8000b3a:	4b06      	ldr	r3, [pc, #24]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	4a05      	ldr	r2, [pc, #20]	@ (8000b54 <I2C_Mem_Read+0x118>)
 8000b40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b44:	6013      	str	r3, [r2, #0]
}
 8000b46:	bf00      	nop
 8000b48:	3714      	adds	r7, #20
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	40005400 	.word	0x40005400

08000b58 <FPU_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Enabling FPU (Floating Point Unit)
void FPU_Init(void){
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	SCB->CPACR |= (0xF<<20); // Enable full access to CP10 and CP11
 8000b5c:	4b06      	ldr	r3, [pc, #24]	@ (8000b78 <FPU_Init+0x20>)
 8000b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b62:	4a05      	ldr	r2, [pc, #20]	@ (8000b78 <FPU_Init+0x20>)
 8000b64:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b68:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b80:	f000 fc1e 	bl	80013c0 <HAL_Init>

  /* USER CODE BEGIN Init */
  FPU_Init();
 8000b84:	f7ff ffe8 	bl	8000b58 <FPU_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b88:	f000 f81a 	bl	8000bc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8c:	f7ff fe4e 	bl	800082c <MX_GPIO_Init>
  //MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */
  I2C_Init();
 8000b90:	f7ff fe74 	bl	800087c <I2C_Init>
  UART2_Init(115200); // UART2 for serial monitor
 8000b94:	f44f 30e1 	mov.w	r0, #115200	@ 0x1c200
 8000b98:	f000 fb72 	bl	8001280 <UART2_Init>
  //UART1_Init(115200); // UART1 for iBUS
  MPU6050_Init();
 8000b9c:	f000 f89a 	bl	8000cd4 <MPU6050_Init>

  MPU6050_Calibrate();
 8000ba0:	f000 f92a 	bl	8000df8 <MPU6050_Calibrate>
  ComplementaryFilter_Init(&imu_CA);
 8000ba4:	4805      	ldr	r0, [pc, #20]	@ (8000bbc <main+0x40>)
 8000ba6:	f7ff fcc9 	bl	800053c <ComplementaryFilter_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000baa:	f001 fe63 	bl	8002874 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000bae:	f7ff fd59 	bl	8000664 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000bb2:	f001 fe83 	bl	80028bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bb6:	bf00      	nop
 8000bb8:	e7fd      	b.n	8000bb6 <main+0x3a>
 8000bba:	bf00      	nop
 8000bbc:	20000090 	.word	0x20000090

08000bc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b094      	sub	sp, #80	@ 0x50
 8000bc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc6:	f107 031c 	add.w	r3, r7, #28
 8000bca:	2234      	movs	r2, #52	@ 0x34
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f004 fc82 	bl	80054d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be4:	2300      	movs	r3, #0
 8000be6:	607b      	str	r3, [r7, #4]
 8000be8:	4b2c      	ldr	r3, [pc, #176]	@ (8000c9c <SystemClock_Config+0xdc>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bec:	4a2b      	ldr	r2, [pc, #172]	@ (8000c9c <SystemClock_Config+0xdc>)
 8000bee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bf2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bf4:	4b29      	ldr	r3, [pc, #164]	@ (8000c9c <SystemClock_Config+0xdc>)
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bfc:	607b      	str	r3, [r7, #4]
 8000bfe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c00:	2300      	movs	r3, #0
 8000c02:	603b      	str	r3, [r7, #0]
 8000c04:	4b26      	ldr	r3, [pc, #152]	@ (8000ca0 <SystemClock_Config+0xe0>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a25      	ldr	r2, [pc, #148]	@ (8000ca0 <SystemClock_Config+0xe0>)
 8000c0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c0e:	6013      	str	r3, [r2, #0]
 8000c10:	4b23      	ldr	r3, [pc, #140]	@ (8000ca0 <SystemClock_Config+0xe0>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c18:	603b      	str	r3, [r7, #0]
 8000c1a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c20:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000c24:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c26:	2302      	movs	r3, #2
 8000c28:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000c2e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c30:	2304      	movs	r3, #4
 8000c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000c34:	23b4      	movs	r3, #180	@ 0xb4
 8000c36:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f001 f895 	bl	8001d78 <HAL_RCC_OscConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c54:	f000 f838 	bl	8000cc8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c58:	f000 fcd6 	bl	8001608 <HAL_PWREx_EnableOverDrive>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c62:	f000 f831 	bl	8000cc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c66:	230f      	movs	r3, #15
 8000c68:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c72:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c76:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c7c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c7e:	f107 0308 	add.w	r3, r7, #8
 8000c82:	2105      	movs	r1, #5
 8000c84:	4618      	mov	r0, r3
 8000c86:	f000 fd0f 	bl	80016a8 <HAL_RCC_ClockConfig>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000c90:	f000 f81a 	bl	8000cc8 <Error_Handler>
  }
}
 8000c94:	bf00      	nop
 8000c96:	3750      	adds	r7, #80	@ 0x50
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40023800 	.word	0x40023800
 8000ca0:	40007000 	.word	0x40007000

08000ca4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a04      	ldr	r2, [pc, #16]	@ (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d101      	bne.n	8000cba <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000cb6:	f000 fba5 	bl	8001404 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40001000 	.word	0x40001000

08000cc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ccc:	b672      	cpsid	i
}
 8000cce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <Error_Handler+0x8>

08000cd4 <MPU6050_Init>:

// Calibration offsets
static int16_t accel_x_offset = 0, accel_y_offset = 0, accel_z_offset = 0;
static int16_t gyro_x_offset = 0, gyro_y_offset = 0, gyro_z_offset = 0;

uint8_t MPU6050_Init(void){
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
	//Initialize the I2C peripheral
	//I2C_Init(); //Optional placement here or place in main file

	//Check the WHO_AM_I register to confirm communication with the MPU6050
	//The MPU6050's I2C address is 0x68, therefore this register should also contain 0x68
	I2C_Mem_Read(MPU6050_I2C_ADDR, MPU6050_WHO_AM_I, &check, 1);
 8000cda:	1dfa      	adds	r2, r7, #7
 8000cdc:	2301      	movs	r3, #1
 8000cde:	2175      	movs	r1, #117	@ 0x75
 8000ce0:	2068      	movs	r0, #104	@ 0x68
 8000ce2:	f7ff feab 	bl	8000a3c <I2C_Mem_Read>

	if(check == MPU6050_I2C_ADDR){
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	2b68      	cmp	r3, #104	@ 0x68
 8000cea:	d121      	bne.n	8000d30 <MPU6050_Init+0x5c>
		//Must wake up device by writing 0 to the Power Management 1 Register
		data = 0x00;
 8000cec:	2300      	movs	r3, #0
 8000cee:	71bb      	strb	r3, [r7, #6]
		I2C_Mem_Write(MPU6050_I2C_ADDR, MPUR_PWR_MGMT_1, &data, 1);
 8000cf0:	1dba      	adds	r2, r7, #6
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	216b      	movs	r1, #107	@ 0x6b
 8000cf6:	2068      	movs	r0, #104	@ 0x68
 8000cf8:	f7ff fe3c 	bl	8000974 <I2C_Mem_Write>

		// Set the sample rate. 1kHz/(1+SMPLRT_DIV)
		// Set SMPLRT_DIV to 7 for a 125Hz sample rate
		data = 0x07;
 8000cfc:	2307      	movs	r3, #7
 8000cfe:	71bb      	strb	r3, [r7, #6]
		I2C_Mem_Write(MPU6050_I2C_ADDR, MPUR_SMPLRT_DIV, &data, 1);
 8000d00:	1dba      	adds	r2, r7, #6
 8000d02:	2301      	movs	r3, #1
 8000d04:	2119      	movs	r1, #25
 8000d06:	2068      	movs	r0, #104	@ 0x68
 8000d08:	f7ff fe34 	bl	8000974 <I2C_Mem_Write>

		// Configure the accelerometer to a full-scale range of +/- 2g
		data = 0x00;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	71bb      	strb	r3, [r7, #6]
		I2C_Mem_Write(MPU6050_I2C_ADDR, MPUR_ACCEL_CONFIG, &data, 1);
 8000d10:	1dba      	adds	r2, r7, #6
 8000d12:	2301      	movs	r3, #1
 8000d14:	211c      	movs	r1, #28
 8000d16:	2068      	movs	r0, #104	@ 0x68
 8000d18:	f7ff fe2c 	bl	8000974 <I2C_Mem_Write>

		// Configure the gyroscope to a full-scale range of +/- 250 degrees/sec
		data = 0x00;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	71bb      	strb	r3, [r7, #6]
		I2C_Mem_Write(MPU6050_I2C_ADDR, MPUR_GYRO_CONFIG, &data, 1);
 8000d20:	1dba      	adds	r2, r7, #6
 8000d22:	2301      	movs	r3, #1
 8000d24:	211b      	movs	r1, #27
 8000d26:	2068      	movs	r0, #104	@ 0x68
 8000d28:	f7ff fe24 	bl	8000974 <I2C_Mem_Write>

		return 1; // success
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	e000      	b.n	8000d32 <MPU6050_Init+0x5e>
	}

	return 0; // fail
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(int16_t *accel_x, int16_t * accel_y, int16_t *accel_z){
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	60f8      	str	r0, [r7, #12]
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
	uint8_t buffer[6]; //stores raw data

	// Read 6 bytes of data starting from the ACCEL_XOUT_H register
	// Note: The MPU will automatically increment the register address after each read
	I2C_Mem_Read(MPU6050_I2C_ADDR, MPUR_ACCEL_XOUT_H, buffer, 6);
 8000d46:	f107 0210 	add.w	r2, r7, #16
 8000d4a:	2306      	movs	r3, #6
 8000d4c:	213b      	movs	r1, #59	@ 0x3b
 8000d4e:	2068      	movs	r0, #104	@ 0x68
 8000d50:	f7ff fe74 	bl	8000a3c <I2C_Mem_Read>

	// data is transmitted in big-endian format (MSB first)
	// we combine the high and low bytes for each axis to form a 16-bit signed integer
	*accel_x = (int16_t)(buffer[0] << 8 | buffer[1]);
 8000d54:	7c3b      	ldrb	r3, [r7, #16]
 8000d56:	b21b      	sxth	r3, r3
 8000d58:	021b      	lsls	r3, r3, #8
 8000d5a:	b21a      	sxth	r2, r3
 8000d5c:	7c7b      	ldrb	r3, [r7, #17]
 8000d5e:	b21b      	sxth	r3, r3
 8000d60:	4313      	orrs	r3, r2
 8000d62:	b21a      	sxth	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	801a      	strh	r2, [r3, #0]
	*accel_y = (int16_t)(buffer[2] << 8 | buffer[3]);
 8000d68:	7cbb      	ldrb	r3, [r7, #18]
 8000d6a:	b21b      	sxth	r3, r3
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	b21a      	sxth	r2, r3
 8000d70:	7cfb      	ldrb	r3, [r7, #19]
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	4313      	orrs	r3, r2
 8000d76:	b21a      	sxth	r2, r3
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	801a      	strh	r2, [r3, #0]
	*accel_z = (int16_t)(buffer[4] << 8 | buffer[5]);
 8000d7c:	7d3b      	ldrb	r3, [r7, #20]
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	021b      	lsls	r3, r3, #8
 8000d82:	b21a      	sxth	r2, r3
 8000d84:	7d7b      	ldrb	r3, [r7, #21]
 8000d86:	b21b      	sxth	r3, r3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	b21a      	sxth	r2, r3
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	801a      	strh	r2, [r3, #0]
}
 8000d90:	bf00      	nop
 8000d92:	3718      	adds	r7, #24
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(int16_t *gyro_x, int16_t *gyro_y, int16_t *gyro_z){
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b086      	sub	sp, #24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
	uint8_t buffer[6];

	I2C_Mem_Read(MPU6050_I2C_ADDR, MPUR_GYRO_XOUT_H, buffer, 6);
 8000da4:	f107 0210 	add.w	r2, r7, #16
 8000da8:	2306      	movs	r3, #6
 8000daa:	2143      	movs	r1, #67	@ 0x43
 8000dac:	2068      	movs	r0, #104	@ 0x68
 8000dae:	f7ff fe45 	bl	8000a3c <I2C_Mem_Read>

	*gyro_x = (int16_t)(buffer[0] << 8 | buffer[1]);
 8000db2:	7c3b      	ldrb	r3, [r7, #16]
 8000db4:	b21b      	sxth	r3, r3
 8000db6:	021b      	lsls	r3, r3, #8
 8000db8:	b21a      	sxth	r2, r3
 8000dba:	7c7b      	ldrb	r3, [r7, #17]
 8000dbc:	b21b      	sxth	r3, r3
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	b21a      	sxth	r2, r3
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	801a      	strh	r2, [r3, #0]
	*gyro_y = (int16_t)(buffer[2] << 8 | buffer[3]);
 8000dc6:	7cbb      	ldrb	r3, [r7, #18]
 8000dc8:	b21b      	sxth	r3, r3
 8000dca:	021b      	lsls	r3, r3, #8
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	7cfb      	ldrb	r3, [r7, #19]
 8000dd0:	b21b      	sxth	r3, r3
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	68bb      	ldr	r3, [r7, #8]
 8000dd8:	801a      	strh	r2, [r3, #0]
	*gyro_z = (int16_t)(buffer[4] << 8 | buffer[5]);
 8000dda:	7d3b      	ldrb	r3, [r7, #20]
 8000ddc:	b21b      	sxth	r3, r3
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	7d7b      	ldrb	r3, [r7, #21]
 8000de4:	b21b      	sxth	r3, r3
 8000de6:	4313      	orrs	r3, r2
 8000de8:	b21a      	sxth	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	801a      	strh	r2, [r3, #0]
}
 8000dee:	bf00      	nop
 8000df0:	3718      	adds	r7, #24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
	...

08000df8 <MPU6050_Calibrate>:


void MPU6050_Calibrate(void){
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	@ 0x28
 8000dfc:	af00      	add	r7, sp, #0
	// Calibrate accel
	int32_t sum_x = 0, sum_y = 0, sum_z = 0;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
	const int samples = 500;
 8000e0a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e0e:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < samples; i++) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	e01d      	b.n	8000e52 <MPU6050_Calibrate+0x5a>
		int16_t ax, ay, az;
		MPU6050_Read_Accel(&ax, &ay, &az);
 8000e16:	f107 020a 	add.w	r2, r7, #10
 8000e1a:	f107 010c 	add.w	r1, r7, #12
 8000e1e:	f107 030e 	add.w	r3, r7, #14
 8000e22:	4618      	mov	r0, r3
 8000e24:	f7ff ff89 	bl	8000d3a <MPU6050_Read_Accel>
		sum_x += ax;
 8000e28:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e30:	4413      	add	r3, r2
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
		sum_y += ay;
 8000e34:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	6a3b      	ldr	r3, [r7, #32]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	623b      	str	r3, [r7, #32]
		sum_z += az;
 8000e40:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e44:	461a      	mov	r2, r3
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	4413      	add	r3, r2
 8000e4a:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < samples; i++) {
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	69ba      	ldr	r2, [r7, #24]
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	429a      	cmp	r2, r3
 8000e58:	dbdd      	blt.n	8000e16 <MPU6050_Calibrate+0x1e>
	}
	accel_x_offset = sum_x / samples;
 8000e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e62:	b21a      	sxth	r2, r3
 8000e64:	4b2a      	ldr	r3, [pc, #168]	@ (8000f10 <MPU6050_Calibrate+0x118>)
 8000e66:	801a      	strh	r2, [r3, #0]
	accel_y_offset = sum_y / samples;
 8000e68:	6a3a      	ldr	r2, [r7, #32]
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	4b28      	ldr	r3, [pc, #160]	@ (8000f14 <MPU6050_Calibrate+0x11c>)
 8000e74:	801a      	strh	r2, [r3, #0]
	accel_z_offset = (sum_z / samples) - 16384; // Optional: subtract 16384 if you want "0g at rest"
 8000e76:	69fa      	ldr	r2, [r7, #28]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	b21a      	sxth	r2, r3
 8000e88:	4b23      	ldr	r3, [pc, #140]	@ (8000f18 <MPU6050_Calibrate+0x120>)
 8000e8a:	801a      	strh	r2, [r3, #0]

	// Calibrate gyro
	sum_x = sum_y = sum_z = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	623b      	str	r3, [r7, #32]
 8000e94:	6a3b      	ldr	r3, [r7, #32]
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < samples; i++) {
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	e01b      	b.n	8000ed6 <MPU6050_Calibrate+0xde>
		int16_t gx, gy, gz;
		MPU6050_Read_Gyro(&gx, &gy, &gz);
 8000e9e:	1d3a      	adds	r2, r7, #4
 8000ea0:	1db9      	adds	r1, r7, #6
 8000ea2:	f107 0308 	add.w	r3, r7, #8
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff76 	bl	8000d98 <MPU6050_Read_Gyro>
		sum_x += gx;
 8000eac:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eb4:	4413      	add	r3, r2
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
		sum_y += gy;
 8000eb8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	6a3b      	ldr	r3, [r7, #32]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	623b      	str	r3, [r7, #32]
		sum_z += gz;
 8000ec4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	4413      	add	r3, r2
 8000ece:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < samples; i++) {
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
 8000ed6:	697a      	ldr	r2, [r7, #20]
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	429a      	cmp	r2, r3
 8000edc:	dbdf      	blt.n	8000e9e <MPU6050_Calibrate+0xa6>
	}
	gyro_x_offset = sum_x / samples;
 8000ede:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ee6:	b21a      	sxth	r2, r3
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MPU6050_Calibrate+0x124>)
 8000eea:	801a      	strh	r2, [r3, #0]
	gyro_y_offset = sum_y / samples;
 8000eec:	6a3a      	ldr	r2, [r7, #32]
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ef4:	b21a      	sxth	r2, r3
 8000ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f20 <MPU6050_Calibrate+0x128>)
 8000ef8:	801a      	strh	r2, [r3, #0]
	gyro_z_offset = sum_z / samples;
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	4b07      	ldr	r3, [pc, #28]	@ (8000f24 <MPU6050_Calibrate+0x12c>)
 8000f06:	801a      	strh	r2, [r3, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	3728      	adds	r7, #40	@ 0x28
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	200000ac 	.word	0x200000ac
 8000f14:	200000ae 	.word	0x200000ae
 8000f18:	200000b0 	.word	0x200000b0
 8000f1c:	200000b2 	.word	0x200000b2
 8000f20:	200000b4 	.word	0x200000b4
 8000f24:	200000b6 	.word	0x200000b6

08000f28 <MPU6050_Read_Calibrated>:


void MPU6050_Read_Calibrated(float *ax_g_out, float *ay_g_out, float *az_g_out, float *gx_dps_out, float *gy_dps_out, float *gz_dps_out){
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
 8000f34:	603b      	str	r3, [r7, #0]
	 int16_t accel_x, accel_y, accel_z;
	    int16_t gyro_x, gyro_y, gyro_z;

	    MPU6050_Read_Accel(&accel_x, &accel_y, &accel_z);
 8000f36:	f107 0216 	add.w	r2, r7, #22
 8000f3a:	f107 0118 	add.w	r1, r7, #24
 8000f3e:	f107 031a 	add.w	r3, r7, #26
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fef9 	bl	8000d3a <MPU6050_Read_Accel>
	    MPU6050_Read_Gyro(&gyro_x, &gyro_y, &gyro_z);
 8000f48:	f107 0210 	add.w	r2, r7, #16
 8000f4c:	f107 0112 	add.w	r1, r7, #18
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff ff1f 	bl	8000d98 <MPU6050_Read_Gyro>

	    // Offset correction
	    int16_t axc = accel_x - accel_x_offset;
 8000f5a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	4b45      	ldr	r3, [pc, #276]	@ (8001078 <MPU6050_Read_Calibrated+0x150>)
 8000f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f66:	b29b      	uxth	r3, r3
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    int16_t ayc = accel_y - accel_y_offset;
 8000f6e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000f72:	b29a      	uxth	r2, r3
 8000f74:	4b41      	ldr	r3, [pc, #260]	@ (800107c <MPU6050_Read_Calibrated+0x154>)
 8000f76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	84bb      	strh	r3, [r7, #36]	@ 0x24
	    int16_t azc = accel_z - accel_z_offset;
 8000f82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	4b3d      	ldr	r3, [pc, #244]	@ (8001080 <MPU6050_Read_Calibrated+0x158>)
 8000f8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f8e:	b29b      	uxth	r3, r3
 8000f90:	1ad3      	subs	r3, r2, r3
 8000f92:	b29b      	uxth	r3, r3
 8000f94:	847b      	strh	r3, [r7, #34]	@ 0x22

	    int16_t gxc = gyro_x - gyro_x_offset;
 8000f96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000f9a:	b29a      	uxth	r2, r3
 8000f9c:	4b39      	ldr	r3, [pc, #228]	@ (8001084 <MPU6050_Read_Calibrated+0x15c>)
 8000f9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	843b      	strh	r3, [r7, #32]
	    int16_t gyc = gyro_y - gyro_y_offset;
 8000faa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000fae:	b29a      	uxth	r2, r3
 8000fb0:	4b35      	ldr	r3, [pc, #212]	@ (8001088 <MPU6050_Read_Calibrated+0x160>)
 8000fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	83fb      	strh	r3, [r7, #30]
	    int16_t gzc = gyro_z - gyro_z_offset;
 8000fbe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000fc2:	b29a      	uxth	r2, r3
 8000fc4:	4b31      	ldr	r3, [pc, #196]	@ (800108c <MPU6050_Read_Calibrated+0x164>)
 8000fc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	83bb      	strh	r3, [r7, #28]

	    // Normalization
	    *ax_g_out = axc / 16384.0f;
 8000fd2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8000fd6:	ee07 3a90 	vmov	s15, r3
 8000fda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fde:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8001090 <MPU6050_Read_Calibrated+0x168>
 8000fe2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	edc3 7a00 	vstr	s15, [r3]
	    *ay_g_out = ayc / 16384.0f;
 8000fec:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ff8:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8001090 <MPU6050_Read_Calibrated+0x168>
 8000ffc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	edc3 7a00 	vstr	s15, [r3]
	    *az_g_out = azc / 16384.0f;
 8001006:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800100a:	ee07 3a90 	vmov	s15, r3
 800100e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001012:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 8001090 <MPU6050_Read_Calibrated+0x168>
 8001016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	edc3 7a00 	vstr	s15, [r3]

	    *gx_dps_out = gxc / 131.0f;
 8001020:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800102c:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001094 <MPU6050_Read_Calibrated+0x16c>
 8001030:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	edc3 7a00 	vstr	s15, [r3]
	    *gy_dps_out = gyc / 131.0f;
 800103a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800103e:	ee07 3a90 	vmov	s15, r3
 8001042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001046:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001094 <MPU6050_Read_Calibrated+0x16c>
 800104a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800104e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001050:	edc3 7a00 	vstr	s15, [r3]
	    *gz_dps_out = gzc / 131.0f;
 8001054:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001058:	ee07 3a90 	vmov	s15, r3
 800105c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001060:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001094 <MPU6050_Read_Calibrated+0x16c>
 8001064:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800106a:	edc3 7a00 	vstr	s15, [r3]
}
 800106e:	bf00      	nop
 8001070:	3728      	adds	r7, #40	@ 0x28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	200000ac 	.word	0x200000ac
 800107c:	200000ae 	.word	0x200000ae
 8001080:	200000b0 	.word	0x200000b0
 8001084:	200000b2 	.word	0x200000b2
 8001088:	200000b4 	.word	0x200000b4
 800108c:	200000b6 	.word	0x200000b6
 8001090:	46800000 	.word	0x46800000
 8001094:	43030000 	.word	0x43030000

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b12      	ldr	r3, [pc, #72]	@ (80010ec <HAL_MspInit+0x54>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a6:	4a11      	ldr	r2, [pc, #68]	@ (80010ec <HAL_MspInit+0x54>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ae:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <HAL_MspInit+0x54>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <HAL_MspInit+0x54>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	4a0a      	ldr	r2, [pc, #40]	@ (80010ec <HAL_MspInit+0x54>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ca:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <HAL_MspInit+0x54>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	210f      	movs	r1, #15
 80010da:	f06f 0001 	mvn.w	r0, #1
 80010de:	f000 fa69 	bl	80015b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40023800 	.word	0x40023800

080010f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08e      	sub	sp, #56	@ 0x38
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <HAL_InitTick+0xe4>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001108:	4a32      	ldr	r2, [pc, #200]	@ (80011d4 <HAL_InitTick+0xe4>)
 800110a:	f043 0310 	orr.w	r3, r3, #16
 800110e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001110:	4b30      	ldr	r3, [pc, #192]	@ (80011d4 <HAL_InitTick+0xe4>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	f003 0310 	and.w	r3, r3, #16
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800111c:	f107 0210 	add.w	r2, r7, #16
 8001120:	f107 0314 	add.w	r3, r7, #20
 8001124:	4611      	mov	r1, r2
 8001126:	4618      	mov	r0, r3
 8001128:	f000 fbc4 	bl	80018b4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001132:	2b00      	cmp	r3, #0
 8001134:	d103      	bne.n	800113e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001136:	f000 fba9 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 800113a:	6378      	str	r0, [r7, #52]	@ 0x34
 800113c:	e004      	b.n	8001148 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800113e:	f000 fba5 	bl	800188c <HAL_RCC_GetPCLK1Freq>
 8001142:	4603      	mov	r3, r0
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001148:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800114a:	4a23      	ldr	r2, [pc, #140]	@ (80011d8 <HAL_InitTick+0xe8>)
 800114c:	fba2 2303 	umull	r2, r3, r2, r3
 8001150:	0c9b      	lsrs	r3, r3, #18
 8001152:	3b01      	subs	r3, #1
 8001154:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001156:	4b21      	ldr	r3, [pc, #132]	@ (80011dc <HAL_InitTick+0xec>)
 8001158:	4a21      	ldr	r2, [pc, #132]	@ (80011e0 <HAL_InitTick+0xf0>)
 800115a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800115c:	4b1f      	ldr	r3, [pc, #124]	@ (80011dc <HAL_InitTick+0xec>)
 800115e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001162:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001164:	4a1d      	ldr	r2, [pc, #116]	@ (80011dc <HAL_InitTick+0xec>)
 8001166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001168:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800116a:	4b1c      	ldr	r3, [pc, #112]	@ (80011dc <HAL_InitTick+0xec>)
 800116c:	2200      	movs	r2, #0
 800116e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <HAL_InitTick+0xec>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001176:	4b19      	ldr	r3, [pc, #100]	@ (80011dc <HAL_InitTick+0xec>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800117c:	4817      	ldr	r0, [pc, #92]	@ (80011dc <HAL_InitTick+0xec>)
 800117e:	f001 f899 	bl	80022b4 <HAL_TIM_Base_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001188:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800118c:	2b00      	cmp	r3, #0
 800118e:	d11b      	bne.n	80011c8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001190:	4812      	ldr	r0, [pc, #72]	@ (80011dc <HAL_InitTick+0xec>)
 8001192:	f001 f8e9 	bl	8002368 <HAL_TIM_Base_Start_IT>
 8001196:	4603      	mov	r3, r0
 8001198:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800119c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d111      	bne.n	80011c8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011a4:	2036      	movs	r0, #54	@ 0x36
 80011a6:	f000 fa21 	bl	80015ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	d808      	bhi.n	80011c2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80011b0:	2200      	movs	r2, #0
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	2036      	movs	r0, #54	@ 0x36
 80011b6:	f000 f9fd 	bl	80015b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ba:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <HAL_InitTick+0xf4>)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	e002      	b.n	80011c8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80011c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3738      	adds	r7, #56	@ 0x38
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	40023800 	.word	0x40023800
 80011d8:	431bde83 	.word	0x431bde83
 80011dc:	200000b8 	.word	0x200000b8
 80011e0:	40001000 	.word	0x40001000
 80011e4:	20000004 	.word	0x20000004

080011e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <NMI_Handler+0x4>

080011f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <HardFault_Handler+0x4>

080011f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011fc:	bf00      	nop
 80011fe:	e7fd      	b.n	80011fc <MemManage_Handler+0x4>

08001200 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <BusFault_Handler+0x4>

08001208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800120c:	bf00      	nop
 800120e:	e7fd      	b.n	800120c <UsageFault_Handler+0x4>

08001210 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
	...

08001220 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <TIM6_DAC_IRQHandler+0x10>)
 8001226:	f001 f90f 	bl	8002448 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	200000b8 	.word	0x200000b8

08001234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001238:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <SystemInit+0x20>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800123e:	4a05      	ldr	r2, [pc, #20]	@ (8001254 <SystemInit+0x20>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <IBUS_ReadByte>:
	USART1->BRR = 90000000 / 115200;     // 90 MHz / 115200 = ~781
	USART1->CR1 |= USART_CR1_RE;  // Enable receiver
	USART1->CR1 |= USART_CR1_UE; // Enable USART
}

uint8_t IBUS_ReadByte(void){
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
    while (!(USART1->SR & USART_SR_RXNE));
 800125c:	bf00      	nop
 800125e:	4b07      	ldr	r3, [pc, #28]	@ (800127c <IBUS_ReadByte+0x24>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0320 	and.w	r3, r3, #32
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f9      	beq.n	800125e <IBUS_ReadByte+0x6>
    return USART1->DR;
 800126a:	4b04      	ldr	r3, [pc, #16]	@ (800127c <IBUS_ReadByte+0x24>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	b2db      	uxtb	r3, r3
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40011000 	.word	0x40011000

08001280 <UART2_Init>:

// UART 2
void UART2_Init(uint32_t baudrate) {
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	// Configure UART GPIO pin (TX)
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // Enable clock access to GPIOA
 8001288:	4b34      	ldr	r3, [pc, #208]	@ (800135c <UART2_Init+0xdc>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128c:	4a33      	ldr	r2, [pc, #204]	@ (800135c <UART2_Init+0xdc>)
 800128e:	f043 0301 	orr.w	r3, r3, #1
 8001292:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->MODER |= (1U << 5);
 8001294:	4b32      	ldr	r3, [pc, #200]	@ (8001360 <UART2_Init+0xe0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a31      	ldr	r2, [pc, #196]	@ (8001360 <UART2_Init+0xe0>)
 800129a:	f043 0320 	orr.w	r3, r3, #32
 800129e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 4); // Set PA2 to alternate function mode (MODER2)
 80012a0:	4b2f      	ldr	r3, [pc, #188]	@ (8001360 <UART2_Init+0xe0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a2e      	ldr	r2, [pc, #184]	@ (8001360 <UART2_Init+0xe0>)
 80012a6:	f023 0310 	bic.w	r3, r3, #16
 80012aa:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~(1U << 11); // Set PA2 to USART2_TX (AF07 = 0111)
 80012ac:	4b2c      	ldr	r3, [pc, #176]	@ (8001360 <UART2_Init+0xe0>)
 80012ae:	6a1b      	ldr	r3, [r3, #32]
 80012b0:	4a2b      	ldr	r2, [pc, #172]	@ (8001360 <UART2_Init+0xe0>)
 80012b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80012b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10); // note AFR[0] = AFRL(ow) vs AFR[1] = AFRH(igh)
 80012b8:	4b29      	ldr	r3, [pc, #164]	@ (8001360 <UART2_Init+0xe0>)
 80012ba:	6a1b      	ldr	r3, [r3, #32]
 80012bc:	4a28      	ldr	r2, [pc, #160]	@ (8001360 <UART2_Init+0xe0>)
 80012be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012c2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9); // since PA2 is A pin 2 we want AFRL
 80012c4:	4b26      	ldr	r3, [pc, #152]	@ (8001360 <UART2_Init+0xe0>)
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	4a25      	ldr	r2, [pc, #148]	@ (8001360 <UART2_Init+0xe0>)
 80012ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012ce:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 8); // PORTA PIN2 is set to AF7 which corresponds to USART2_TX
 80012d0:	4b23      	ldr	r3, [pc, #140]	@ (8001360 <UART2_Init+0xe0>)
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	4a22      	ldr	r2, [pc, #136]	@ (8001360 <UART2_Init+0xe0>)
 80012d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012da:	6213      	str	r3, [r2, #32]

	// Configure UART GPIO pin (RX)
	GPIOA->MODER |= (1U << 7);
 80012dc:	4b20      	ldr	r3, [pc, #128]	@ (8001360 <UART2_Init+0xe0>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001360 <UART2_Init+0xe0>)
 80012e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012e6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 6); // Set PA3 mode to alternate function mode
 80012e8:	4b1d      	ldr	r3, [pc, #116]	@ (8001360 <UART2_Init+0xe0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001360 <UART2_Init+0xe0>)
 80012ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80012f2:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[0] &= ~(1U << 15); // Set PA3 alternate function type to UART_RX (AF07)
 80012f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001360 <UART2_Init+0xe0>)
 80012f6:	6a1b      	ldr	r3, [r3, #32]
 80012f8:	4a19      	ldr	r2, [pc, #100]	@ (8001360 <UART2_Init+0xe0>)
 80012fa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80012fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 14);
 8001300:	4b17      	ldr	r3, [pc, #92]	@ (8001360 <UART2_Init+0xe0>)
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	4a16      	ldr	r2, [pc, #88]	@ (8001360 <UART2_Init+0xe0>)
 8001306:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800130a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 13);
 800130c:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <UART2_Init+0xe0>)
 800130e:	6a1b      	ldr	r3, [r3, #32]
 8001310:	4a13      	ldr	r2, [pc, #76]	@ (8001360 <UART2_Init+0xe0>)
 8001312:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001316:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 12);
 8001318:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <UART2_Init+0xe0>)
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4a10      	ldr	r2, [pc, #64]	@ (8001360 <UART2_Init+0xe0>)
 800131e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001322:	6213      	str	r3, [r2, #32]

	// Configure UART module
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // Enable clock access to UART 2
 8001324:	4b0d      	ldr	r3, [pc, #52]	@ (800135c <UART2_Init+0xdc>)
 8001326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001328:	4a0c      	ldr	r2, [pc, #48]	@ (800135c <UART2_Init+0xdc>)
 800132a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800132e:	6413      	str	r3, [r2, #64]	@ 0x40
	USART2->BRR = (45000000U / baudrate);// Configure baudrate USART2->BRR = SYS_FREQ / baudrate;
 8001330:	4a0c      	ldr	r2, [pc, #48]	@ (8001364 <UART2_Init+0xe4>)
 8001332:	490d      	ldr	r1, [pc, #52]	@ (8001368 <UART2_Init+0xe8>)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	fbb1 f3f3 	udiv	r3, r1, r3
 800133a:	6093      	str	r3, [r2, #8]
	USART2->CR1 = (USART_CR1_TE | USART_CR1_RE); // Configure the transfer direction (Set TE1 to enable Transmitter) and RE for Receiver
 800133c:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <UART2_Init+0xe4>)
 800133e:	220c      	movs	r2, #12
 8001340:	60da      	str	r2, [r3, #12]
	// Note: there is no | operator because we want to clean everything in the UART Control Register 1 (CR1)
	// while also setting CR1 bit 3 to 1 to enable transmitter
	USART2->CR1 |= USART_CR1_UE; // Enable UART Module (UE: USART enable)
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <UART2_Init+0xe4>)
 8001344:	68db      	ldr	r3, [r3, #12]
 8001346:	4a07      	ldr	r2, [pc, #28]	@ (8001364 <UART2_Init+0xe4>)
 8001348:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800134c:	60d3      	str	r3, [r2, #12]
	// without the | operation it would set every bit to 0 besides the UE bit
	// Recall: Register = 0100 0000 vs Register |= 0100 0000 (is equivalent to a "+" operation)

	// Enable TX, RX, USART2
    //USART2->CR1 |= USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;
}
 800134e:	bf00      	nop
 8001350:	370c      	adds	r7, #12
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800
 8001360:	40020000 	.word	0x40020000
 8001364:	40004400 	.word	0x40004400
 8001368:	02aea540 	.word	0x02aea540

0800136c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800136c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001370:	f7ff ff60 	bl	8001234 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001374:	480c      	ldr	r0, [pc, #48]	@ (80013a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001376:	490d      	ldr	r1, [pc, #52]	@ (80013ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001378:	4a0d      	ldr	r2, [pc, #52]	@ (80013b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a0a      	ldr	r2, [pc, #40]	@ (80013b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800138c:	4c0a      	ldr	r4, [pc, #40]	@ (80013b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800139a:	f004 f909 	bl	80055b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800139e:	f7ff fbed 	bl	8000b7c <main>
  bx  lr    
 80013a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ac:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80013b0:	08005ad0 	.word	0x08005ad0
  ldr r2, =_sbss
 80013b4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80013b8:	20004c2c 	.word	0x20004c2c

080013bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <ADC_IRQHandler>
	...

080013c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001400 <HAL_Init+0x40>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001400 <HAL_Init+0x40>)
 80013ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001400 <HAL_Init+0x40>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001400 <HAL_Init+0x40>)
 80013d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013dc:	4b08      	ldr	r3, [pc, #32]	@ (8001400 <HAL_Init+0x40>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a07      	ldr	r2, [pc, #28]	@ (8001400 <HAL_Init+0x40>)
 80013e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e8:	2003      	movs	r0, #3
 80013ea:	f000 f8d8 	bl	800159e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ee:	200f      	movs	r0, #15
 80013f0:	f7ff fe7e 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013f4:	f7ff fe50 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023c00 	.word	0x40023c00

08001404 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001408:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_IncTick+0x20>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	461a      	mov	r2, r3
 800140e:	4b06      	ldr	r3, [pc, #24]	@ (8001428 <HAL_IncTick+0x24>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4413      	add	r3, r2
 8001414:	4a04      	ldr	r2, [pc, #16]	@ (8001428 <HAL_IncTick+0x24>)
 8001416:	6013      	str	r3, [r2, #0]
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000008 	.word	0x20000008
 8001428:	20000100 	.word	0x20000100

0800142c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return uwTick;
 8001430:	4b03      	ldr	r3, [pc, #12]	@ (8001440 <HAL_GetTick+0x14>)
 8001432:	681b      	ldr	r3, [r3, #0]
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	20000100 	.word	0x20000100

08001444 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f003 0307 	and.w	r3, r3, #7
 8001452:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001454:	4b0c      	ldr	r3, [pc, #48]	@ (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001460:	4013      	ands	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001468:	68bb      	ldr	r3, [r7, #8]
 800146a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800146c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001470:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001474:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001476:	4a04      	ldr	r2, [pc, #16]	@ (8001488 <__NVIC_SetPriorityGrouping+0x44>)
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	60d3      	str	r3, [r2, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001490:	4b04      	ldr	r3, [pc, #16]	@ (80014a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001492:	68db      	ldr	r3, [r3, #12]
 8001494:	0a1b      	lsrs	r3, r3, #8
 8001496:	f003 0307 	and.w	r3, r3, #7
}
 800149a:	4618      	mov	r0, r3
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	db0b      	blt.n	80014d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ba:	79fb      	ldrb	r3, [r7, #7]
 80014bc:	f003 021f 	and.w	r2, r3, #31
 80014c0:	4907      	ldr	r1, [pc, #28]	@ (80014e0 <__NVIC_EnableIRQ+0x38>)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	2001      	movs	r0, #1
 80014ca:	fa00 f202 	lsl.w	r2, r0, r2
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	e000e100 	.word	0xe000e100

080014e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	4603      	mov	r3, r0
 80014ec:	6039      	str	r1, [r7, #0]
 80014ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	db0a      	blt.n	800150e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	490c      	ldr	r1, [pc, #48]	@ (8001530 <__NVIC_SetPriority+0x4c>)
 80014fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001502:	0112      	lsls	r2, r2, #4
 8001504:	b2d2      	uxtb	r2, r2
 8001506:	440b      	add	r3, r1
 8001508:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800150c:	e00a      	b.n	8001524 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	b2da      	uxtb	r2, r3
 8001512:	4908      	ldr	r1, [pc, #32]	@ (8001534 <__NVIC_SetPriority+0x50>)
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	f003 030f 	and.w	r3, r3, #15
 800151a:	3b04      	subs	r3, #4
 800151c:	0112      	lsls	r2, r2, #4
 800151e:	b2d2      	uxtb	r2, r2
 8001520:	440b      	add	r3, r1
 8001522:	761a      	strb	r2, [r3, #24]
}
 8001524:	bf00      	nop
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000e100 	.word	0xe000e100
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001538:	b480      	push	{r7}
 800153a:	b089      	sub	sp, #36	@ 0x24
 800153c:	af00      	add	r7, sp, #0
 800153e:	60f8      	str	r0, [r7, #12]
 8001540:	60b9      	str	r1, [r7, #8]
 8001542:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	f1c3 0307 	rsb	r3, r3, #7
 8001552:	2b04      	cmp	r3, #4
 8001554:	bf28      	it	cs
 8001556:	2304      	movcs	r3, #4
 8001558:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	3304      	adds	r3, #4
 800155e:	2b06      	cmp	r3, #6
 8001560:	d902      	bls.n	8001568 <NVIC_EncodePriority+0x30>
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3b03      	subs	r3, #3
 8001566:	e000      	b.n	800156a <NVIC_EncodePriority+0x32>
 8001568:	2300      	movs	r3, #0
 800156a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800156c:	f04f 32ff 	mov.w	r2, #4294967295
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	fa02 f303 	lsl.w	r3, r2, r3
 8001576:	43da      	mvns	r2, r3
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	401a      	ands	r2, r3
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001580:	f04f 31ff 	mov.w	r1, #4294967295
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa01 f303 	lsl.w	r3, r1, r3
 800158a:	43d9      	mvns	r1, r3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	4313      	orrs	r3, r2
         );
}
 8001592:	4618      	mov	r0, r3
 8001594:	3724      	adds	r7, #36	@ 0x24
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ff4c 	bl	8001444 <__NVIC_SetPriorityGrouping>
}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
 80015c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015c6:	f7ff ff61 	bl	800148c <__NVIC_GetPriorityGrouping>
 80015ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	68b9      	ldr	r1, [r7, #8]
 80015d0:	6978      	ldr	r0, [r7, #20]
 80015d2:	f7ff ffb1 	bl	8001538 <NVIC_EncodePriority>
 80015d6:	4602      	mov	r2, r0
 80015d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015dc:	4611      	mov	r1, r2
 80015de:	4618      	mov	r0, r3
 80015e0:	f7ff ff80 	bl	80014e4 <__NVIC_SetPriority>
}
 80015e4:	bf00      	nop
 80015e6:	3718      	adds	r7, #24
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff54 	bl	80014a8 <__NVIC_EnableIRQ>
}
 8001600:	bf00      	nop
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}

08001608 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b20      	ldr	r3, [pc, #128]	@ (8001698 <HAL_PWREx_EnableOverDrive+0x90>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161a:	4a1f      	ldr	r2, [pc, #124]	@ (8001698 <HAL_PWREx_EnableOverDrive+0x90>)
 800161c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001620:	6413      	str	r3, [r2, #64]	@ 0x40
 8001622:	4b1d      	ldr	r3, [pc, #116]	@ (8001698 <HAL_PWREx_EnableOverDrive+0x90>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001626:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800162e:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <HAL_PWREx_EnableOverDrive+0x94>)
 8001630:	2201      	movs	r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001634:	f7ff fefa 	bl	800142c <HAL_GetTick>
 8001638:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800163a:	e009      	b.n	8001650 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800163c:	f7ff fef6 	bl	800142c <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800164a:	d901      	bls.n	8001650 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e01f      	b.n	8001690 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001650:	4b13      	ldr	r3, [pc, #76]	@ (80016a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001658:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800165c:	d1ee      	bne.n	800163c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800165e:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001660:	2201      	movs	r2, #1
 8001662:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001664:	f7ff fee2 	bl	800142c <HAL_GetTick>
 8001668:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800166a:	e009      	b.n	8001680 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800166c:	f7ff fede 	bl	800142c <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800167a:	d901      	bls.n	8001680 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e007      	b.n	8001690 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001680:	4b07      	ldr	r3, [pc, #28]	@ (80016a0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001688:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800168c:	d1ee      	bne.n	800166c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800168e:	2300      	movs	r3, #0
}
 8001690:	4618      	mov	r0, r3
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	40023800 	.word	0x40023800
 800169c:	420e0040 	.word	0x420e0040
 80016a0:	40007000 	.word	0x40007000
 80016a4:	420e0044 	.word	0x420e0044

080016a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b084      	sub	sp, #16
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d101      	bne.n	80016bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e0cc      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016bc:	4b68      	ldr	r3, [pc, #416]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 030f 	and.w	r3, r3, #15
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	429a      	cmp	r2, r3
 80016c8:	d90c      	bls.n	80016e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ca:	4b65      	ldr	r3, [pc, #404]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016d2:	4b63      	ldr	r3, [pc, #396]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 030f 	and.w	r3, r3, #15
 80016da:	683a      	ldr	r2, [r7, #0]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d001      	beq.n	80016e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e0b8      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d020      	beq.n	8001732 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d005      	beq.n	8001708 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016fc:	4b59      	ldr	r3, [pc, #356]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4a58      	ldr	r2, [pc, #352]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001706:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001714:	4b53      	ldr	r3, [pc, #332]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a52      	ldr	r2, [pc, #328]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800171e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001720:	4b50      	ldr	r3, [pc, #320]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	494d      	ldr	r1, [pc, #308]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	4313      	orrs	r3, r2
 8001730:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	2b00      	cmp	r3, #0
 800173c:	d044      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d107      	bne.n	8001756 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	4b47      	ldr	r3, [pc, #284]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d119      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e07f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d003      	beq.n	8001766 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001762:	2b03      	cmp	r3, #3
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001766:	4b3f      	ldr	r3, [pc, #252]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d109      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e06f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001776:	4b3b      	ldr	r3, [pc, #236]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d101      	bne.n	8001786 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
 8001784:	e067      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001786:	4b37      	ldr	r3, [pc, #220]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f023 0203 	bic.w	r2, r3, #3
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4934      	ldr	r1, [pc, #208]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001794:	4313      	orrs	r3, r2
 8001796:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001798:	f7ff fe48 	bl	800142c <HAL_GetTick>
 800179c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800179e:	e00a      	b.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017a0:	f7ff fe44 	bl	800142c <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e04f      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	4b2b      	ldr	r3, [pc, #172]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 020c 	and.w	r2, r3, #12
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d1eb      	bne.n	80017a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017c8:	4b25      	ldr	r3, [pc, #148]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 030f 	and.w	r3, r3, #15
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d20c      	bcs.n	80017f0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017d6:	4b22      	ldr	r3, [pc, #136]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	683a      	ldr	r2, [r7, #0]
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017de:	4b20      	ldr	r3, [pc, #128]	@ (8001860 <HAL_RCC_ClockConfig+0x1b8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f003 030f 	and.w	r3, r3, #15
 80017e6:	683a      	ldr	r2, [r7, #0]
 80017e8:	429a      	cmp	r2, r3
 80017ea:	d001      	beq.n	80017f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e032      	b.n	8001856 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d008      	beq.n	800180e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017fc:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	4916      	ldr	r1, [pc, #88]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d009      	beq.n	800182e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800181a:	4b12      	ldr	r3, [pc, #72]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	490e      	ldr	r1, [pc, #56]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 800182a:	4313      	orrs	r3, r2
 800182c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800182e:	f000 f873 	bl	8001918 <HAL_RCC_GetSysClockFreq>
 8001832:	4602      	mov	r2, r0
 8001834:	4b0b      	ldr	r3, [pc, #44]	@ (8001864 <HAL_RCC_ClockConfig+0x1bc>)
 8001836:	689b      	ldr	r3, [r3, #8]
 8001838:	091b      	lsrs	r3, r3, #4
 800183a:	f003 030f 	and.w	r3, r3, #15
 800183e:	490a      	ldr	r1, [pc, #40]	@ (8001868 <HAL_RCC_ClockConfig+0x1c0>)
 8001840:	5ccb      	ldrb	r3, [r1, r3]
 8001842:	fa22 f303 	lsr.w	r3, r2, r3
 8001846:	4a09      	ldr	r2, [pc, #36]	@ (800186c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800184a:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <HAL_RCC_ClockConfig+0x1c8>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4618      	mov	r0, r3
 8001850:	f7ff fc4e 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40023c00 	.word	0x40023c00
 8001864:	40023800 	.word	0x40023800
 8001868:	08005a70 	.word	0x08005a70
 800186c:	20000000 	.word	0x20000000
 8001870:	20000004 	.word	0x20000004

08001874 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001878:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <HAL_RCC_GetHCLKFreq+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000000 	.word	0x20000000

0800188c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001890:	f7ff fff0 	bl	8001874 <HAL_RCC_GetHCLKFreq>
 8001894:	4602      	mov	r2, r0
 8001896:	4b05      	ldr	r3, [pc, #20]	@ (80018ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	0a9b      	lsrs	r3, r3, #10
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	4903      	ldr	r1, [pc, #12]	@ (80018b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018a2:	5ccb      	ldrb	r3, [r1, r3]
 80018a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	08005a80 	.word	0x08005a80

080018b4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	220f      	movs	r2, #15
 80018c2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80018c4:	4b12      	ldr	r3, [pc, #72]	@ (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0203 	and.w	r2, r3, #3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018e8:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_RCC_GetClockConfig+0x5c>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	08db      	lsrs	r3, r3, #3
 80018ee:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018f6:	4b07      	ldr	r3, [pc, #28]	@ (8001914 <HAL_RCC_GetClockConfig+0x60>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 020f 	and.w	r2, r3, #15
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	601a      	str	r2, [r3, #0]
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40023800 	.word	0x40023800
 8001914:	40023c00 	.word	0x40023c00

08001918 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800191c:	b0ae      	sub	sp, #184	@ 0xb8
 800191e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001920:	2300      	movs	r3, #0
 8001922:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001926:	2300      	movs	r3, #0
 8001928:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800193e:	4bcb      	ldr	r3, [pc, #812]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b0c      	cmp	r3, #12
 8001948:	f200 8206 	bhi.w	8001d58 <HAL_RCC_GetSysClockFreq+0x440>
 800194c:	a201      	add	r2, pc, #4	@ (adr r2, 8001954 <HAL_RCC_GetSysClockFreq+0x3c>)
 800194e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001952:	bf00      	nop
 8001954:	08001989 	.word	0x08001989
 8001958:	08001d59 	.word	0x08001d59
 800195c:	08001d59 	.word	0x08001d59
 8001960:	08001d59 	.word	0x08001d59
 8001964:	08001991 	.word	0x08001991
 8001968:	08001d59 	.word	0x08001d59
 800196c:	08001d59 	.word	0x08001d59
 8001970:	08001d59 	.word	0x08001d59
 8001974:	08001999 	.word	0x08001999
 8001978:	08001d59 	.word	0x08001d59
 800197c:	08001d59 	.word	0x08001d59
 8001980:	08001d59 	.word	0x08001d59
 8001984:	08001b89 	.word	0x08001b89
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001988:	4bb9      	ldr	r3, [pc, #740]	@ (8001c70 <HAL_RCC_GetSysClockFreq+0x358>)
 800198a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800198e:	e1e7      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001990:	4bb8      	ldr	r3, [pc, #736]	@ (8001c74 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001992:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001996:	e1e3      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001998:	4bb4      	ldr	r3, [pc, #720]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x354>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019a0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019a4:	4bb1      	ldr	r3, [pc, #708]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x354>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d071      	beq.n	8001a94 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019b0:	4bae      	ldr	r3, [pc, #696]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x354>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	099b      	lsrs	r3, r3, #6
 80019b6:	2200      	movs	r2, #0
 80019b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80019bc:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80019c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80019cc:	2300      	movs	r3, #0
 80019ce:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80019d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80019d6:	4622      	mov	r2, r4
 80019d8:	462b      	mov	r3, r5
 80019da:	f04f 0000 	mov.w	r0, #0
 80019de:	f04f 0100 	mov.w	r1, #0
 80019e2:	0159      	lsls	r1, r3, #5
 80019e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019e8:	0150      	lsls	r0, r2, #5
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4621      	mov	r1, r4
 80019f0:	1a51      	subs	r1, r2, r1
 80019f2:	6439      	str	r1, [r7, #64]	@ 0x40
 80019f4:	4629      	mov	r1, r5
 80019f6:	eb63 0301 	sbc.w	r3, r3, r1
 80019fa:	647b      	str	r3, [r7, #68]	@ 0x44
 80019fc:	f04f 0200 	mov.w	r2, #0
 8001a00:	f04f 0300 	mov.w	r3, #0
 8001a04:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8001a08:	4649      	mov	r1, r9
 8001a0a:	018b      	lsls	r3, r1, #6
 8001a0c:	4641      	mov	r1, r8
 8001a0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a12:	4641      	mov	r1, r8
 8001a14:	018a      	lsls	r2, r1, #6
 8001a16:	4641      	mov	r1, r8
 8001a18:	1a51      	subs	r1, r2, r1
 8001a1a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8001a1c:	4649      	mov	r1, r9
 8001a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8001a22:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a24:	f04f 0200 	mov.w	r2, #0
 8001a28:	f04f 0300 	mov.w	r3, #0
 8001a2c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001a30:	4649      	mov	r1, r9
 8001a32:	00cb      	lsls	r3, r1, #3
 8001a34:	4641      	mov	r1, r8
 8001a36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a3a:	4641      	mov	r1, r8
 8001a3c:	00ca      	lsls	r2, r1, #3
 8001a3e:	4610      	mov	r0, r2
 8001a40:	4619      	mov	r1, r3
 8001a42:	4603      	mov	r3, r0
 8001a44:	4622      	mov	r2, r4
 8001a46:	189b      	adds	r3, r3, r2
 8001a48:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a4a:	462b      	mov	r3, r5
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	eb42 0303 	adc.w	r3, r2, r3
 8001a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	f04f 0300 	mov.w	r3, #0
 8001a5c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a60:	4629      	mov	r1, r5
 8001a62:	024b      	lsls	r3, r1, #9
 8001a64:	4621      	mov	r1, r4
 8001a66:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	024a      	lsls	r2, r1, #9
 8001a6e:	4610      	mov	r0, r2
 8001a70:	4619      	mov	r1, r3
 8001a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a76:	2200      	movs	r2, #0
 8001a78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001a7c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001a80:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001a84:	f7fe fbc4 	bl	8000210 <__aeabi_uldivmod>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	460b      	mov	r3, r1
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a92:	e067      	b.n	8001b64 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a94:	4b75      	ldr	r3, [pc, #468]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	099b      	lsrs	r3, r3, #6
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001aa0:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001aa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001aa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001aac:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001aae:	2300      	movs	r3, #0
 8001ab0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001ab2:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001ab6:	4622      	mov	r2, r4
 8001ab8:	462b      	mov	r3, r5
 8001aba:	f04f 0000 	mov.w	r0, #0
 8001abe:	f04f 0100 	mov.w	r1, #0
 8001ac2:	0159      	lsls	r1, r3, #5
 8001ac4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ac8:	0150      	lsls	r0, r2, #5
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4621      	mov	r1, r4
 8001ad0:	1a51      	subs	r1, r2, r1
 8001ad2:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	eb63 0301 	sbc.w	r3, r3, r1
 8001ada:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001adc:	f04f 0200 	mov.w	r2, #0
 8001ae0:	f04f 0300 	mov.w	r3, #0
 8001ae4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001ae8:	4649      	mov	r1, r9
 8001aea:	018b      	lsls	r3, r1, #6
 8001aec:	4641      	mov	r1, r8
 8001aee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001af2:	4641      	mov	r1, r8
 8001af4:	018a      	lsls	r2, r1, #6
 8001af6:	4641      	mov	r1, r8
 8001af8:	ebb2 0a01 	subs.w	sl, r2, r1
 8001afc:	4649      	mov	r1, r9
 8001afe:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	f04f 0300 	mov.w	r3, #0
 8001b0a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001b0e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001b12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001b16:	4692      	mov	sl, r2
 8001b18:	469b      	mov	fp, r3
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	eb1a 0303 	adds.w	r3, sl, r3
 8001b20:	623b      	str	r3, [r7, #32]
 8001b22:	462b      	mov	r3, r5
 8001b24:	eb4b 0303 	adc.w	r3, fp, r3
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b36:	4629      	mov	r1, r5
 8001b38:	028b      	lsls	r3, r1, #10
 8001b3a:	4621      	mov	r1, r4
 8001b3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b40:	4621      	mov	r1, r4
 8001b42:	028a      	lsls	r2, r1, #10
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	673b      	str	r3, [r7, #112]	@ 0x70
 8001b50:	677a      	str	r2, [r7, #116]	@ 0x74
 8001b52:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001b56:	f7fe fb5b 	bl	8000210 <__aeabi_uldivmod>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4613      	mov	r3, r2
 8001b60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001b64:	4b41      	ldr	r3, [pc, #260]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	0c1b      	lsrs	r3, r3, #16
 8001b6a:	f003 0303 	and.w	r3, r3, #3
 8001b6e:	3301      	adds	r3, #1
 8001b70:	005b      	lsls	r3, r3, #1
 8001b72:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8001b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b7a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b82:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b86:	e0eb      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b88:	4b38      	ldr	r3, [pc, #224]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b94:	4b35      	ldr	r3, [pc, #212]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d06b      	beq.n	8001c78 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ba0:	4b32      	ldr	r3, [pc, #200]	@ (8001c6c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	099b      	lsrs	r3, r3, #6
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001baa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001bac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bb2:	663b      	str	r3, [r7, #96]	@ 0x60
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8001bb8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001bbc:	4622      	mov	r2, r4
 8001bbe:	462b      	mov	r3, r5
 8001bc0:	f04f 0000 	mov.w	r0, #0
 8001bc4:	f04f 0100 	mov.w	r1, #0
 8001bc8:	0159      	lsls	r1, r3, #5
 8001bca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001bce:	0150      	lsls	r0, r2, #5
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4621      	mov	r1, r4
 8001bd6:	1a51      	subs	r1, r2, r1
 8001bd8:	61b9      	str	r1, [r7, #24]
 8001bda:	4629      	mov	r1, r5
 8001bdc:	eb63 0301 	sbc.w	r3, r3, r1
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	f04f 0200 	mov.w	r2, #0
 8001be6:	f04f 0300 	mov.w	r3, #0
 8001bea:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001bee:	4659      	mov	r1, fp
 8001bf0:	018b      	lsls	r3, r1, #6
 8001bf2:	4651      	mov	r1, sl
 8001bf4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bf8:	4651      	mov	r1, sl
 8001bfa:	018a      	lsls	r2, r1, #6
 8001bfc:	4651      	mov	r1, sl
 8001bfe:	ebb2 0801 	subs.w	r8, r2, r1
 8001c02:	4659      	mov	r1, fp
 8001c04:	eb63 0901 	sbc.w	r9, r3, r1
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
 8001c10:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c14:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c18:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c1c:	4690      	mov	r8, r2
 8001c1e:	4699      	mov	r9, r3
 8001c20:	4623      	mov	r3, r4
 8001c22:	eb18 0303 	adds.w	r3, r8, r3
 8001c26:	613b      	str	r3, [r7, #16]
 8001c28:	462b      	mov	r3, r5
 8001c2a:	eb49 0303 	adc.w	r3, r9, r3
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c3c:	4629      	mov	r1, r5
 8001c3e:	024b      	lsls	r3, r1, #9
 8001c40:	4621      	mov	r1, r4
 8001c42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c46:	4621      	mov	r1, r4
 8001c48:	024a      	lsls	r2, r1, #9
 8001c4a:	4610      	mov	r0, r2
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c52:	2200      	movs	r2, #0
 8001c54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001c56:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001c58:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c5c:	f7fe fad8 	bl	8000210 <__aeabi_uldivmod>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4613      	mov	r3, r2
 8001c66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c6a:	e065      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x420>
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	00f42400 	.word	0x00f42400
 8001c74:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c78:	4b3d      	ldr	r3, [pc, #244]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x458>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	099b      	lsrs	r3, r3, #6
 8001c7e:	2200      	movs	r2, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	4611      	mov	r1, r2
 8001c84:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c88:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c8e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001c92:	4642      	mov	r2, r8
 8001c94:	464b      	mov	r3, r9
 8001c96:	f04f 0000 	mov.w	r0, #0
 8001c9a:	f04f 0100 	mov.w	r1, #0
 8001c9e:	0159      	lsls	r1, r3, #5
 8001ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ca4:	0150      	lsls	r0, r2, #5
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	460b      	mov	r3, r1
 8001caa:	4641      	mov	r1, r8
 8001cac:	1a51      	subs	r1, r2, r1
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	4649      	mov	r1, r9
 8001cb2:	eb63 0301 	sbc.w	r3, r3, r1
 8001cb6:	60fb      	str	r3, [r7, #12]
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001cc4:	4659      	mov	r1, fp
 8001cc6:	018b      	lsls	r3, r1, #6
 8001cc8:	4651      	mov	r1, sl
 8001cca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cce:	4651      	mov	r1, sl
 8001cd0:	018a      	lsls	r2, r1, #6
 8001cd2:	4651      	mov	r1, sl
 8001cd4:	1a54      	subs	r4, r2, r1
 8001cd6:	4659      	mov	r1, fp
 8001cd8:	eb63 0501 	sbc.w	r5, r3, r1
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	f04f 0300 	mov.w	r3, #0
 8001ce4:	00eb      	lsls	r3, r5, #3
 8001ce6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cea:	00e2      	lsls	r2, r4, #3
 8001cec:	4614      	mov	r4, r2
 8001cee:	461d      	mov	r5, r3
 8001cf0:	4643      	mov	r3, r8
 8001cf2:	18e3      	adds	r3, r4, r3
 8001cf4:	603b      	str	r3, [r7, #0]
 8001cf6:	464b      	mov	r3, r9
 8001cf8:	eb45 0303 	adc.w	r3, r5, r3
 8001cfc:	607b      	str	r3, [r7, #4]
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001d0a:	4629      	mov	r1, r5
 8001d0c:	028b      	lsls	r3, r1, #10
 8001d0e:	4621      	mov	r1, r4
 8001d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001d14:	4621      	mov	r1, r4
 8001d16:	028a      	lsls	r2, r1, #10
 8001d18:	4610      	mov	r0, r2
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001d20:	2200      	movs	r2, #0
 8001d22:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d24:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001d26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d2a:	f7fe fa71 	bl	8000210 <__aeabi_uldivmod>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4613      	mov	r3, r2
 8001d34:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d38:	4b0d      	ldr	r3, [pc, #52]	@ (8001d70 <HAL_RCC_GetSysClockFreq+0x458>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	0f1b      	lsrs	r3, r3, #28
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8001d46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001d4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d56:	e003      	b.n	8001d60 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d58:	4b06      	ldr	r3, [pc, #24]	@ (8001d74 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	37b8      	adds	r7, #184	@ 0xb8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6e:	bf00      	nop
 8001d70:	40023800 	.word	0x40023800
 8001d74:	00f42400 	.word	0x00f42400

08001d78 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d101      	bne.n	8001d8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e28d      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	f000 8083 	beq.w	8001e9e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001d98:	4b94      	ldr	r3, [pc, #592]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 030c 	and.w	r3, r3, #12
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d019      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001da4:	4b91      	ldr	r3, [pc, #580]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 030c 	and.w	r3, r3, #12
        || \
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d106      	bne.n	8001dbe <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001db0:	4b8e      	ldr	r3, [pc, #568]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001db8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dbc:	d00c      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dbe:	4b8b      	ldr	r3, [pc, #556]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001dc6:	2b0c      	cmp	r3, #12
 8001dc8:	d112      	bne.n	8001df0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001dca:	4b88      	ldr	r3, [pc, #544]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dd6:	d10b      	bne.n	8001df0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dd8:	4b84      	ldr	r3, [pc, #528]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d05b      	beq.n	8001e9c <HAL_RCC_OscConfig+0x124>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d157      	bne.n	8001e9c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e25a      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001df8:	d106      	bne.n	8001e08 <HAL_RCC_OscConfig+0x90>
 8001dfa:	4b7c      	ldr	r3, [pc, #496]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a7b      	ldr	r2, [pc, #492]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e01d      	b.n	8001e44 <HAL_RCC_OscConfig+0xcc>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e10:	d10c      	bne.n	8001e2c <HAL_RCC_OscConfig+0xb4>
 8001e12:	4b76      	ldr	r3, [pc, #472]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a75      	ldr	r2, [pc, #468]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001e18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	4b73      	ldr	r3, [pc, #460]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a72      	ldr	r2, [pc, #456]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e28:	6013      	str	r3, [r2, #0]
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCC_OscConfig+0xcc>
 8001e2c:	4b6f      	ldr	r3, [pc, #444]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a6e      	ldr	r2, [pc, #440]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e36:	6013      	str	r3, [r2, #0]
 8001e38:	4b6c      	ldr	r3, [pc, #432]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a6b      	ldr	r2, [pc, #428]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001e3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d013      	beq.n	8001e74 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4c:	f7ff faee 	bl	800142c <HAL_GetTick>
 8001e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	e008      	b.n	8001e66 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e54:	f7ff faea 	bl	800142c <HAL_GetTick>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	2b64      	cmp	r3, #100	@ 0x64
 8001e60:	d901      	bls.n	8001e66 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e62:	2303      	movs	r3, #3
 8001e64:	e21f      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e66:	4b61      	ldr	r3, [pc, #388]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d0f0      	beq.n	8001e54 <HAL_RCC_OscConfig+0xdc>
 8001e72:	e014      	b.n	8001e9e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e74:	f7ff fada 	bl	800142c <HAL_GetTick>
 8001e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e7a:	e008      	b.n	8001e8e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e7c:	f7ff fad6 	bl	800142c <HAL_GetTick>
 8001e80:	4602      	mov	r2, r0
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	1ad3      	subs	r3, r2, r3
 8001e86:	2b64      	cmp	r3, #100	@ 0x64
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e20b      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e8e:	4b57      	ldr	r3, [pc, #348]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d1f0      	bne.n	8001e7c <HAL_RCC_OscConfig+0x104>
 8001e9a:	e000      	b.n	8001e9e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0302 	and.w	r3, r3, #2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d06f      	beq.n	8001f8a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001eaa:	4b50      	ldr	r3, [pc, #320]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d017      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001eb6:	4b4d      	ldr	r3, [pc, #308]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d105      	bne.n	8001ece <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ece:	4b47      	ldr	r3, [pc, #284]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001ed6:	2b0c      	cmp	r3, #12
 8001ed8:	d11c      	bne.n	8001f14 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eda:	4b44      	ldr	r3, [pc, #272]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001edc:	685b      	ldr	r3, [r3, #4]
 8001ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d116      	bne.n	8001f14 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ee6:	4b41      	ldr	r3, [pc, #260]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_RCC_OscConfig+0x186>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d001      	beq.n	8001efe <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e1d3      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	4b3b      	ldr	r3, [pc, #236]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4937      	ldr	r1, [pc, #220]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f12:	e03a      	b.n	8001f8a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d020      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f1c:	4b34      	ldr	r3, [pc, #208]	@ (8001ff0 <HAL_RCC_OscConfig+0x278>)
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7ff fa83 	bl	800142c <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f28:	e008      	b.n	8001f3c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fa7f 	bl	800142c <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d901      	bls.n	8001f3c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e1b4      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f3c:	4b2b      	ldr	r3, [pc, #172]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d0f0      	beq.n	8001f2a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b28      	ldr	r3, [pc, #160]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4925      	ldr	r1, [pc, #148]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]
 8001f5c:	e015      	b.n	8001f8a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f5e:	4b24      	ldr	r3, [pc, #144]	@ (8001ff0 <HAL_RCC_OscConfig+0x278>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f64:	f7ff fa62 	bl	800142c <HAL_GetTick>
 8001f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fa5e 	bl	800142c <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e193      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f7e:	4b1b      	ldr	r3, [pc, #108]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f0      	bne.n	8001f6c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d036      	beq.n	8002004 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d016      	beq.n	8001fcc <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f9e:	4b15      	ldr	r3, [pc, #84]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fa4:	f7ff fa42 	bl	800142c <HAL_GetTick>
 8001fa8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fac:	f7ff fa3e 	bl	800142c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e173      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fbe:	4b0b      	ldr	r3, [pc, #44]	@ (8001fec <HAL_RCC_OscConfig+0x274>)
 8001fc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x234>
 8001fca:	e01b      	b.n	8002004 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fcc:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <HAL_RCC_OscConfig+0x27c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd2:	f7ff fa2b 	bl	800142c <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd8:	e00e      	b.n	8001ff8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fda:	f7ff fa27 	bl	800142c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d907      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e15c      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	42470000 	.word	0x42470000
 8001ff4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ff8:	4b8a      	ldr	r3, [pc, #552]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 8001ffa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ffc:	f003 0302 	and.w	r3, r3, #2
 8002000:	2b00      	cmp	r3, #0
 8002002:	d1ea      	bne.n	8001fda <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	2b00      	cmp	r3, #0
 800200e:	f000 8097 	beq.w	8002140 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002016:	4b83      	ldr	r3, [pc, #524]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10f      	bne.n	8002042 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	4b7f      	ldr	r3, [pc, #508]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	4a7e      	ldr	r2, [pc, #504]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 800202c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002030:	6413      	str	r3, [r2, #64]	@ 0x40
 8002032:	4b7c      	ldr	r3, [pc, #496]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800203a:	60bb      	str	r3, [r7, #8]
 800203c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203e:	2301      	movs	r3, #1
 8002040:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002042:	4b79      	ldr	r3, [pc, #484]	@ (8002228 <HAL_RCC_OscConfig+0x4b0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800204a:	2b00      	cmp	r3, #0
 800204c:	d118      	bne.n	8002080 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800204e:	4b76      	ldr	r3, [pc, #472]	@ (8002228 <HAL_RCC_OscConfig+0x4b0>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a75      	ldr	r2, [pc, #468]	@ (8002228 <HAL_RCC_OscConfig+0x4b0>)
 8002054:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002058:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800205a:	f7ff f9e7 	bl	800142c <HAL_GetTick>
 800205e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002060:	e008      	b.n	8002074 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002062:	f7ff f9e3 	bl	800142c <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	2b02      	cmp	r3, #2
 800206e:	d901      	bls.n	8002074 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002070:	2303      	movs	r3, #3
 8002072:	e118      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002074:	4b6c      	ldr	r3, [pc, #432]	@ (8002228 <HAL_RCC_OscConfig+0x4b0>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	689b      	ldr	r3, [r3, #8]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d106      	bne.n	8002096 <HAL_RCC_OscConfig+0x31e>
 8002088:	4b66      	ldr	r3, [pc, #408]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 800208a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208c:	4a65      	ldr	r2, [pc, #404]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	6713      	str	r3, [r2, #112]	@ 0x70
 8002094:	e01c      	b.n	80020d0 <HAL_RCC_OscConfig+0x358>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	2b05      	cmp	r3, #5
 800209c:	d10c      	bne.n	80020b8 <HAL_RCC_OscConfig+0x340>
 800209e:	4b61      	ldr	r3, [pc, #388]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 80020a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a2:	4a60      	ldr	r2, [pc, #384]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 80020a4:	f043 0304 	orr.w	r3, r3, #4
 80020a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020aa:	4b5e      	ldr	r3, [pc, #376]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 80020ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ae:	4a5d      	ldr	r2, [pc, #372]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b6:	e00b      	b.n	80020d0 <HAL_RCC_OscConfig+0x358>
 80020b8:	4b5a      	ldr	r3, [pc, #360]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 80020ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020bc:	4a59      	ldr	r2, [pc, #356]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 80020be:	f023 0301 	bic.w	r3, r3, #1
 80020c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020c4:	4b57      	ldr	r3, [pc, #348]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 80020c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c8:	4a56      	ldr	r2, [pc, #344]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 80020ca:	f023 0304 	bic.w	r3, r3, #4
 80020ce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d015      	beq.n	8002104 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020d8:	f7ff f9a8 	bl	800142c <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020de:	e00a      	b.n	80020f6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020e0:	f7ff f9a4 	bl	800142c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e0d7      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f6:	4b4b      	ldr	r3, [pc, #300]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 80020f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0ee      	beq.n	80020e0 <HAL_RCC_OscConfig+0x368>
 8002102:	e014      	b.n	800212e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7ff f992 	bl	800142c <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7ff f98e 	bl	800142c <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	@ 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0c1      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002122:	4b40      	ldr	r3, [pc, #256]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 8002124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d1ee      	bne.n	800210c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800212e:	7dfb      	ldrb	r3, [r7, #23]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d105      	bne.n	8002140 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002134:	4b3b      	ldr	r3, [pc, #236]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002138:	4a3a      	ldr	r2, [pc, #232]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 800213a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800213e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2b00      	cmp	r3, #0
 8002146:	f000 80ad 	beq.w	80022a4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800214a:	4b36      	ldr	r3, [pc, #216]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	f003 030c 	and.w	r3, r3, #12
 8002152:	2b08      	cmp	r3, #8
 8002154:	d060      	beq.n	8002218 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	699b      	ldr	r3, [r3, #24]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d145      	bne.n	80021ea <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215e:	4b33      	ldr	r3, [pc, #204]	@ (800222c <HAL_RCC_OscConfig+0x4b4>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7ff f962 	bl	800142c <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800216a:	e008      	b.n	800217e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216c:	f7ff f95e 	bl	800142c <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e093      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800217e:	4b29      	ldr	r3, [pc, #164]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f0      	bne.n	800216c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69da      	ldr	r2, [r3, #28]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002198:	019b      	lsls	r3, r3, #6
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021a0:	085b      	lsrs	r3, r3, #1
 80021a2:	3b01      	subs	r3, #1
 80021a4:	041b      	lsls	r3, r3, #16
 80021a6:	431a      	orrs	r2, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ac:	061b      	lsls	r3, r3, #24
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b4:	071b      	lsls	r3, r3, #28
 80021b6:	491b      	ldr	r1, [pc, #108]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021bc:	4b1b      	ldr	r3, [pc, #108]	@ (800222c <HAL_RCC_OscConfig+0x4b4>)
 80021be:	2201      	movs	r2, #1
 80021c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021c2:	f7ff f933 	bl	800142c <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021c8:	e008      	b.n	80021dc <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ca:	f7ff f92f 	bl	800142c <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e064      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021dc:	4b11      	ldr	r3, [pc, #68]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d0f0      	beq.n	80021ca <HAL_RCC_OscConfig+0x452>
 80021e8:	e05c      	b.n	80022a4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ea:	4b10      	ldr	r3, [pc, #64]	@ (800222c <HAL_RCC_OscConfig+0x4b4>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f0:	f7ff f91c 	bl	800142c <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f8:	f7ff f918 	bl	800142c <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e04d      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800220a:	4b06      	ldr	r3, [pc, #24]	@ (8002224 <HAL_RCC_OscConfig+0x4ac>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x480>
 8002216:	e045      	b.n	80022a4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b01      	cmp	r3, #1
 800221e:	d107      	bne.n	8002230 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e040      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
 8002224:	40023800 	.word	0x40023800
 8002228:	40007000 	.word	0x40007000
 800222c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002230:	4b1f      	ldr	r3, [pc, #124]	@ (80022b0 <HAL_RCC_OscConfig+0x538>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d030      	beq.n	80022a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002248:	429a      	cmp	r2, r3
 800224a:	d129      	bne.n	80022a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d122      	bne.n	80022a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002260:	4013      	ands	r3, r2
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002266:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002268:	4293      	cmp	r3, r2
 800226a:	d119      	bne.n	80022a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002276:	085b      	lsrs	r3, r3, #1
 8002278:	3b01      	subs	r3, #1
 800227a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d10f      	bne.n	80022a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800228a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d107      	bne.n	80022a0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d001      	beq.n	80022a4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e000      	b.n	80022a6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3718      	adds	r7, #24
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800

080022b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d101      	bne.n	80022c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	e041      	b.n	800234a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d106      	bne.n	80022e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2200      	movs	r2, #0
 80022d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f839 	bl	8002352 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	3304      	adds	r3, #4
 80022f0:	4619      	mov	r1, r3
 80022f2:	4610      	mov	r0, r2
 80022f4:	f000 f9c0 	bl	8002678 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}

08002352 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002352:	b480      	push	{r7}
 8002354:	b083      	sub	sp, #12
 8002356:	af00      	add	r7, sp, #0
 8002358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002376:	b2db      	uxtb	r3, r3
 8002378:	2b01      	cmp	r3, #1
 800237a:	d001      	beq.n	8002380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e04e      	b.n	800241e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0201 	orr.w	r2, r2, #1
 8002396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a23      	ldr	r2, [pc, #140]	@ (800242c <HAL_TIM_Base_Start_IT+0xc4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d022      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x80>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023aa:	d01d      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x80>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a1f      	ldr	r2, [pc, #124]	@ (8002430 <HAL_TIM_Base_Start_IT+0xc8>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d018      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x80>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002434 <HAL_TIM_Base_Start_IT+0xcc>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d013      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x80>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a1c      	ldr	r2, [pc, #112]	@ (8002438 <HAL_TIM_Base_Start_IT+0xd0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d00e      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x80>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a1b      	ldr	r2, [pc, #108]	@ (800243c <HAL_TIM_Base_Start_IT+0xd4>)
 80023d0:	4293      	cmp	r3, r2
 80023d2:	d009      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x80>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a19      	ldr	r2, [pc, #100]	@ (8002440 <HAL_TIM_Base_Start_IT+0xd8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_TIM_Base_Start_IT+0x80>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a18      	ldr	r2, [pc, #96]	@ (8002444 <HAL_TIM_Base_Start_IT+0xdc>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d111      	bne.n	800240c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b06      	cmp	r3, #6
 80023f8:	d010      	beq.n	800241c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240a:	e007      	b.n	800241c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3714      	adds	r7, #20
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40010000 	.word	0x40010000
 8002430:	40000400 	.word	0x40000400
 8002434:	40000800 	.word	0x40000800
 8002438:	40000c00 	.word	0x40000c00
 800243c:	40010400 	.word	0x40010400
 8002440:	40014000 	.word	0x40014000
 8002444:	40001800 	.word	0x40001800

08002448 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d020      	beq.n	80024ac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01b      	beq.n	80024ac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f06f 0202 	mvn.w	r2, #2
 800247c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	699b      	ldr	r3, [r3, #24]
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d003      	beq.n	800249a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f000 f8d2 	bl	800263c <HAL_TIM_IC_CaptureCallback>
 8002498:	e005      	b.n	80024a6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f8c4 	bl	8002628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f8d5 	bl	8002650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	f003 0304 	and.w	r3, r3, #4
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d020      	beq.n	80024f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01b      	beq.n	80024f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f06f 0204 	mvn.w	r2, #4
 80024c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2202      	movs	r2, #2
 80024ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d003      	beq.n	80024e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f8ac 	bl	800263c <HAL_TIM_IC_CaptureCallback>
 80024e4:	e005      	b.n	80024f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 f89e 	bl	8002628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f8af 	bl	8002650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2200      	movs	r2, #0
 80024f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d020      	beq.n	8002544 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f003 0308 	and.w	r3, r3, #8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d01b      	beq.n	8002544 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0208 	mvn.w	r2, #8
 8002514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2204      	movs	r2, #4
 800251a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	f003 0303 	and.w	r3, r3, #3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f886 	bl	800263c <HAL_TIM_IC_CaptureCallback>
 8002530:	e005      	b.n	800253e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f878 	bl	8002628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f889 	bl	8002650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	f003 0310 	and.w	r3, r3, #16
 800254a:	2b00      	cmp	r3, #0
 800254c:	d020      	beq.n	8002590 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d01b      	beq.n	8002590 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f06f 0210 	mvn.w	r2, #16
 8002560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2208      	movs	r2, #8
 8002566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f000 f860 	bl	800263c <HAL_TIM_IC_CaptureCallback>
 800257c:	e005      	b.n	800258a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f852 	bl	8002628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f863 	bl	8002650 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2200      	movs	r2, #0
 800258e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	d00c      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d007      	beq.n	80025b4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0201 	mvn.w	r2, #1
 80025ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f7fe fb78 	bl	8000ca4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d00c      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d007      	beq.n	80025d8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80025d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f900 	bl	80027d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00c      	beq.n	80025fc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d007      	beq.n	80025fc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80025f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f000 f834 	bl	8002664 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00c      	beq.n	8002620 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f06f 0220 	mvn.w	r2, #32
 8002618:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f8d2 	bl	80027c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002620:	bf00      	nop
 8002622:	3710      	adds	r7, #16
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002644:	bf00      	nop
 8002646:	370c      	adds	r7, #12
 8002648:	46bd      	mov	sp, r7
 800264a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264e:	4770      	bx	lr

08002650 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a43      	ldr	r2, [pc, #268]	@ (8002798 <TIM_Base_SetConfig+0x120>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d013      	beq.n	80026b8 <TIM_Base_SetConfig+0x40>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002696:	d00f      	beq.n	80026b8 <TIM_Base_SetConfig+0x40>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a40      	ldr	r2, [pc, #256]	@ (800279c <TIM_Base_SetConfig+0x124>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d00b      	beq.n	80026b8 <TIM_Base_SetConfig+0x40>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a3f      	ldr	r2, [pc, #252]	@ (80027a0 <TIM_Base_SetConfig+0x128>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d007      	beq.n	80026b8 <TIM_Base_SetConfig+0x40>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a3e      	ldr	r2, [pc, #248]	@ (80027a4 <TIM_Base_SetConfig+0x12c>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d003      	beq.n	80026b8 <TIM_Base_SetConfig+0x40>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a3d      	ldr	r2, [pc, #244]	@ (80027a8 <TIM_Base_SetConfig+0x130>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d108      	bne.n	80026ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	68fa      	ldr	r2, [r7, #12]
 80026c6:	4313      	orrs	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a32      	ldr	r2, [pc, #200]	@ (8002798 <TIM_Base_SetConfig+0x120>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d02b      	beq.n	800272a <TIM_Base_SetConfig+0xb2>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026d8:	d027      	beq.n	800272a <TIM_Base_SetConfig+0xb2>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a2f      	ldr	r2, [pc, #188]	@ (800279c <TIM_Base_SetConfig+0x124>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d023      	beq.n	800272a <TIM_Base_SetConfig+0xb2>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a2e      	ldr	r2, [pc, #184]	@ (80027a0 <TIM_Base_SetConfig+0x128>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01f      	beq.n	800272a <TIM_Base_SetConfig+0xb2>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a2d      	ldr	r2, [pc, #180]	@ (80027a4 <TIM_Base_SetConfig+0x12c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d01b      	beq.n	800272a <TIM_Base_SetConfig+0xb2>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	4a2c      	ldr	r2, [pc, #176]	@ (80027a8 <TIM_Base_SetConfig+0x130>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d017      	beq.n	800272a <TIM_Base_SetConfig+0xb2>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a2b      	ldr	r2, [pc, #172]	@ (80027ac <TIM_Base_SetConfig+0x134>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d013      	beq.n	800272a <TIM_Base_SetConfig+0xb2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a2a      	ldr	r2, [pc, #168]	@ (80027b0 <TIM_Base_SetConfig+0x138>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d00f      	beq.n	800272a <TIM_Base_SetConfig+0xb2>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a29      	ldr	r2, [pc, #164]	@ (80027b4 <TIM_Base_SetConfig+0x13c>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00b      	beq.n	800272a <TIM_Base_SetConfig+0xb2>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	4a28      	ldr	r2, [pc, #160]	@ (80027b8 <TIM_Base_SetConfig+0x140>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d007      	beq.n	800272a <TIM_Base_SetConfig+0xb2>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a27      	ldr	r2, [pc, #156]	@ (80027bc <TIM_Base_SetConfig+0x144>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d003      	beq.n	800272a <TIM_Base_SetConfig+0xb2>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a26      	ldr	r2, [pc, #152]	@ (80027c0 <TIM_Base_SetConfig+0x148>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d108      	bne.n	800273c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002730:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	4313      	orrs	r3, r2
 800273a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	689a      	ldr	r2, [r3, #8]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a0e      	ldr	r2, [pc, #56]	@ (8002798 <TIM_Base_SetConfig+0x120>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d003      	beq.n	800276a <TIM_Base_SetConfig+0xf2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a10      	ldr	r2, [pc, #64]	@ (80027a8 <TIM_Base_SetConfig+0x130>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d103      	bne.n	8002772 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	691a      	ldr	r2, [r3, #16]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f043 0204 	orr.w	r2, r3, #4
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2201      	movs	r2, #1
 8002782:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	601a      	str	r2, [r3, #0]
}
 800278a:	bf00      	nop
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40010000 	.word	0x40010000
 800279c:	40000400 	.word	0x40000400
 80027a0:	40000800 	.word	0x40000800
 80027a4:	40000c00 	.word	0x40000c00
 80027a8:	40010400 	.word	0x40010400
 80027ac:	40014000 	.word	0x40014000
 80027b0:	40014400 	.word	0x40014400
 80027b4:	40014800 	.word	0x40014800
 80027b8:	40001800 	.word	0x40001800
 80027bc:	40001c00 	.word	0x40001c00
 80027c0:	40002000 	.word	0x40002000

080027c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80027cc:	bf00      	nop
 80027ce:	370c      	adds	r7, #12
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr

080027d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <__NVIC_SetPriority>:
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	6039      	str	r1, [r7, #0]
 80027f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	db0a      	blt.n	8002816 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	490c      	ldr	r1, [pc, #48]	@ (8002838 <__NVIC_SetPriority+0x4c>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	0112      	lsls	r2, r2, #4
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	440b      	add	r3, r1
 8002810:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002814:	e00a      	b.n	800282c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4908      	ldr	r1, [pc, #32]	@ (800283c <__NVIC_SetPriority+0x50>)
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	3b04      	subs	r3, #4
 8002824:	0112      	lsls	r2, r2, #4
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	440b      	add	r3, r1
 800282a:	761a      	strb	r2, [r3, #24]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000e100 	.word	0xe000e100
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002844:	4b05      	ldr	r3, [pc, #20]	@ (800285c <SysTick_Handler+0x1c>)
 8002846:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8002848:	f001 fdc6 	bl	80043d8 <xTaskGetSchedulerState>
 800284c:	4603      	mov	r3, r0
 800284e:	2b01      	cmp	r3, #1
 8002850:	d001      	beq.n	8002856 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8002852:	f002 fbc1 	bl	8004fd8 <xPortSysTickHandler>
  }
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	e000e010 	.word	0xe000e010

08002860 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8002864:	2100      	movs	r1, #0
 8002866:	f06f 0004 	mvn.w	r0, #4
 800286a:	f7ff ffbf 	bl	80027ec <__NVIC_SetPriority>
#endif
}
 800286e:	bf00      	nop
 8002870:	bd80      	pop	{r7, pc}
	...

08002874 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800287a:	f3ef 8305 	mrs	r3, IPSR
 800287e:	603b      	str	r3, [r7, #0]
  return(result);
 8002880:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8002886:	f06f 0305 	mvn.w	r3, #5
 800288a:	607b      	str	r3, [r7, #4]
 800288c:	e00c      	b.n	80028a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800288e:	4b0a      	ldr	r3, [pc, #40]	@ (80028b8 <osKernelInitialize+0x44>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d105      	bne.n	80028a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002896:	4b08      	ldr	r3, [pc, #32]	@ (80028b8 <osKernelInitialize+0x44>)
 8002898:	2201      	movs	r2, #1
 800289a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800289c:	2300      	movs	r3, #0
 800289e:	607b      	str	r3, [r7, #4]
 80028a0:	e002      	b.n	80028a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295
 80028a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028a8:	687b      	ldr	r3, [r7, #4]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000104 	.word	0x20000104

080028bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028c2:	f3ef 8305 	mrs	r3, IPSR
 80028c6:	603b      	str	r3, [r7, #0]
  return(result);
 80028c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80028ce:	f06f 0305 	mvn.w	r3, #5
 80028d2:	607b      	str	r3, [r7, #4]
 80028d4:	e010      	b.n	80028f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80028d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002904 <osKernelStart+0x48>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d109      	bne.n	80028f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80028de:	f7ff ffbf 	bl	8002860 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80028e2:	4b08      	ldr	r3, [pc, #32]	@ (8002904 <osKernelStart+0x48>)
 80028e4:	2202      	movs	r2, #2
 80028e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80028e8:	f001 f912 	bl	8003b10 <vTaskStartScheduler>
      stat = osOK;
 80028ec:	2300      	movs	r3, #0
 80028ee:	607b      	str	r3, [r7, #4]
 80028f0:	e002      	b.n	80028f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80028f2:	f04f 33ff 	mov.w	r3, #4294967295
 80028f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028f8:	687b      	ldr	r3, [r7, #4]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000104 	.word	0x20000104

08002908 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b08e      	sub	sp, #56	@ 0x38
 800290c:	af04      	add	r7, sp, #16
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002918:	f3ef 8305 	mrs	r3, IPSR
 800291c:	617b      	str	r3, [r7, #20]
  return(result);
 800291e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002920:	2b00      	cmp	r3, #0
 8002922:	d17e      	bne.n	8002a22 <osThreadNew+0x11a>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d07b      	beq.n	8002a22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800292a:	2380      	movs	r3, #128	@ 0x80
 800292c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800292e:	2318      	movs	r3, #24
 8002930:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002932:	2300      	movs	r3, #0
 8002934:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8002936:	f04f 33ff 	mov.w	r3, #4294967295
 800293a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d045      	beq.n	80029ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <osThreadNew+0x48>
        name = attr->name;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d002      	beq.n	800295e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d008      	beq.n	8002976 <osThreadNew+0x6e>
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	2b38      	cmp	r3, #56	@ 0x38
 8002968:	d805      	bhi.n	8002976 <osThreadNew+0x6e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d001      	beq.n	800297a <osThreadNew+0x72>
        return (NULL);
 8002976:	2300      	movs	r3, #0
 8002978:	e054      	b.n	8002a24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	695b      	ldr	r3, [r3, #20]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	695b      	ldr	r3, [r3, #20]
 8002986:	089b      	lsrs	r3, r3, #2
 8002988:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00e      	beq.n	80029b0 <osThreadNew+0xa8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	2ba7      	cmp	r3, #167	@ 0xa7
 8002998:	d90a      	bls.n	80029b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d006      	beq.n	80029b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <osThreadNew+0xa8>
        mem = 1;
 80029aa:	2301      	movs	r3, #1
 80029ac:	61bb      	str	r3, [r7, #24]
 80029ae:	e010      	b.n	80029d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d10c      	bne.n	80029d2 <osThreadNew+0xca>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d108      	bne.n	80029d2 <osThreadNew+0xca>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d104      	bne.n	80029d2 <osThreadNew+0xca>
          mem = 0;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
 80029cc:	e001      	b.n	80029d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d110      	bne.n	80029fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80029e0:	9202      	str	r2, [sp, #8]
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	6a3a      	ldr	r2, [r7, #32]
 80029ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	f000 fe1a 	bl	8003628 <xTaskCreateStatic>
 80029f4:	4603      	mov	r3, r0
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	e013      	b.n	8002a22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d110      	bne.n	8002a22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	f107 0310 	add.w	r3, r7, #16
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f000 fe68 	bl	80036e8 <xTaskCreate>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d001      	beq.n	8002a22 <osThreadNew+0x11a>
            hTask = NULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a22:	693b      	ldr	r3, [r7, #16]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3728      	adds	r7, #40	@ 0x28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a34:	f3ef 8305 	mrs	r3, IPSR
 8002a38:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d003      	beq.n	8002a48 <osDelay+0x1c>
    stat = osErrorISR;
 8002a40:	f06f 0305 	mvn.w	r3, #5
 8002a44:	60fb      	str	r3, [r7, #12]
 8002a46:	e007      	b.n	8002a58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002a48:	2300      	movs	r3, #0
 8002a4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f001 f826 	bl	8003aa4 <vTaskDelay>
    }
  }

  return (stat);
 8002a58:	68fb      	ldr	r3, [r7, #12]
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3710      	adds	r7, #16
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
	...

08002a64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4a07      	ldr	r2, [pc, #28]	@ (8002a90 <vApplicationGetIdleTaskMemory+0x2c>)
 8002a74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	4a06      	ldr	r2, [pc, #24]	@ (8002a94 <vApplicationGetIdleTaskMemory+0x30>)
 8002a7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2280      	movs	r2, #128	@ 0x80
 8002a80:	601a      	str	r2, [r3, #0]
}
 8002a82:	bf00      	nop
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000108 	.word	0x20000108
 8002a94:	200001b0 	.word	0x200001b0

08002a98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4a07      	ldr	r2, [pc, #28]	@ (8002ac4 <vApplicationGetTimerTaskMemory+0x2c>)
 8002aa8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	4a06      	ldr	r2, [pc, #24]	@ (8002ac8 <vApplicationGetTimerTaskMemory+0x30>)
 8002aae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002ab6:	601a      	str	r2, [r3, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	3714      	adds	r7, #20
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	200003b0 	.word	0x200003b0
 8002ac8:	20000458 	.word	0x20000458

08002acc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f103 0208 	add.w	r2, r3, #8
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f103 0208 	add.w	r2, r3, #8
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	f103 0208 	add.w	r2, r3, #8
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2200      	movs	r2, #0
 8002b18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b26:	b480      	push	{r7}
 8002b28:	b085      	sub	sp, #20
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
 8002b2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	601a      	str	r2, [r3, #0]
}
 8002b62:	bf00      	nop
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b085      	sub	sp, #20
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
 8002b76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b84:	d103      	bne.n	8002b8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	e00c      	b.n	8002ba8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3308      	adds	r3, #8
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	e002      	b.n	8002b9c <vListInsert+0x2e>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	60fb      	str	r3, [r7, #12]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68ba      	ldr	r2, [r7, #8]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d2f6      	bcs.n	8002b96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	685a      	ldr	r2, [r3, #4]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	68fa      	ldr	r2, [r7, #12]
 8002bbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	601a      	str	r2, [r3, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002be0:	b480      	push	{r7}
 8002be2:	b085      	sub	sp, #20
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691b      	ldr	r3, [r3, #16]
 8002bec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	687a      	ldr	r2, [r7, #4]
 8002bf4:	6892      	ldr	r2, [r2, #8]
 8002bf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	6852      	ldr	r2, [r2, #4]
 8002c00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d103      	bne.n	8002c14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	1e5a      	subs	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d10b      	bne.n	8002c60 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002c5a:	bf00      	nop
 8002c5c:	bf00      	nop
 8002c5e:	e7fd      	b.n	8002c5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002c60:	f002 f92a 	bl	8004eb8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c6c:	68f9      	ldr	r1, [r7, #12]
 8002c6e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	441a      	add	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c90:	3b01      	subs	r3, #1
 8002c92:	68f9      	ldr	r1, [r7, #12]
 8002c94:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002c96:	fb01 f303 	mul.w	r3, r1, r3
 8002c9a:	441a      	add	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	22ff      	movs	r2, #255	@ 0xff
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	22ff      	movs	r2, #255	@ 0xff
 8002cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d114      	bne.n	8002ce0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01a      	beq.n	8002cf4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	3310      	adds	r3, #16
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 f9c2 	bl	800404c <xTaskRemoveFromEventList>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d012      	beq.n	8002cf4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002cce:	4b0d      	ldr	r3, [pc, #52]	@ (8002d04 <xQueueGenericReset+0xd0>)
 8002cd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cd4:	601a      	str	r2, [r3, #0]
 8002cd6:	f3bf 8f4f 	dsb	sy
 8002cda:	f3bf 8f6f 	isb	sy
 8002cde:	e009      	b.n	8002cf4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3310      	adds	r3, #16
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fef1 	bl	8002acc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3324      	adds	r3, #36	@ 0x24
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff feec 	bl	8002acc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002cf4:	f002 f912 	bl	8004f1c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002cf8:	2301      	movs	r3, #1
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	e000ed04 	.word	0xe000ed04

08002d08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08e      	sub	sp, #56	@ 0x38
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d10b      	bne.n	8002d34 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002d1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d20:	f383 8811 	msr	BASEPRI, r3
 8002d24:	f3bf 8f6f 	isb	sy
 8002d28:	f3bf 8f4f 	dsb	sy
 8002d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d2e:	bf00      	nop
 8002d30:	bf00      	nop
 8002d32:	e7fd      	b.n	8002d30 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d10b      	bne.n	8002d52 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	e7fd      	b.n	8002d4e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d002      	beq.n	8002d5e <xQueueGenericCreateStatic+0x56>
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <xQueueGenericCreateStatic+0x5a>
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <xQueueGenericCreateStatic+0x5c>
 8002d62:	2300      	movs	r3, #0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10b      	bne.n	8002d80 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002d68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d6c:	f383 8811 	msr	BASEPRI, r3
 8002d70:	f3bf 8f6f 	isb	sy
 8002d74:	f3bf 8f4f 	dsb	sy
 8002d78:	623b      	str	r3, [r7, #32]
}
 8002d7a:	bf00      	nop
 8002d7c:	bf00      	nop
 8002d7e:	e7fd      	b.n	8002d7c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d102      	bne.n	8002d8c <xQueueGenericCreateStatic+0x84>
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <xQueueGenericCreateStatic+0x88>
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e000      	b.n	8002d92 <xQueueGenericCreateStatic+0x8a>
 8002d90:	2300      	movs	r3, #0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10b      	bne.n	8002dae <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d9a:	f383 8811 	msr	BASEPRI, r3
 8002d9e:	f3bf 8f6f 	isb	sy
 8002da2:	f3bf 8f4f 	dsb	sy
 8002da6:	61fb      	str	r3, [r7, #28]
}
 8002da8:	bf00      	nop
 8002daa:	bf00      	nop
 8002dac:	e7fd      	b.n	8002daa <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002dae:	2350      	movs	r3, #80	@ 0x50
 8002db0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	2b50      	cmp	r3, #80	@ 0x50
 8002db6:	d00b      	beq.n	8002dd0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dbc:	f383 8811 	msr	BASEPRI, r3
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	f3bf 8f4f 	dsb	sy
 8002dc8:	61bb      	str	r3, [r7, #24]
}
 8002dca:	bf00      	nop
 8002dcc:	bf00      	nop
 8002dce:	e7fd      	b.n	8002dcc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002dd0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00d      	beq.n	8002df8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002de4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68b9      	ldr	r1, [r7, #8]
 8002df2:	68f8      	ldr	r0, [r7, #12]
 8002df4:	f000 f805 	bl	8002e02 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3730      	adds	r7, #48	@ 0x30
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bd80      	pop	{r7, pc}

08002e02 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e02:	b580      	push	{r7, lr}
 8002e04:	b084      	sub	sp, #16
 8002e06:	af00      	add	r7, sp, #0
 8002e08:	60f8      	str	r0, [r7, #12]
 8002e0a:	60b9      	str	r1, [r7, #8]
 8002e0c:	607a      	str	r2, [r7, #4]
 8002e0e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d103      	bne.n	8002e1e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	601a      	str	r2, [r3, #0]
 8002e1c:	e002      	b.n	8002e24 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	68ba      	ldr	r2, [r7, #8]
 8002e2e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e30:	2101      	movs	r1, #1
 8002e32:	69b8      	ldr	r0, [r7, #24]
 8002e34:	f7ff fefe 	bl	8002c34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}

08002e48 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08e      	sub	sp, #56	@ 0x38
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
 8002e54:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002e56:	2300      	movs	r3, #0
 8002e58:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002e5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d10b      	bne.n	8002e7c <xQueueGenericSend+0x34>
	__asm volatile
 8002e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
 8002e74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002e76:	bf00      	nop
 8002e78:	bf00      	nop
 8002e7a:	e7fd      	b.n	8002e78 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d103      	bne.n	8002e8a <xQueueGenericSend+0x42>
 8002e82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <xQueueGenericSend+0x46>
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e000      	b.n	8002e90 <xQueueGenericSend+0x48>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10b      	bne.n	8002eac <xQueueGenericSend+0x64>
	__asm volatile
 8002e94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e98:	f383 8811 	msr	BASEPRI, r3
 8002e9c:	f3bf 8f6f 	isb	sy
 8002ea0:	f3bf 8f4f 	dsb	sy
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ea6:	bf00      	nop
 8002ea8:	bf00      	nop
 8002eaa:	e7fd      	b.n	8002ea8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d103      	bne.n	8002eba <xQueueGenericSend+0x72>
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <xQueueGenericSend+0x76>
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e000      	b.n	8002ec0 <xQueueGenericSend+0x78>
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d10b      	bne.n	8002edc <xQueueGenericSend+0x94>
	__asm volatile
 8002ec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ec8:	f383 8811 	msr	BASEPRI, r3
 8002ecc:	f3bf 8f6f 	isb	sy
 8002ed0:	f3bf 8f4f 	dsb	sy
 8002ed4:	623b      	str	r3, [r7, #32]
}
 8002ed6:	bf00      	nop
 8002ed8:	bf00      	nop
 8002eda:	e7fd      	b.n	8002ed8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002edc:	f001 fa7c 	bl	80043d8 <xTaskGetSchedulerState>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d102      	bne.n	8002eec <xQueueGenericSend+0xa4>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <xQueueGenericSend+0xa8>
 8002eec:	2301      	movs	r3, #1
 8002eee:	e000      	b.n	8002ef2 <xQueueGenericSend+0xaa>
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10b      	bne.n	8002f0e <xQueueGenericSend+0xc6>
	__asm volatile
 8002ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002efa:	f383 8811 	msr	BASEPRI, r3
 8002efe:	f3bf 8f6f 	isb	sy
 8002f02:	f3bf 8f4f 	dsb	sy
 8002f06:	61fb      	str	r3, [r7, #28]
}
 8002f08:	bf00      	nop
 8002f0a:	bf00      	nop
 8002f0c:	e7fd      	b.n	8002f0a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f0e:	f001 ffd3 	bl	8004eb8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f14:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d302      	bcc.n	8002f24 <xQueueGenericSend+0xdc>
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d129      	bne.n	8002f78 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	68b9      	ldr	r1, [r7, #8]
 8002f28:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f2a:	f000 fa0f 	bl	800334c <prvCopyDataToQueue>
 8002f2e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d010      	beq.n	8002f5a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f3a:	3324      	adds	r3, #36	@ 0x24
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	f001 f885 	bl	800404c <xTaskRemoveFromEventList>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d013      	beq.n	8002f70 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f48:	4b3f      	ldr	r3, [pc, #252]	@ (8003048 <xQueueGenericSend+0x200>)
 8002f4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f4e:	601a      	str	r2, [r3, #0]
 8002f50:	f3bf 8f4f 	dsb	sy
 8002f54:	f3bf 8f6f 	isb	sy
 8002f58:	e00a      	b.n	8002f70 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d007      	beq.n	8002f70 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002f60:	4b39      	ldr	r3, [pc, #228]	@ (8003048 <xQueueGenericSend+0x200>)
 8002f62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	f3bf 8f4f 	dsb	sy
 8002f6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002f70:	f001 ffd4 	bl	8004f1c <vPortExitCritical>
				return pdPASS;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e063      	b.n	8003040 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d103      	bne.n	8002f86 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002f7e:	f001 ffcd 	bl	8004f1c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	e05c      	b.n	8003040 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d106      	bne.n	8002f9a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f8c:	f107 0314 	add.w	r3, r7, #20
 8002f90:	4618      	mov	r0, r3
 8002f92:	f001 f8bf 	bl	8004114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f96:	2301      	movs	r3, #1
 8002f98:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f9a:	f001 ffbf 	bl	8004f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f9e:	f000 fe27 	bl	8003bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002fa2:	f001 ff89 	bl	8004eb8 <vPortEnterCritical>
 8002fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002fac:	b25b      	sxtb	r3, r3
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb2:	d103      	bne.n	8002fbc <xQueueGenericSend+0x174>
 8002fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fbe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002fc2:	b25b      	sxtb	r3, r3
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d103      	bne.n	8002fd2 <xQueueGenericSend+0x18a>
 8002fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fd2:	f001 ffa3 	bl	8004f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002fd6:	1d3a      	adds	r2, r7, #4
 8002fd8:	f107 0314 	add.w	r3, r7, #20
 8002fdc:	4611      	mov	r1, r2
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f001 f8ae 	bl	8004140 <xTaskCheckForTimeOut>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d124      	bne.n	8003034 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002fea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002fec:	f000 faa6 	bl	800353c <prvIsQueueFull>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d018      	beq.n	8003028 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ff8:	3310      	adds	r3, #16
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4611      	mov	r1, r2
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 ffd2 	bl	8003fa8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003004:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003006:	f000 fa31 	bl	800346c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800300a:	f000 fdff 	bl	8003c0c <xTaskResumeAll>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	f47f af7c 	bne.w	8002f0e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003016:	4b0c      	ldr	r3, [pc, #48]	@ (8003048 <xQueueGenericSend+0x200>)
 8003018:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	e772      	b.n	8002f0e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003028:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800302a:	f000 fa1f 	bl	800346c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800302e:	f000 fded 	bl	8003c0c <xTaskResumeAll>
 8003032:	e76c      	b.n	8002f0e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003034:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003036:	f000 fa19 	bl	800346c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800303a:	f000 fde7 	bl	8003c0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800303e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003040:	4618      	mov	r0, r3
 8003042:	3738      	adds	r7, #56	@ 0x38
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}
 8003048:	e000ed04 	.word	0xe000ed04

0800304c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b090      	sub	sp, #64	@ 0x40
 8003050:	af00      	add	r7, sp, #0
 8003052:	60f8      	str	r0, [r7, #12]
 8003054:	60b9      	str	r1, [r7, #8]
 8003056:	607a      	str	r2, [r7, #4]
 8003058:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800305e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003060:	2b00      	cmp	r3, #0
 8003062:	d10b      	bne.n	800307c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003064:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003068:	f383 8811 	msr	BASEPRI, r3
 800306c:	f3bf 8f6f 	isb	sy
 8003070:	f3bf 8f4f 	dsb	sy
 8003074:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003076:	bf00      	nop
 8003078:	bf00      	nop
 800307a:	e7fd      	b.n	8003078 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <xQueueGenericSendFromISR+0x3e>
 8003082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003086:	2b00      	cmp	r3, #0
 8003088:	d101      	bne.n	800308e <xQueueGenericSendFromISR+0x42>
 800308a:	2301      	movs	r3, #1
 800308c:	e000      	b.n	8003090 <xQueueGenericSendFromISR+0x44>
 800308e:	2300      	movs	r3, #0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10b      	bne.n	80030ac <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	e7fd      	b.n	80030a8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d103      	bne.n	80030ba <xQueueGenericSendFromISR+0x6e>
 80030b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d101      	bne.n	80030be <xQueueGenericSendFromISR+0x72>
 80030ba:	2301      	movs	r3, #1
 80030bc:	e000      	b.n	80030c0 <xQueueGenericSendFromISR+0x74>
 80030be:	2300      	movs	r3, #0
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d10b      	bne.n	80030dc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	623b      	str	r3, [r7, #32]
}
 80030d6:	bf00      	nop
 80030d8:	bf00      	nop
 80030da:	e7fd      	b.n	80030d8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030dc:	f001 ffcc 	bl	8005078 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80030e0:	f3ef 8211 	mrs	r2, BASEPRI
 80030e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	61fa      	str	r2, [r7, #28]
 80030f6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80030f8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030fa:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003100:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003104:	429a      	cmp	r2, r3
 8003106:	d302      	bcc.n	800310e <xQueueGenericSendFromISR+0xc2>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d12f      	bne.n	800316e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800310e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003110:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003114:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800311a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800311c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003124:	f000 f912 	bl	800334c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003128:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800312c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003130:	d112      	bne.n	8003158 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003136:	2b00      	cmp	r3, #0
 8003138:	d016      	beq.n	8003168 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800313a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800313c:	3324      	adds	r3, #36	@ 0x24
 800313e:	4618      	mov	r0, r3
 8003140:	f000 ff84 	bl	800404c <xTaskRemoveFromEventList>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00e      	beq.n	8003168 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00b      	beq.n	8003168 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	601a      	str	r2, [r3, #0]
 8003156:	e007      	b.n	8003168 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003158:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800315c:	3301      	adds	r3, #1
 800315e:	b2db      	uxtb	r3, r3
 8003160:	b25a      	sxtb	r2, r3
 8003162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003168:	2301      	movs	r3, #1
 800316a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800316c:	e001      	b.n	8003172 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800316e:	2300      	movs	r3, #0
 8003170:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003172:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003174:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800317c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800317e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003180:	4618      	mov	r0, r3
 8003182:	3740      	adds	r7, #64	@ 0x40
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b08c      	sub	sp, #48	@ 0x30
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003194:	2300      	movs	r3, #0
 8003196:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800319c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10b      	bne.n	80031ba <xQueueReceive+0x32>
	__asm volatile
 80031a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031a6:	f383 8811 	msr	BASEPRI, r3
 80031aa:	f3bf 8f6f 	isb	sy
 80031ae:	f3bf 8f4f 	dsb	sy
 80031b2:	623b      	str	r3, [r7, #32]
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	e7fd      	b.n	80031b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d103      	bne.n	80031c8 <xQueueReceive+0x40>
 80031c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d101      	bne.n	80031cc <xQueueReceive+0x44>
 80031c8:	2301      	movs	r3, #1
 80031ca:	e000      	b.n	80031ce <xQueueReceive+0x46>
 80031cc:	2300      	movs	r3, #0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10b      	bne.n	80031ea <xQueueReceive+0x62>
	__asm volatile
 80031d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d6:	f383 8811 	msr	BASEPRI, r3
 80031da:	f3bf 8f6f 	isb	sy
 80031de:	f3bf 8f4f 	dsb	sy
 80031e2:	61fb      	str	r3, [r7, #28]
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	e7fd      	b.n	80031e6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80031ea:	f001 f8f5 	bl	80043d8 <xTaskGetSchedulerState>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d102      	bne.n	80031fa <xQueueReceive+0x72>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <xQueueReceive+0x76>
 80031fa:	2301      	movs	r3, #1
 80031fc:	e000      	b.n	8003200 <xQueueReceive+0x78>
 80031fe:	2300      	movs	r3, #0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10b      	bne.n	800321c <xQueueReceive+0x94>
	__asm volatile
 8003204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003208:	f383 8811 	msr	BASEPRI, r3
 800320c:	f3bf 8f6f 	isb	sy
 8003210:	f3bf 8f4f 	dsb	sy
 8003214:	61bb      	str	r3, [r7, #24]
}
 8003216:	bf00      	nop
 8003218:	bf00      	nop
 800321a:	e7fd      	b.n	8003218 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800321c:	f001 fe4c 	bl	8004eb8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003220:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003224:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01f      	beq.n	800326c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800322c:	68b9      	ldr	r1, [r7, #8]
 800322e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003230:	f000 f8f6 	bl	8003420 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003236:	1e5a      	subs	r2, r3, #1
 8003238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800323c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00f      	beq.n	8003264 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003246:	3310      	adds	r3, #16
 8003248:	4618      	mov	r0, r3
 800324a:	f000 feff 	bl	800404c <xTaskRemoveFromEventList>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003254:	4b3c      	ldr	r3, [pc, #240]	@ (8003348 <xQueueReceive+0x1c0>)
 8003256:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800325a:	601a      	str	r2, [r3, #0]
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003264:	f001 fe5a 	bl	8004f1c <vPortExitCritical>
				return pdPASS;
 8003268:	2301      	movs	r3, #1
 800326a:	e069      	b.n	8003340 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d103      	bne.n	800327a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003272:	f001 fe53 	bl	8004f1c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003276:	2300      	movs	r3, #0
 8003278:	e062      	b.n	8003340 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800327a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800327c:	2b00      	cmp	r3, #0
 800327e:	d106      	bne.n	800328e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003280:	f107 0310 	add.w	r3, r7, #16
 8003284:	4618      	mov	r0, r3
 8003286:	f000 ff45 	bl	8004114 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800328a:	2301      	movs	r3, #1
 800328c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800328e:	f001 fe45 	bl	8004f1c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003292:	f000 fcad 	bl	8003bf0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003296:	f001 fe0f 	bl	8004eb8 <vPortEnterCritical>
 800329a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032a0:	b25b      	sxtb	r3, r3
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d103      	bne.n	80032b0 <xQueueReceive+0x128>
 80032a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80032b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80032b6:	b25b      	sxtb	r3, r3
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d103      	bne.n	80032c6 <xQueueReceive+0x13e>
 80032be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032c0:	2200      	movs	r2, #0
 80032c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80032c6:	f001 fe29 	bl	8004f1c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80032ca:	1d3a      	adds	r2, r7, #4
 80032cc:	f107 0310 	add.w	r3, r7, #16
 80032d0:	4611      	mov	r1, r2
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 ff34 	bl	8004140 <xTaskCheckForTimeOut>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d123      	bne.n	8003326 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80032de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032e0:	f000 f916 	bl	8003510 <prvIsQueueEmpty>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d017      	beq.n	800331a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80032ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ec:	3324      	adds	r3, #36	@ 0x24
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	4611      	mov	r1, r2
 80032f2:	4618      	mov	r0, r3
 80032f4:	f000 fe58 	bl	8003fa8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80032f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80032fa:	f000 f8b7 	bl	800346c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80032fe:	f000 fc85 	bl	8003c0c <xTaskResumeAll>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d189      	bne.n	800321c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003308:	4b0f      	ldr	r3, [pc, #60]	@ (8003348 <xQueueReceive+0x1c0>)
 800330a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800330e:	601a      	str	r2, [r3, #0]
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	e780      	b.n	800321c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800331a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800331c:	f000 f8a6 	bl	800346c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003320:	f000 fc74 	bl	8003c0c <xTaskResumeAll>
 8003324:	e77a      	b.n	800321c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003326:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003328:	f000 f8a0 	bl	800346c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800332c:	f000 fc6e 	bl	8003c0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003330:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003332:	f000 f8ed 	bl	8003510 <prvIsQueueEmpty>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	f43f af6f 	beq.w	800321c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800333e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003340:	4618      	mov	r0, r3
 8003342:	3730      	adds	r7, #48	@ 0x30
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	e000ed04 	.word	0xe000ed04

0800334c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003358:	2300      	movs	r3, #0
 800335a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003360:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10d      	bne.n	8003386 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d14d      	bne.n	800340e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	4618      	mov	r0, r3
 8003378:	f001 f84c 	bl	8004414 <xTaskPriorityDisinherit>
 800337c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	609a      	str	r2, [r3, #8]
 8003384:	e043      	b.n	800340e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d119      	bne.n	80033c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6858      	ldr	r0, [r3, #4]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003394:	461a      	mov	r2, r3
 8003396:	68b9      	ldr	r1, [r7, #8]
 8003398:	f002 f930 	bl	80055fc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a4:	441a      	add	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d32b      	bcc.n	800340e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	e026      	b.n	800340e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	68d8      	ldr	r0, [r3, #12]
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c8:	461a      	mov	r2, r3
 80033ca:	68b9      	ldr	r1, [r7, #8]
 80033cc:	f002 f916 	bl	80055fc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033d8:	425b      	negs	r3, r3
 80033da:	441a      	add	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68da      	ldr	r2, [r3, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d207      	bcs.n	80033fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	689a      	ldr	r2, [r3, #8]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f4:	425b      	negs	r3, r3
 80033f6:	441a      	add	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d105      	bne.n	800340e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d002      	beq.n	800340e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	3b01      	subs	r3, #1
 800340c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1c5a      	adds	r2, r3, #1
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003416:	697b      	ldr	r3, [r7, #20]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d018      	beq.n	8003464 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343a:	441a      	add	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	429a      	cmp	r2, r3
 800344a:	d303      	bcc.n	8003454 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68d9      	ldr	r1, [r3, #12]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800345c:	461a      	mov	r2, r3
 800345e:	6838      	ldr	r0, [r7, #0]
 8003460:	f002 f8cc 	bl	80055fc <memcpy>
	}
}
 8003464:	bf00      	nop
 8003466:	3708      	adds	r7, #8
 8003468:	46bd      	mov	sp, r7
 800346a:	bd80      	pop	{r7, pc}

0800346c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003474:	f001 fd20 	bl	8004eb8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800347e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003480:	e011      	b.n	80034a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003486:	2b00      	cmp	r3, #0
 8003488:	d012      	beq.n	80034b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	3324      	adds	r3, #36	@ 0x24
 800348e:	4618      	mov	r0, r3
 8003490:	f000 fddc 	bl	800404c <xTaskRemoveFromEventList>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800349a:	f000 feb5 	bl	8004208 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800349e:	7bfb      	ldrb	r3, [r7, #15]
 80034a0:	3b01      	subs	r3, #1
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	dce9      	bgt.n	8003482 <prvUnlockQueue+0x16>
 80034ae:	e000      	b.n	80034b2 <prvUnlockQueue+0x46>
					break;
 80034b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	22ff      	movs	r2, #255	@ 0xff
 80034b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80034ba:	f001 fd2f 	bl	8004f1c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80034be:	f001 fcfb 	bl	8004eb8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034ca:	e011      	b.n	80034f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d012      	beq.n	80034fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3310      	adds	r3, #16
 80034d8:	4618      	mov	r0, r3
 80034da:	f000 fdb7 	bl	800404c <xTaskRemoveFromEventList>
 80034de:	4603      	mov	r3, r0
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d001      	beq.n	80034e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80034e4:	f000 fe90 	bl	8004208 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80034e8:	7bbb      	ldrb	r3, [r7, #14]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80034f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	dce9      	bgt.n	80034cc <prvUnlockQueue+0x60>
 80034f8:	e000      	b.n	80034fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80034fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	22ff      	movs	r2, #255	@ 0xff
 8003500:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003504:	f001 fd0a 	bl	8004f1c <vPortExitCritical>
}
 8003508:	bf00      	nop
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003518:	f001 fcce 	bl	8004eb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003520:	2b00      	cmp	r3, #0
 8003522:	d102      	bne.n	800352a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003524:	2301      	movs	r3, #1
 8003526:	60fb      	str	r3, [r7, #12]
 8003528:	e001      	b.n	800352e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800352a:	2300      	movs	r3, #0
 800352c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800352e:	f001 fcf5 	bl	8004f1c <vPortExitCritical>

	return xReturn;
 8003532:	68fb      	ldr	r3, [r7, #12]
}
 8003534:	4618      	mov	r0, r3
 8003536:	3710      	adds	r7, #16
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}

0800353c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003544:	f001 fcb8 	bl	8004eb8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003550:	429a      	cmp	r2, r3
 8003552:	d102      	bne.n	800355a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003554:	2301      	movs	r3, #1
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	e001      	b.n	800355e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800355a:	2300      	movs	r3, #0
 800355c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800355e:	f001 fcdd 	bl	8004f1c <vPortExitCritical>

	return xReturn;
 8003562:	68fb      	ldr	r3, [r7, #12]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800356c:	b480      	push	{r7}
 800356e:	b085      	sub	sp, #20
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
 8003574:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
 800357a:	e014      	b.n	80035a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800357c:	4a0f      	ldr	r2, [pc, #60]	@ (80035bc <vQueueAddToRegistry+0x50>)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10b      	bne.n	80035a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003588:	490c      	ldr	r1, [pc, #48]	@ (80035bc <vQueueAddToRegistry+0x50>)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003592:	4a0a      	ldr	r2, [pc, #40]	@ (80035bc <vQueueAddToRegistry+0x50>)
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800359e:	e006      	b.n	80035ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	3301      	adds	r3, #1
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2b07      	cmp	r3, #7
 80035aa:	d9e7      	bls.n	800357c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80035ac:	bf00      	nop
 80035ae:	bf00      	nop
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
 80035ba:	bf00      	nop
 80035bc:	20000858 	.word	0x20000858

080035c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	60f8      	str	r0, [r7, #12]
 80035c8:	60b9      	str	r1, [r7, #8]
 80035ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80035d0:	f001 fc72 	bl	8004eb8 <vPortEnterCritical>
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035da:	b25b      	sxtb	r3, r3
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d103      	bne.n	80035ea <vQueueWaitForMessageRestricted+0x2a>
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80035f0:	b25b      	sxtb	r3, r3
 80035f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035f6:	d103      	bne.n	8003600 <vQueueWaitForMessageRestricted+0x40>
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003600:	f001 fc8c 	bl	8004f1c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003608:	2b00      	cmp	r3, #0
 800360a:	d106      	bne.n	800361a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	3324      	adds	r3, #36	@ 0x24
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	68b9      	ldr	r1, [r7, #8]
 8003614:	4618      	mov	r0, r3
 8003616:	f000 fced 	bl	8003ff4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800361a:	6978      	ldr	r0, [r7, #20]
 800361c:	f7ff ff26 	bl	800346c <prvUnlockQueue>
	}
 8003620:	bf00      	nop
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003628:	b580      	push	{r7, lr}
 800362a:	b08e      	sub	sp, #56	@ 0x38
 800362c:	af04      	add	r7, sp, #16
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003636:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003638:	2b00      	cmp	r3, #0
 800363a:	d10b      	bne.n	8003654 <xTaskCreateStatic+0x2c>
	__asm volatile
 800363c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003640:	f383 8811 	msr	BASEPRI, r3
 8003644:	f3bf 8f6f 	isb	sy
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	623b      	str	r3, [r7, #32]
}
 800364e:	bf00      	nop
 8003650:	bf00      	nop
 8003652:	e7fd      	b.n	8003650 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10b      	bne.n	8003672 <xTaskCreateStatic+0x4a>
	__asm volatile
 800365a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800365e:	f383 8811 	msr	BASEPRI, r3
 8003662:	f3bf 8f6f 	isb	sy
 8003666:	f3bf 8f4f 	dsb	sy
 800366a:	61fb      	str	r3, [r7, #28]
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	e7fd      	b.n	800366e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003672:	23a8      	movs	r3, #168	@ 0xa8
 8003674:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	2ba8      	cmp	r3, #168	@ 0xa8
 800367a:	d00b      	beq.n	8003694 <xTaskCreateStatic+0x6c>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	61bb      	str	r3, [r7, #24]
}
 800368e:	bf00      	nop
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003694:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003698:	2b00      	cmp	r3, #0
 800369a:	d01e      	beq.n	80036da <xTaskCreateStatic+0xb2>
 800369c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01b      	beq.n	80036da <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036aa:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80036ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80036b4:	2300      	movs	r3, #0
 80036b6:	9303      	str	r3, [sp, #12]
 80036b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ba:	9302      	str	r3, [sp, #8]
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	9301      	str	r3, [sp, #4]
 80036c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f851 	bl	8003774 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036d4:	f000 f8f6 	bl	80038c4 <prvAddNewTaskToReadyList>
 80036d8:	e001      	b.n	80036de <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80036da:	2300      	movs	r3, #0
 80036dc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80036de:	697b      	ldr	r3, [r7, #20]
	}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3728      	adds	r7, #40	@ 0x28
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b08c      	sub	sp, #48	@ 0x30
 80036ec:	af04      	add	r7, sp, #16
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	4613      	mov	r3, r2
 80036f6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036f8:	88fb      	ldrh	r3, [r7, #6]
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 fcfd 	bl	80050fc <pvPortMalloc>
 8003702:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00e      	beq.n	8003728 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800370a:	20a8      	movs	r0, #168	@ 0xa8
 800370c:	f001 fcf6 	bl	80050fc <pvPortMalloc>
 8003710:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d003      	beq.n	8003720 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	631a      	str	r2, [r3, #48]	@ 0x30
 800371e:	e005      	b.n	800372c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003720:	6978      	ldr	r0, [r7, #20]
 8003722:	f001 fdb9 	bl	8005298 <vPortFree>
 8003726:	e001      	b.n	800372c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003728:	2300      	movs	r3, #0
 800372a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d017      	beq.n	8003762 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800373a:	88fa      	ldrh	r2, [r7, #6]
 800373c:	2300      	movs	r3, #0
 800373e:	9303      	str	r3, [sp, #12]
 8003740:	69fb      	ldr	r3, [r7, #28]
 8003742:	9302      	str	r3, [sp, #8]
 8003744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	68b9      	ldr	r1, [r7, #8]
 8003750:	68f8      	ldr	r0, [r7, #12]
 8003752:	f000 f80f 	bl	8003774 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003756:	69f8      	ldr	r0, [r7, #28]
 8003758:	f000 f8b4 	bl	80038c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800375c:	2301      	movs	r3, #1
 800375e:	61bb      	str	r3, [r7, #24]
 8003760:	e002      	b.n	8003768 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003762:	f04f 33ff 	mov.w	r3, #4294967295
 8003766:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003768:	69bb      	ldr	r3, [r7, #24]
	}
 800376a:	4618      	mov	r0, r3
 800376c:	3720      	adds	r7, #32
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	60f8      	str	r0, [r7, #12]
 800377c:	60b9      	str	r1, [r7, #8]
 800377e:	607a      	str	r2, [r7, #4]
 8003780:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003784:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	461a      	mov	r2, r3
 800378c:	21a5      	movs	r1, #165	@ 0xa5
 800378e:	f001 fea3 	bl	80054d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003794:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800379c:	3b01      	subs	r3, #1
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	f023 0307 	bic.w	r3, r3, #7
 80037aa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	f003 0307 	and.w	r3, r3, #7
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00b      	beq.n	80037ce <prvInitialiseNewTask+0x5a>
	__asm volatile
 80037b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037ba:	f383 8811 	msr	BASEPRI, r3
 80037be:	f3bf 8f6f 	isb	sy
 80037c2:	f3bf 8f4f 	dsb	sy
 80037c6:	617b      	str	r3, [r7, #20]
}
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop
 80037cc:	e7fd      	b.n	80037ca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d01f      	beq.n	8003814 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037d4:	2300      	movs	r3, #0
 80037d6:	61fb      	str	r3, [r7, #28]
 80037d8:	e012      	b.n	8003800 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	4413      	add	r3, r2
 80037e0:	7819      	ldrb	r1, [r3, #0]
 80037e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	3334      	adds	r3, #52	@ 0x34
 80037ea:	460a      	mov	r2, r1
 80037ec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	4413      	add	r3, r2
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d006      	beq.n	8003808 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	3301      	adds	r3, #1
 80037fe:	61fb      	str	r3, [r7, #28]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	2b0f      	cmp	r3, #15
 8003804:	d9e9      	bls.n	80037da <prvInitialiseNewTask+0x66>
 8003806:	e000      	b.n	800380a <prvInitialiseNewTask+0x96>
			{
				break;
 8003808:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800380a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800380c:	2200      	movs	r2, #0
 800380e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003812:	e003      	b.n	800381c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800381c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381e:	2b37      	cmp	r3, #55	@ 0x37
 8003820:	d901      	bls.n	8003826 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003822:	2337      	movs	r3, #55	@ 0x37
 8003824:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003826:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003828:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800382a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800382c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800382e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003830:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003834:	2200      	movs	r2, #0
 8003836:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383a:	3304      	adds	r3, #4
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff f965 	bl	8002b0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003844:	3318      	adds	r3, #24
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff f960 	bl	8002b0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800384c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003850:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003852:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003854:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800385c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003860:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003864:	2200      	movs	r2, #0
 8003866:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800386a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800386c:	2200      	movs	r2, #0
 800386e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003874:	3354      	adds	r3, #84	@ 0x54
 8003876:	224c      	movs	r2, #76	@ 0x4c
 8003878:	2100      	movs	r1, #0
 800387a:	4618      	mov	r0, r3
 800387c:	f001 fe2c 	bl	80054d8 <memset>
 8003880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003882:	4a0d      	ldr	r2, [pc, #52]	@ (80038b8 <prvInitialiseNewTask+0x144>)
 8003884:	659a      	str	r2, [r3, #88]	@ 0x58
 8003886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003888:	4a0c      	ldr	r2, [pc, #48]	@ (80038bc <prvInitialiseNewTask+0x148>)
 800388a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800388c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388e:	4a0c      	ldr	r2, [pc, #48]	@ (80038c0 <prvInitialiseNewTask+0x14c>)
 8003890:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	68f9      	ldr	r1, [r7, #12]
 8003896:	69b8      	ldr	r0, [r7, #24]
 8003898:	f001 f9da 	bl	8004c50 <pxPortInitialiseStack>
 800389c:	4602      	mov	r2, r0
 800389e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038ac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038ae:	bf00      	nop
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	20004aec 	.word	0x20004aec
 80038bc:	20004b54 	.word	0x20004b54
 80038c0:	20004bbc 	.word	0x20004bbc

080038c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038cc:	f001 faf4 	bl	8004eb8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038d0:	4b2d      	ldr	r3, [pc, #180]	@ (8003988 <prvAddNewTaskToReadyList+0xc4>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	3301      	adds	r3, #1
 80038d6:	4a2c      	ldr	r2, [pc, #176]	@ (8003988 <prvAddNewTaskToReadyList+0xc4>)
 80038d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038da:	4b2c      	ldr	r3, [pc, #176]	@ (800398c <prvAddNewTaskToReadyList+0xc8>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80038e2:	4a2a      	ldr	r2, [pc, #168]	@ (800398c <prvAddNewTaskToReadyList+0xc8>)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80038e8:	4b27      	ldr	r3, [pc, #156]	@ (8003988 <prvAddNewTaskToReadyList+0xc4>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d110      	bne.n	8003912 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80038f0:	f000 fcae 	bl	8004250 <prvInitialiseTaskLists>
 80038f4:	e00d      	b.n	8003912 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80038f6:	4b26      	ldr	r3, [pc, #152]	@ (8003990 <prvAddNewTaskToReadyList+0xcc>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80038fe:	4b23      	ldr	r3, [pc, #140]	@ (800398c <prvAddNewTaskToReadyList+0xc8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003908:	429a      	cmp	r2, r3
 800390a:	d802      	bhi.n	8003912 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800390c:	4a1f      	ldr	r2, [pc, #124]	@ (800398c <prvAddNewTaskToReadyList+0xc8>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003912:	4b20      	ldr	r3, [pc, #128]	@ (8003994 <prvAddNewTaskToReadyList+0xd0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	3301      	adds	r3, #1
 8003918:	4a1e      	ldr	r2, [pc, #120]	@ (8003994 <prvAddNewTaskToReadyList+0xd0>)
 800391a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800391c:	4b1d      	ldr	r3, [pc, #116]	@ (8003994 <prvAddNewTaskToReadyList+0xd0>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003928:	4b1b      	ldr	r3, [pc, #108]	@ (8003998 <prvAddNewTaskToReadyList+0xd4>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	429a      	cmp	r2, r3
 800392e:	d903      	bls.n	8003938 <prvAddNewTaskToReadyList+0x74>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003934:	4a18      	ldr	r2, [pc, #96]	@ (8003998 <prvAddNewTaskToReadyList+0xd4>)
 8003936:	6013      	str	r3, [r2, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800393c:	4613      	mov	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	4413      	add	r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4a15      	ldr	r2, [pc, #84]	@ (800399c <prvAddNewTaskToReadyList+0xd8>)
 8003946:	441a      	add	r2, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	3304      	adds	r3, #4
 800394c:	4619      	mov	r1, r3
 800394e:	4610      	mov	r0, r2
 8003950:	f7ff f8e9 	bl	8002b26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003954:	f001 fae2 	bl	8004f1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003958:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <prvAddNewTaskToReadyList+0xcc>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00e      	beq.n	800397e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003960:	4b0a      	ldr	r3, [pc, #40]	@ (800398c <prvAddNewTaskToReadyList+0xc8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396a:	429a      	cmp	r2, r3
 800396c:	d207      	bcs.n	800397e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800396e:	4b0c      	ldr	r3, [pc, #48]	@ (80039a0 <prvAddNewTaskToReadyList+0xdc>)
 8003970:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800397e:	bf00      	nop
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	20000d6c 	.word	0x20000d6c
 800398c:	20000898 	.word	0x20000898
 8003990:	20000d78 	.word	0x20000d78
 8003994:	20000d88 	.word	0x20000d88
 8003998:	20000d74 	.word	0x20000d74
 800399c:	2000089c 	.word	0x2000089c
 80039a0:	e000ed04 	.word	0xe000ed04

080039a4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08a      	sub	sp, #40	@ 0x28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80039ae:	2300      	movs	r3, #0
 80039b0:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10b      	bne.n	80039d0 <vTaskDelayUntil+0x2c>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039bc:	f383 8811 	msr	BASEPRI, r3
 80039c0:	f3bf 8f6f 	isb	sy
 80039c4:	f3bf 8f4f 	dsb	sy
 80039c8:	617b      	str	r3, [r7, #20]
}
 80039ca:	bf00      	nop
 80039cc:	bf00      	nop
 80039ce:	e7fd      	b.n	80039cc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10b      	bne.n	80039ee <vTaskDelayUntil+0x4a>
	__asm volatile
 80039d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039da:	f383 8811 	msr	BASEPRI, r3
 80039de:	f3bf 8f6f 	isb	sy
 80039e2:	f3bf 8f4f 	dsb	sy
 80039e6:	613b      	str	r3, [r7, #16]
}
 80039e8:	bf00      	nop
 80039ea:	bf00      	nop
 80039ec:	e7fd      	b.n	80039ea <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 80039ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003a98 <vTaskDelayUntil+0xf4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <vTaskDelayUntil+0x6a>
	__asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	60fb      	str	r3, [r7, #12]
}
 8003a08:	bf00      	nop
 8003a0a:	bf00      	nop
 8003a0c:	e7fd      	b.n	8003a0a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8003a0e:	f000 f8ef 	bl	8003bf0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8003a12:	4b22      	ldr	r3, [pc, #136]	@ (8003a9c <vTaskDelayUntil+0xf8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	683a      	ldr	r2, [r7, #0]
 8003a1e:	4413      	add	r3, r2
 8003a20:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	6a3a      	ldr	r2, [r7, #32]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d20b      	bcs.n	8003a44 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d211      	bcs.n	8003a5a <vTaskDelayUntil+0xb6>
 8003a36:	69fa      	ldr	r2, [r7, #28]
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d90d      	bls.n	8003a5a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a42:	e00a      	b.n	8003a5a <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	69fa      	ldr	r2, [r7, #28]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d303      	bcc.n	8003a56 <vTaskDelayUntil+0xb2>
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	6a3b      	ldr	r3, [r7, #32]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d901      	bls.n	8003a5a <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8003a56:	2301      	movs	r3, #1
 8003a58:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8003a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d006      	beq.n	8003a74 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	6a3b      	ldr	r3, [r7, #32]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f000 fd40 	bl	80044f4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8003a74:	f000 f8ca 	bl	8003c0c <xTaskResumeAll>
 8003a78:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d107      	bne.n	8003a90 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8003a80:	4b07      	ldr	r3, [pc, #28]	@ (8003aa0 <vTaskDelayUntil+0xfc>)
 8003a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a86:	601a      	str	r2, [r3, #0]
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a90:	bf00      	nop
 8003a92:	3728      	adds	r7, #40	@ 0x28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20000d94 	.word	0x20000d94
 8003a9c:	20000d70 	.word	0x20000d70
 8003aa0:	e000ed04 	.word	0xe000ed04

08003aa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b084      	sub	sp, #16
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d018      	beq.n	8003ae8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003ab6:	4b14      	ldr	r3, [pc, #80]	@ (8003b08 <vTaskDelay+0x64>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <vTaskDelay+0x32>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	60bb      	str	r3, [r7, #8]
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	e7fd      	b.n	8003ad2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003ad6:	f000 f88b 	bl	8003bf0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003ada:	2100      	movs	r1, #0
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fd09 	bl	80044f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003ae2:	f000 f893 	bl	8003c0c <xTaskResumeAll>
 8003ae6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d107      	bne.n	8003afe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003aee:	4b07      	ldr	r3, [pc, #28]	@ (8003b0c <vTaskDelay+0x68>)
 8003af0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003af4:	601a      	str	r2, [r3, #0]
 8003af6:	f3bf 8f4f 	dsb	sy
 8003afa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003afe:	bf00      	nop
 8003b00:	3710      	adds	r7, #16
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	20000d94 	.word	0x20000d94
 8003b0c:	e000ed04 	.word	0xe000ed04

08003b10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b08a      	sub	sp, #40	@ 0x28
 8003b14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b1e:	463a      	mov	r2, r7
 8003b20:	1d39      	adds	r1, r7, #4
 8003b22:	f107 0308 	add.w	r3, r7, #8
 8003b26:	4618      	mov	r0, r3
 8003b28:	f7fe ff9c 	bl	8002a64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b2c:	6839      	ldr	r1, [r7, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	9202      	str	r2, [sp, #8]
 8003b34:	9301      	str	r3, [sp, #4]
 8003b36:	2300      	movs	r3, #0
 8003b38:	9300      	str	r3, [sp, #0]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	460a      	mov	r2, r1
 8003b3e:	4924      	ldr	r1, [pc, #144]	@ (8003bd0 <vTaskStartScheduler+0xc0>)
 8003b40:	4824      	ldr	r0, [pc, #144]	@ (8003bd4 <vTaskStartScheduler+0xc4>)
 8003b42:	f7ff fd71 	bl	8003628 <xTaskCreateStatic>
 8003b46:	4603      	mov	r3, r0
 8003b48:	4a23      	ldr	r2, [pc, #140]	@ (8003bd8 <vTaskStartScheduler+0xc8>)
 8003b4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b4c:	4b22      	ldr	r3, [pc, #136]	@ (8003bd8 <vTaskStartScheduler+0xc8>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d002      	beq.n	8003b5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b54:	2301      	movs	r3, #1
 8003b56:	617b      	str	r3, [r7, #20]
 8003b58:	e001      	b.n	8003b5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d102      	bne.n	8003b6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003b64:	f000 fd1a 	bl	800459c <xTimerCreateTimerTask>
 8003b68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d11b      	bne.n	8003ba8 <vTaskStartScheduler+0x98>
	__asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	613b      	str	r3, [r7, #16]
}
 8003b82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003b84:	4b15      	ldr	r3, [pc, #84]	@ (8003bdc <vTaskStartScheduler+0xcc>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	3354      	adds	r3, #84	@ 0x54
 8003b8a:	4a15      	ldr	r2, [pc, #84]	@ (8003be0 <vTaskStartScheduler+0xd0>)
 8003b8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003b8e:	4b15      	ldr	r3, [pc, #84]	@ (8003be4 <vTaskStartScheduler+0xd4>)
 8003b90:	f04f 32ff 	mov.w	r2, #4294967295
 8003b94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003b96:	4b14      	ldr	r3, [pc, #80]	@ (8003be8 <vTaskStartScheduler+0xd8>)
 8003b98:	2201      	movs	r2, #1
 8003b9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003b9c:	4b13      	ldr	r3, [pc, #76]	@ (8003bec <vTaskStartScheduler+0xdc>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003ba2:	f001 f8e5 	bl	8004d70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ba6:	e00f      	b.n	8003bc8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bae:	d10b      	bne.n	8003bc8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8003bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bb4:	f383 8811 	msr	BASEPRI, r3
 8003bb8:	f3bf 8f6f 	isb	sy
 8003bbc:	f3bf 8f4f 	dsb	sy
 8003bc0:	60fb      	str	r3, [r7, #12]
}
 8003bc2:	bf00      	nop
 8003bc4:	bf00      	nop
 8003bc6:	e7fd      	b.n	8003bc4 <vTaskStartScheduler+0xb4>
}
 8003bc8:	bf00      	nop
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	08005a34 	.word	0x08005a34
 8003bd4:	08004221 	.word	0x08004221
 8003bd8:	20000d90 	.word	0x20000d90
 8003bdc:	20000898 	.word	0x20000898
 8003be0:	20000010 	.word	0x20000010
 8003be4:	20000d8c 	.word	0x20000d8c
 8003be8:	20000d78 	.word	0x20000d78
 8003bec:	20000d70 	.word	0x20000d70

08003bf0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003bf4:	4b04      	ldr	r3, [pc, #16]	@ (8003c08 <vTaskSuspendAll+0x18>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	4a03      	ldr	r2, [pc, #12]	@ (8003c08 <vTaskSuspendAll+0x18>)
 8003bfc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003bfe:	bf00      	nop
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr
 8003c08:	20000d94 	.word	0x20000d94

08003c0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c16:	2300      	movs	r3, #0
 8003c18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c1a:	4b42      	ldr	r3, [pc, #264]	@ (8003d24 <xTaskResumeAll+0x118>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <xTaskResumeAll+0x2e>
	__asm volatile
 8003c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c26:	f383 8811 	msr	BASEPRI, r3
 8003c2a:	f3bf 8f6f 	isb	sy
 8003c2e:	f3bf 8f4f 	dsb	sy
 8003c32:	603b      	str	r3, [r7, #0]
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	e7fd      	b.n	8003c36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c3a:	f001 f93d 	bl	8004eb8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c3e:	4b39      	ldr	r3, [pc, #228]	@ (8003d24 <xTaskResumeAll+0x118>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3b01      	subs	r3, #1
 8003c44:	4a37      	ldr	r2, [pc, #220]	@ (8003d24 <xTaskResumeAll+0x118>)
 8003c46:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c48:	4b36      	ldr	r3, [pc, #216]	@ (8003d24 <xTaskResumeAll+0x118>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d162      	bne.n	8003d16 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c50:	4b35      	ldr	r3, [pc, #212]	@ (8003d28 <xTaskResumeAll+0x11c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d05e      	beq.n	8003d16 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c58:	e02f      	b.n	8003cba <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c5a:	4b34      	ldr	r3, [pc, #208]	@ (8003d2c <xTaskResumeAll+0x120>)
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	3318      	adds	r3, #24
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe ffba 	bl	8002be0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3304      	adds	r3, #4
 8003c70:	4618      	mov	r0, r3
 8003c72:	f7fe ffb5 	bl	8002be0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003d30 <xTaskResumeAll+0x124>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d903      	bls.n	8003c8a <xTaskResumeAll+0x7e>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c86:	4a2a      	ldr	r2, [pc, #168]	@ (8003d30 <xTaskResumeAll+0x124>)
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c8e:	4613      	mov	r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	4a27      	ldr	r2, [pc, #156]	@ (8003d34 <xTaskResumeAll+0x128>)
 8003c98:	441a      	add	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3304      	adds	r3, #4
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	f7fe ff40 	bl	8002b26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003caa:	4b23      	ldr	r3, [pc, #140]	@ (8003d38 <xTaskResumeAll+0x12c>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d302      	bcc.n	8003cba <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003cb4:	4b21      	ldr	r3, [pc, #132]	@ (8003d3c <xTaskResumeAll+0x130>)
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cba:	4b1c      	ldr	r3, [pc, #112]	@ (8003d2c <xTaskResumeAll+0x120>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d1cb      	bne.n	8003c5a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d001      	beq.n	8003ccc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003cc8:	f000 fb66 	bl	8004398 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8003d40 <xTaskResumeAll+0x134>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d010      	beq.n	8003cfa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003cd8:	f000 f846 	bl	8003d68 <xTaskIncrementTick>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003ce2:	4b16      	ldr	r3, [pc, #88]	@ (8003d3c <xTaskResumeAll+0x130>)
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	3b01      	subs	r3, #1
 8003cec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d1f1      	bne.n	8003cd8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003cf4:	4b12      	ldr	r3, [pc, #72]	@ (8003d40 <xTaskResumeAll+0x134>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003cfa:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <xTaskResumeAll+0x130>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d02:	2301      	movs	r3, #1
 8003d04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d06:	4b0f      	ldr	r3, [pc, #60]	@ (8003d44 <xTaskResumeAll+0x138>)
 8003d08:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003d0c:	601a      	str	r2, [r3, #0]
 8003d0e:	f3bf 8f4f 	dsb	sy
 8003d12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d16:	f001 f901 	bl	8004f1c <vPortExitCritical>

	return xAlreadyYielded;
 8003d1a:	68bb      	ldr	r3, [r7, #8]
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3710      	adds	r7, #16
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000d94 	.word	0x20000d94
 8003d28:	20000d6c 	.word	0x20000d6c
 8003d2c:	20000d2c 	.word	0x20000d2c
 8003d30:	20000d74 	.word	0x20000d74
 8003d34:	2000089c 	.word	0x2000089c
 8003d38:	20000898 	.word	0x20000898
 8003d3c:	20000d80 	.word	0x20000d80
 8003d40:	20000d7c 	.word	0x20000d7c
 8003d44:	e000ed04 	.word	0xe000ed04

08003d48 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d4e:	4b05      	ldr	r3, [pc, #20]	@ (8003d64 <xTaskGetTickCount+0x1c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d54:	687b      	ldr	r3, [r7, #4]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr
 8003d62:	bf00      	nop
 8003d64:	20000d70 	.word	0x20000d70

08003d68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b086      	sub	sp, #24
 8003d6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d72:	4b4f      	ldr	r3, [pc, #316]	@ (8003eb0 <xTaskIncrementTick+0x148>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f040 8090 	bne.w	8003e9c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003d7c:	4b4d      	ldr	r3, [pc, #308]	@ (8003eb4 <xTaskIncrementTick+0x14c>)
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3301      	adds	r3, #1
 8003d82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003d84:	4a4b      	ldr	r2, [pc, #300]	@ (8003eb4 <xTaskIncrementTick+0x14c>)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d121      	bne.n	8003dd4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003d90:	4b49      	ldr	r3, [pc, #292]	@ (8003eb8 <xTaskIncrementTick+0x150>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d00b      	beq.n	8003db2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	603b      	str	r3, [r7, #0]
}
 8003dac:	bf00      	nop
 8003dae:	bf00      	nop
 8003db0:	e7fd      	b.n	8003dae <xTaskIncrementTick+0x46>
 8003db2:	4b41      	ldr	r3, [pc, #260]	@ (8003eb8 <xTaskIncrementTick+0x150>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	60fb      	str	r3, [r7, #12]
 8003db8:	4b40      	ldr	r3, [pc, #256]	@ (8003ebc <xTaskIncrementTick+0x154>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a3e      	ldr	r2, [pc, #248]	@ (8003eb8 <xTaskIncrementTick+0x150>)
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	4a3e      	ldr	r2, [pc, #248]	@ (8003ebc <xTaskIncrementTick+0x154>)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec0 <xTaskIncrementTick+0x158>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3301      	adds	r3, #1
 8003dcc:	4a3c      	ldr	r2, [pc, #240]	@ (8003ec0 <xTaskIncrementTick+0x158>)
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	f000 fae2 	bl	8004398 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8003ec4 <xTaskIncrementTick+0x15c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d349      	bcc.n	8003e72 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003dde:	4b36      	ldr	r3, [pc, #216]	@ (8003eb8 <xTaskIncrementTick+0x150>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d104      	bne.n	8003df2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003de8:	4b36      	ldr	r3, [pc, #216]	@ (8003ec4 <xTaskIncrementTick+0x15c>)
 8003dea:	f04f 32ff 	mov.w	r2, #4294967295
 8003dee:	601a      	str	r2, [r3, #0]
					break;
 8003df0:	e03f      	b.n	8003e72 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003df2:	4b31      	ldr	r3, [pc, #196]	@ (8003eb8 <xTaskIncrementTick+0x150>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e02:	693a      	ldr	r2, [r7, #16]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d203      	bcs.n	8003e12 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e0a:	4a2e      	ldr	r2, [pc, #184]	@ (8003ec4 <xTaskIncrementTick+0x15c>)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003e10:	e02f      	b.n	8003e72 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	3304      	adds	r3, #4
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fee2 	bl	8002be0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d004      	beq.n	8003e2e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	3318      	adds	r3, #24
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f7fe fed9 	bl	8002be0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e32:	4b25      	ldr	r3, [pc, #148]	@ (8003ec8 <xTaskIncrementTick+0x160>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d903      	bls.n	8003e42 <xTaskIncrementTick+0xda>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3e:	4a22      	ldr	r2, [pc, #136]	@ (8003ec8 <xTaskIncrementTick+0x160>)
 8003e40:	6013      	str	r3, [r2, #0]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e46:	4613      	mov	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4413      	add	r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8003ecc <xTaskIncrementTick+0x164>)
 8003e50:	441a      	add	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4619      	mov	r1, r3
 8003e58:	4610      	mov	r0, r2
 8003e5a:	f7fe fe64 	bl	8002b26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e62:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed0 <xTaskIncrementTick+0x168>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d3b8      	bcc.n	8003dde <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e70:	e7b5      	b.n	8003dde <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003e72:	4b17      	ldr	r3, [pc, #92]	@ (8003ed0 <xTaskIncrementTick+0x168>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e78:	4914      	ldr	r1, [pc, #80]	@ (8003ecc <xTaskIncrementTick+0x164>)
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d901      	bls.n	8003e8e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003e8e:	4b11      	ldr	r3, [pc, #68]	@ (8003ed4 <xTaskIncrementTick+0x16c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d007      	beq.n	8003ea6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003e96:	2301      	movs	r3, #1
 8003e98:	617b      	str	r3, [r7, #20]
 8003e9a:	e004      	b.n	8003ea6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ed8 <xTaskIncrementTick+0x170>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8003ed8 <xTaskIncrementTick+0x170>)
 8003ea4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003ea6:	697b      	ldr	r3, [r7, #20]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3718      	adds	r7, #24
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	20000d94 	.word	0x20000d94
 8003eb4:	20000d70 	.word	0x20000d70
 8003eb8:	20000d24 	.word	0x20000d24
 8003ebc:	20000d28 	.word	0x20000d28
 8003ec0:	20000d84 	.word	0x20000d84
 8003ec4:	20000d8c 	.word	0x20000d8c
 8003ec8:	20000d74 	.word	0x20000d74
 8003ecc:	2000089c 	.word	0x2000089c
 8003ed0:	20000898 	.word	0x20000898
 8003ed4:	20000d80 	.word	0x20000d80
 8003ed8:	20000d7c 	.word	0x20000d7c

08003edc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003edc:	b480      	push	{r7}
 8003ede:	b085      	sub	sp, #20
 8003ee0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003ee2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f90 <vTaskSwitchContext+0xb4>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003eea:	4b2a      	ldr	r3, [pc, #168]	@ (8003f94 <vTaskSwitchContext+0xb8>)
 8003eec:	2201      	movs	r2, #1
 8003eee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ef0:	e047      	b.n	8003f82 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8003ef2:	4b28      	ldr	r3, [pc, #160]	@ (8003f94 <vTaskSwitchContext+0xb8>)
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ef8:	4b27      	ldr	r3, [pc, #156]	@ (8003f98 <vTaskSwitchContext+0xbc>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]
 8003efe:	e011      	b.n	8003f24 <vTaskSwitchContext+0x48>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10b      	bne.n	8003f1e <vTaskSwitchContext+0x42>
	__asm volatile
 8003f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0a:	f383 8811 	msr	BASEPRI, r3
 8003f0e:	f3bf 8f6f 	isb	sy
 8003f12:	f3bf 8f4f 	dsb	sy
 8003f16:	607b      	str	r3, [r7, #4]
}
 8003f18:	bf00      	nop
 8003f1a:	bf00      	nop
 8003f1c:	e7fd      	b.n	8003f1a <vTaskSwitchContext+0x3e>
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	3b01      	subs	r3, #1
 8003f22:	60fb      	str	r3, [r7, #12]
 8003f24:	491d      	ldr	r1, [pc, #116]	@ (8003f9c <vTaskSwitchContext+0xc0>)
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	4413      	add	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d0e3      	beq.n	8003f00 <vTaskSwitchContext+0x24>
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4a16      	ldr	r2, [pc, #88]	@ (8003f9c <vTaskSwitchContext+0xc0>)
 8003f44:	4413      	add	r3, r2
 8003f46:	60bb      	str	r3, [r7, #8]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	685a      	ldr	r2, [r3, #4]
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	685a      	ldr	r2, [r3, #4]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	3308      	adds	r3, #8
 8003f5a:	429a      	cmp	r2, r3
 8003f5c:	d104      	bne.n	8003f68 <vTaskSwitchContext+0x8c>
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	605a      	str	r2, [r3, #4]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	4a0c      	ldr	r2, [pc, #48]	@ (8003fa0 <vTaskSwitchContext+0xc4>)
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4a09      	ldr	r2, [pc, #36]	@ (8003f98 <vTaskSwitchContext+0xbc>)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003f78:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <vTaskSwitchContext+0xc4>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3354      	adds	r3, #84	@ 0x54
 8003f7e:	4a09      	ldr	r2, [pc, #36]	@ (8003fa4 <vTaskSwitchContext+0xc8>)
 8003f80:	6013      	str	r3, [r2, #0]
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	20000d94 	.word	0x20000d94
 8003f94:	20000d80 	.word	0x20000d80
 8003f98:	20000d74 	.word	0x20000d74
 8003f9c:	2000089c 	.word	0x2000089c
 8003fa0:	20000898 	.word	0x20000898
 8003fa4:	20000010 	.word	0x20000010

08003fa8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10b      	bne.n	8003fd0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003fb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fbc:	f383 8811 	msr	BASEPRI, r3
 8003fc0:	f3bf 8f6f 	isb	sy
 8003fc4:	f3bf 8f4f 	dsb	sy
 8003fc8:	60fb      	str	r3, [r7, #12]
}
 8003fca:	bf00      	nop
 8003fcc:	bf00      	nop
 8003fce:	e7fd      	b.n	8003fcc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fd0:	4b07      	ldr	r3, [pc, #28]	@ (8003ff0 <vTaskPlaceOnEventList+0x48>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	3318      	adds	r3, #24
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7fe fdc8 	bl	8002b6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fde:	2101      	movs	r1, #1
 8003fe0:	6838      	ldr	r0, [r7, #0]
 8003fe2:	f000 fa87 	bl	80044f4 <prvAddCurrentTaskToDelayedList>
}
 8003fe6:	bf00      	nop
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	20000898 	.word	0x20000898

08003ff4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	60f8      	str	r0, [r7, #12]
 8003ffc:	60b9      	str	r1, [r7, #8]
 8003ffe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d10b      	bne.n	800401e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800400a:	f383 8811 	msr	BASEPRI, r3
 800400e:	f3bf 8f6f 	isb	sy
 8004012:	f3bf 8f4f 	dsb	sy
 8004016:	617b      	str	r3, [r7, #20]
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	e7fd      	b.n	800401a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800401e:	4b0a      	ldr	r3, [pc, #40]	@ (8004048 <vTaskPlaceOnEventListRestricted+0x54>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	3318      	adds	r3, #24
 8004024:	4619      	mov	r1, r3
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f7fe fd7d 	bl	8002b26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004032:	f04f 33ff 	mov.w	r3, #4294967295
 8004036:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004038:	6879      	ldr	r1, [r7, #4]
 800403a:	68b8      	ldr	r0, [r7, #8]
 800403c:	f000 fa5a 	bl	80044f4 <prvAddCurrentTaskToDelayedList>
	}
 8004040:	bf00      	nop
 8004042:	3718      	adds	r7, #24
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	20000898 	.word	0x20000898

0800404c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	68db      	ldr	r3, [r3, #12]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10b      	bne.n	800407a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004066:	f383 8811 	msr	BASEPRI, r3
 800406a:	f3bf 8f6f 	isb	sy
 800406e:	f3bf 8f4f 	dsb	sy
 8004072:	60fb      	str	r3, [r7, #12]
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	e7fd      	b.n	8004076 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	3318      	adds	r3, #24
 800407e:	4618      	mov	r0, r3
 8004080:	f7fe fdae 	bl	8002be0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004084:	4b1d      	ldr	r3, [pc, #116]	@ (80040fc <xTaskRemoveFromEventList+0xb0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d11d      	bne.n	80040c8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	3304      	adds	r3, #4
 8004090:	4618      	mov	r0, r3
 8004092:	f7fe fda5 	bl	8002be0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409a:	4b19      	ldr	r3, [pc, #100]	@ (8004100 <xTaskRemoveFromEventList+0xb4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d903      	bls.n	80040aa <xTaskRemoveFromEventList+0x5e>
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a6:	4a16      	ldr	r2, [pc, #88]	@ (8004100 <xTaskRemoveFromEventList+0xb4>)
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040ae:	4613      	mov	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	4413      	add	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4a13      	ldr	r2, [pc, #76]	@ (8004104 <xTaskRemoveFromEventList+0xb8>)
 80040b8:	441a      	add	r2, r3
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	3304      	adds	r3, #4
 80040be:	4619      	mov	r1, r3
 80040c0:	4610      	mov	r0, r2
 80040c2:	f7fe fd30 	bl	8002b26 <vListInsertEnd>
 80040c6:	e005      	b.n	80040d4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	3318      	adds	r3, #24
 80040cc:	4619      	mov	r1, r3
 80040ce:	480e      	ldr	r0, [pc, #56]	@ (8004108 <xTaskRemoveFromEventList+0xbc>)
 80040d0:	f7fe fd29 	bl	8002b26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040d8:	4b0c      	ldr	r3, [pc, #48]	@ (800410c <xTaskRemoveFromEventList+0xc0>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040de:	429a      	cmp	r2, r3
 80040e0:	d905      	bls.n	80040ee <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80040e2:	2301      	movs	r3, #1
 80040e4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80040e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004110 <xTaskRemoveFromEventList+0xc4>)
 80040e8:	2201      	movs	r2, #1
 80040ea:	601a      	str	r2, [r3, #0]
 80040ec:	e001      	b.n	80040f2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80040ee:	2300      	movs	r3, #0
 80040f0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80040f2:	697b      	ldr	r3, [r7, #20]
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3718      	adds	r7, #24
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	20000d94 	.word	0x20000d94
 8004100:	20000d74 	.word	0x20000d74
 8004104:	2000089c 	.word	0x2000089c
 8004108:	20000d2c 	.word	0x20000d2c
 800410c:	20000898 	.word	0x20000898
 8004110:	20000d80 	.word	0x20000d80

08004114 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800411c:	4b06      	ldr	r3, [pc, #24]	@ (8004138 <vTaskInternalSetTimeOutState+0x24>)
 800411e:	681a      	ldr	r2, [r3, #0]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004124:	4b05      	ldr	r3, [pc, #20]	@ (800413c <vTaskInternalSetTimeOutState+0x28>)
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	605a      	str	r2, [r3, #4]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	20000d84 	.word	0x20000d84
 800413c:	20000d70 	.word	0x20000d70

08004140 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b088      	sub	sp, #32
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
 8004148:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10b      	bne.n	8004168 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	613b      	str	r3, [r7, #16]
}
 8004162:	bf00      	nop
 8004164:	bf00      	nop
 8004166:	e7fd      	b.n	8004164 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10b      	bne.n	8004186 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	60fb      	str	r3, [r7, #12]
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	e7fd      	b.n	8004182 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004186:	f000 fe97 	bl	8004eb8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800418a:	4b1d      	ldr	r3, [pc, #116]	@ (8004200 <xTaskCheckForTimeOut+0xc0>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	1ad3      	subs	r3, r2, r3
 8004198:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d102      	bne.n	80041aa <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041a4:	2300      	movs	r3, #0
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	e023      	b.n	80041f2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b15      	ldr	r3, [pc, #84]	@ (8004204 <xTaskCheckForTimeOut+0xc4>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	429a      	cmp	r2, r3
 80041b4:	d007      	beq.n	80041c6 <xTaskCheckForTimeOut+0x86>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d302      	bcc.n	80041c6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041c0:	2301      	movs	r3, #1
 80041c2:	61fb      	str	r3, [r7, #28]
 80041c4:	e015      	b.n	80041f2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d20b      	bcs.n	80041e8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	1ad2      	subs	r2, r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7ff ff99 	bl	8004114 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80041e2:	2300      	movs	r3, #0
 80041e4:	61fb      	str	r3, [r7, #28]
 80041e6:	e004      	b.n	80041f2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2200      	movs	r2, #0
 80041ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80041ee:	2301      	movs	r3, #1
 80041f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80041f2:	f000 fe93 	bl	8004f1c <vPortExitCritical>

	return xReturn;
 80041f6:	69fb      	ldr	r3, [r7, #28]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000d70 	.word	0x20000d70
 8004204:	20000d84 	.word	0x20000d84

08004208 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800420c:	4b03      	ldr	r3, [pc, #12]	@ (800421c <vTaskMissedYield+0x14>)
 800420e:	2201      	movs	r2, #1
 8004210:	601a      	str	r2, [r3, #0]
}
 8004212:	bf00      	nop
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	20000d80 	.word	0x20000d80

08004220 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004228:	f000 f852 	bl	80042d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800422c:	4b06      	ldr	r3, [pc, #24]	@ (8004248 <prvIdleTask+0x28>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d9f9      	bls.n	8004228 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004234:	4b05      	ldr	r3, [pc, #20]	@ (800424c <prvIdleTask+0x2c>)
 8004236:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800423a:	601a      	str	r2, [r3, #0]
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004244:	e7f0      	b.n	8004228 <prvIdleTask+0x8>
 8004246:	bf00      	nop
 8004248:	2000089c 	.word	0x2000089c
 800424c:	e000ed04 	.word	0xe000ed04

08004250 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004256:	2300      	movs	r3, #0
 8004258:	607b      	str	r3, [r7, #4]
 800425a:	e00c      	b.n	8004276 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4a12      	ldr	r2, [pc, #72]	@ (80042b0 <prvInitialiseTaskLists+0x60>)
 8004268:	4413      	add	r3, r2
 800426a:	4618      	mov	r0, r3
 800426c:	f7fe fc2e 	bl	8002acc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	3301      	adds	r3, #1
 8004274:	607b      	str	r3, [r7, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2b37      	cmp	r3, #55	@ 0x37
 800427a:	d9ef      	bls.n	800425c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800427c:	480d      	ldr	r0, [pc, #52]	@ (80042b4 <prvInitialiseTaskLists+0x64>)
 800427e:	f7fe fc25 	bl	8002acc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004282:	480d      	ldr	r0, [pc, #52]	@ (80042b8 <prvInitialiseTaskLists+0x68>)
 8004284:	f7fe fc22 	bl	8002acc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004288:	480c      	ldr	r0, [pc, #48]	@ (80042bc <prvInitialiseTaskLists+0x6c>)
 800428a:	f7fe fc1f 	bl	8002acc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800428e:	480c      	ldr	r0, [pc, #48]	@ (80042c0 <prvInitialiseTaskLists+0x70>)
 8004290:	f7fe fc1c 	bl	8002acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004294:	480b      	ldr	r0, [pc, #44]	@ (80042c4 <prvInitialiseTaskLists+0x74>)
 8004296:	f7fe fc19 	bl	8002acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800429a:	4b0b      	ldr	r3, [pc, #44]	@ (80042c8 <prvInitialiseTaskLists+0x78>)
 800429c:	4a05      	ldr	r2, [pc, #20]	@ (80042b4 <prvInitialiseTaskLists+0x64>)
 800429e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042a0:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <prvInitialiseTaskLists+0x7c>)
 80042a2:	4a05      	ldr	r2, [pc, #20]	@ (80042b8 <prvInitialiseTaskLists+0x68>)
 80042a4:	601a      	str	r2, [r3, #0]
}
 80042a6:	bf00      	nop
 80042a8:	3708      	adds	r7, #8
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	2000089c 	.word	0x2000089c
 80042b4:	20000cfc 	.word	0x20000cfc
 80042b8:	20000d10 	.word	0x20000d10
 80042bc:	20000d2c 	.word	0x20000d2c
 80042c0:	20000d40 	.word	0x20000d40
 80042c4:	20000d58 	.word	0x20000d58
 80042c8:	20000d24 	.word	0x20000d24
 80042cc:	20000d28 	.word	0x20000d28

080042d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80042d6:	e019      	b.n	800430c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80042d8:	f000 fdee 	bl	8004eb8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042dc:	4b10      	ldr	r3, [pc, #64]	@ (8004320 <prvCheckTasksWaitingTermination+0x50>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	3304      	adds	r3, #4
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7fe fc79 	bl	8002be0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80042ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <prvCheckTasksWaitingTermination+0x54>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3b01      	subs	r3, #1
 80042f4:	4a0b      	ldr	r2, [pc, #44]	@ (8004324 <prvCheckTasksWaitingTermination+0x54>)
 80042f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80042f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004328 <prvCheckTasksWaitingTermination+0x58>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	3b01      	subs	r3, #1
 80042fe:	4a0a      	ldr	r2, [pc, #40]	@ (8004328 <prvCheckTasksWaitingTermination+0x58>)
 8004300:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004302:	f000 fe0b 	bl	8004f1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f000 f810 	bl	800432c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800430c:	4b06      	ldr	r3, [pc, #24]	@ (8004328 <prvCheckTasksWaitingTermination+0x58>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e1      	bne.n	80042d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004314:	bf00      	nop
 8004316:	bf00      	nop
 8004318:	3708      	adds	r7, #8
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	20000d40 	.word	0x20000d40
 8004324:	20000d6c 	.word	0x20000d6c
 8004328:	20000d54 	.word	0x20000d54

0800432c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3354      	adds	r3, #84	@ 0x54
 8004338:	4618      	mov	r0, r3
 800433a:	f001 f8d5 	bl	80054e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004344:	2b00      	cmp	r3, #0
 8004346:	d108      	bne.n	800435a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434c:	4618      	mov	r0, r3
 800434e:	f000 ffa3 	bl	8005298 <vPortFree>
				vPortFree( pxTCB );
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f000 ffa0 	bl	8005298 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004358:	e019      	b.n	800438e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004360:	2b01      	cmp	r3, #1
 8004362:	d103      	bne.n	800436c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 ff97 	bl	8005298 <vPortFree>
	}
 800436a:	e010      	b.n	800438e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8004372:	2b02      	cmp	r3, #2
 8004374:	d00b      	beq.n	800438e <prvDeleteTCB+0x62>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	60fb      	str	r3, [r7, #12]
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	e7fd      	b.n	800438a <prvDeleteTCB+0x5e>
	}
 800438e:	bf00      	nop
 8004390:	3710      	adds	r7, #16
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
	...

08004398 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800439e:	4b0c      	ldr	r3, [pc, #48]	@ (80043d0 <prvResetNextTaskUnblockTime+0x38>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d104      	bne.n	80043b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043a8:	4b0a      	ldr	r3, [pc, #40]	@ (80043d4 <prvResetNextTaskUnblockTime+0x3c>)
 80043aa:	f04f 32ff 	mov.w	r2, #4294967295
 80043ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043b0:	e008      	b.n	80043c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043b2:	4b07      	ldr	r3, [pc, #28]	@ (80043d0 <prvResetNextTaskUnblockTime+0x38>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	68db      	ldr	r3, [r3, #12]
 80043ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	4a04      	ldr	r2, [pc, #16]	@ (80043d4 <prvResetNextTaskUnblockTime+0x3c>)
 80043c2:	6013      	str	r3, [r2, #0]
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	20000d24 	.word	0x20000d24
 80043d4:	20000d8c 	.word	0x20000d8c

080043d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80043de:	4b0b      	ldr	r3, [pc, #44]	@ (800440c <xTaskGetSchedulerState+0x34>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d102      	bne.n	80043ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80043e6:	2301      	movs	r3, #1
 80043e8:	607b      	str	r3, [r7, #4]
 80043ea:	e008      	b.n	80043fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043ec:	4b08      	ldr	r3, [pc, #32]	@ (8004410 <xTaskGetSchedulerState+0x38>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d102      	bne.n	80043fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80043f4:	2302      	movs	r3, #2
 80043f6:	607b      	str	r3, [r7, #4]
 80043f8:	e001      	b.n	80043fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80043fa:	2300      	movs	r3, #0
 80043fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80043fe:	687b      	ldr	r3, [r7, #4]
	}
 8004400:	4618      	mov	r0, r3
 8004402:	370c      	adds	r7, #12
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr
 800440c:	20000d78 	.word	0x20000d78
 8004410:	20000d94 	.word	0x20000d94

08004414 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d058      	beq.n	80044dc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800442a:	4b2f      	ldr	r3, [pc, #188]	@ (80044e8 <xTaskPriorityDisinherit+0xd4>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	429a      	cmp	r2, r3
 8004432:	d00b      	beq.n	800444c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	60fb      	str	r3, [r7, #12]
}
 8004446:	bf00      	nop
 8004448:	bf00      	nop
 800444a:	e7fd      	b.n	8004448 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004454:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004458:	f383 8811 	msr	BASEPRI, r3
 800445c:	f3bf 8f6f 	isb	sy
 8004460:	f3bf 8f4f 	dsb	sy
 8004464:	60bb      	str	r3, [r7, #8]
}
 8004466:	bf00      	nop
 8004468:	bf00      	nop
 800446a:	e7fd      	b.n	8004468 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004470:	1e5a      	subs	r2, r3, #1
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800447e:	429a      	cmp	r2, r3
 8004480:	d02c      	beq.n	80044dc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004486:	2b00      	cmp	r3, #0
 8004488:	d128      	bne.n	80044dc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	3304      	adds	r3, #4
 800448e:	4618      	mov	r0, r3
 8004490:	f7fe fba6 	bl	8002be0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80044a4:	693b      	ldr	r3, [r7, #16]
 80044a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ac:	4b0f      	ldr	r3, [pc, #60]	@ (80044ec <xTaskPriorityDisinherit+0xd8>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	429a      	cmp	r2, r3
 80044b2:	d903      	bls.n	80044bc <xTaskPriorityDisinherit+0xa8>
 80044b4:	693b      	ldr	r3, [r7, #16]
 80044b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b8:	4a0c      	ldr	r2, [pc, #48]	@ (80044ec <xTaskPriorityDisinherit+0xd8>)
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c0:	4613      	mov	r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	4413      	add	r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	4a09      	ldr	r2, [pc, #36]	@ (80044f0 <xTaskPriorityDisinherit+0xdc>)
 80044ca:	441a      	add	r2, r3
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	3304      	adds	r3, #4
 80044d0:	4619      	mov	r1, r3
 80044d2:	4610      	mov	r0, r2
 80044d4:	f7fe fb27 	bl	8002b26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80044d8:	2301      	movs	r3, #1
 80044da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80044dc:	697b      	ldr	r3, [r7, #20]
	}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000898 	.word	0x20000898
 80044ec:	20000d74 	.word	0x20000d74
 80044f0:	2000089c 	.word	0x2000089c

080044f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80044fe:	4b21      	ldr	r3, [pc, #132]	@ (8004584 <prvAddCurrentTaskToDelayedList+0x90>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004504:	4b20      	ldr	r3, [pc, #128]	@ (8004588 <prvAddCurrentTaskToDelayedList+0x94>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3304      	adds	r3, #4
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe fb68 	bl	8002be0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004516:	d10a      	bne.n	800452e <prvAddCurrentTaskToDelayedList+0x3a>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d007      	beq.n	800452e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800451e:	4b1a      	ldr	r3, [pc, #104]	@ (8004588 <prvAddCurrentTaskToDelayedList+0x94>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3304      	adds	r3, #4
 8004524:	4619      	mov	r1, r3
 8004526:	4819      	ldr	r0, [pc, #100]	@ (800458c <prvAddCurrentTaskToDelayedList+0x98>)
 8004528:	f7fe fafd 	bl	8002b26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800452c:	e026      	b.n	800457c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4413      	add	r3, r2
 8004534:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004536:	4b14      	ldr	r3, [pc, #80]	@ (8004588 <prvAddCurrentTaskToDelayedList+0x94>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68ba      	ldr	r2, [r7, #8]
 800453c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800453e:	68ba      	ldr	r2, [r7, #8]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	429a      	cmp	r2, r3
 8004544:	d209      	bcs.n	800455a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004546:	4b12      	ldr	r3, [pc, #72]	@ (8004590 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	4b0f      	ldr	r3, [pc, #60]	@ (8004588 <prvAddCurrentTaskToDelayedList+0x94>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	3304      	adds	r3, #4
 8004550:	4619      	mov	r1, r3
 8004552:	4610      	mov	r0, r2
 8004554:	f7fe fb0b 	bl	8002b6e <vListInsert>
}
 8004558:	e010      	b.n	800457c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800455a:	4b0e      	ldr	r3, [pc, #56]	@ (8004594 <prvAddCurrentTaskToDelayedList+0xa0>)
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	4b0a      	ldr	r3, [pc, #40]	@ (8004588 <prvAddCurrentTaskToDelayedList+0x94>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3304      	adds	r3, #4
 8004564:	4619      	mov	r1, r3
 8004566:	4610      	mov	r0, r2
 8004568:	f7fe fb01 	bl	8002b6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800456c:	4b0a      	ldr	r3, [pc, #40]	@ (8004598 <prvAddCurrentTaskToDelayedList+0xa4>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	429a      	cmp	r2, r3
 8004574:	d202      	bcs.n	800457c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004576:	4a08      	ldr	r2, [pc, #32]	@ (8004598 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	6013      	str	r3, [r2, #0]
}
 800457c:	bf00      	nop
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	20000d70 	.word	0x20000d70
 8004588:	20000898 	.word	0x20000898
 800458c:	20000d58 	.word	0x20000d58
 8004590:	20000d28 	.word	0x20000d28
 8004594:	20000d24 	.word	0x20000d24
 8004598:	20000d8c 	.word	0x20000d8c

0800459c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b08a      	sub	sp, #40	@ 0x28
 80045a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80045a6:	f000 fb13 	bl	8004bd0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80045aa:	4b1d      	ldr	r3, [pc, #116]	@ (8004620 <xTimerCreateTimerTask+0x84>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d021      	beq.n	80045f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045b2:	2300      	movs	r3, #0
 80045b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045b6:	2300      	movs	r3, #0
 80045b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045ba:	1d3a      	adds	r2, r7, #4
 80045bc:	f107 0108 	add.w	r1, r7, #8
 80045c0:	f107 030c 	add.w	r3, r7, #12
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe fa67 	bl	8002a98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	9202      	str	r2, [sp, #8]
 80045d2:	9301      	str	r3, [sp, #4]
 80045d4:	2302      	movs	r3, #2
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	2300      	movs	r3, #0
 80045da:	460a      	mov	r2, r1
 80045dc:	4911      	ldr	r1, [pc, #68]	@ (8004624 <xTimerCreateTimerTask+0x88>)
 80045de:	4812      	ldr	r0, [pc, #72]	@ (8004628 <xTimerCreateTimerTask+0x8c>)
 80045e0:	f7ff f822 	bl	8003628 <xTaskCreateStatic>
 80045e4:	4603      	mov	r3, r0
 80045e6:	4a11      	ldr	r2, [pc, #68]	@ (800462c <xTimerCreateTimerTask+0x90>)
 80045e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80045ea:	4b10      	ldr	r3, [pc, #64]	@ (800462c <xTimerCreateTimerTask+0x90>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d001      	beq.n	80045f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80045f2:	2301      	movs	r3, #1
 80045f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d10b      	bne.n	8004614 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	613b      	str	r3, [r7, #16]
}
 800460e:	bf00      	nop
 8004610:	bf00      	nop
 8004612:	e7fd      	b.n	8004610 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004614:	697b      	ldr	r3, [r7, #20]
}
 8004616:	4618      	mov	r0, r3
 8004618:	3718      	adds	r7, #24
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	20000dc8 	.word	0x20000dc8
 8004624:	08005a3c 	.word	0x08005a3c
 8004628:	08004769 	.word	0x08004769
 800462c:	20000dcc 	.word	0x20000dcc

08004630 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b08a      	sub	sp, #40	@ 0x28
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800463e:	2300      	movs	r3, #0
 8004640:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10b      	bne.n	8004660 <xTimerGenericCommand+0x30>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	623b      	str	r3, [r7, #32]
}
 800465a:	bf00      	nop
 800465c:	bf00      	nop
 800465e:	e7fd      	b.n	800465c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004660:	4b19      	ldr	r3, [pc, #100]	@ (80046c8 <xTimerGenericCommand+0x98>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d02a      	beq.n	80046be <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	2b05      	cmp	r3, #5
 8004678:	dc18      	bgt.n	80046ac <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800467a:	f7ff fead 	bl	80043d8 <xTaskGetSchedulerState>
 800467e:	4603      	mov	r3, r0
 8004680:	2b02      	cmp	r3, #2
 8004682:	d109      	bne.n	8004698 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004684:	4b10      	ldr	r3, [pc, #64]	@ (80046c8 <xTimerGenericCommand+0x98>)
 8004686:	6818      	ldr	r0, [r3, #0]
 8004688:	f107 0110 	add.w	r1, r7, #16
 800468c:	2300      	movs	r3, #0
 800468e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004690:	f7fe fbda 	bl	8002e48 <xQueueGenericSend>
 8004694:	6278      	str	r0, [r7, #36]	@ 0x24
 8004696:	e012      	b.n	80046be <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004698:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <xTimerGenericCommand+0x98>)
 800469a:	6818      	ldr	r0, [r3, #0]
 800469c:	f107 0110 	add.w	r1, r7, #16
 80046a0:	2300      	movs	r3, #0
 80046a2:	2200      	movs	r2, #0
 80046a4:	f7fe fbd0 	bl	8002e48 <xQueueGenericSend>
 80046a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80046aa:	e008      	b.n	80046be <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046ac:	4b06      	ldr	r3, [pc, #24]	@ (80046c8 <xTimerGenericCommand+0x98>)
 80046ae:	6818      	ldr	r0, [r3, #0]
 80046b0:	f107 0110 	add.w	r1, r7, #16
 80046b4:	2300      	movs	r3, #0
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	f7fe fcc8 	bl	800304c <xQueueGenericSendFromISR>
 80046bc:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3728      	adds	r7, #40	@ 0x28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	20000dc8 	.word	0x20000dc8

080046cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b088      	sub	sp, #32
 80046d0:	af02      	add	r7, sp, #8
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046d6:	4b23      	ldr	r3, [pc, #140]	@ (8004764 <prvProcessExpiredTimer+0x98>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	3304      	adds	r3, #4
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7fe fa7b 	bl	8002be0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d023      	beq.n	8004740 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	699a      	ldr	r2, [r3, #24]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	18d1      	adds	r1, r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	6978      	ldr	r0, [r7, #20]
 8004706:	f000 f8d5 	bl	80048b4 <prvInsertTimerInActiveList>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d020      	beq.n	8004752 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004710:	2300      	movs	r3, #0
 8004712:	9300      	str	r3, [sp, #0]
 8004714:	2300      	movs	r3, #0
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	2100      	movs	r1, #0
 800471a:	6978      	ldr	r0, [r7, #20]
 800471c:	f7ff ff88 	bl	8004630 <xTimerGenericCommand>
 8004720:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d114      	bne.n	8004752 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	60fb      	str	r3, [r7, #12]
}
 800473a:	bf00      	nop
 800473c:	bf00      	nop
 800473e:	e7fd      	b.n	800473c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004746:	f023 0301 	bic.w	r3, r3, #1
 800474a:	b2da      	uxtb	r2, r3
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	6978      	ldr	r0, [r7, #20]
 8004758:	4798      	blx	r3
}
 800475a:	bf00      	nop
 800475c:	3718      	adds	r7, #24
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	20000dc0 	.word	0x20000dc0

08004768 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004770:	f107 0308 	add.w	r3, r7, #8
 8004774:	4618      	mov	r0, r3
 8004776:	f000 f859 	bl	800482c <prvGetNextExpireTime>
 800477a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	4619      	mov	r1, r3
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f805 	bl	8004790 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004786:	f000 f8d7 	bl	8004938 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800478a:	bf00      	nop
 800478c:	e7f0      	b.n	8004770 <prvTimerTask+0x8>
	...

08004790 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800479a:	f7ff fa29 	bl	8003bf0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800479e:	f107 0308 	add.w	r3, r7, #8
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 f866 	bl	8004874 <prvSampleTimeNow>
 80047a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d130      	bne.n	8004812 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10a      	bne.n	80047cc <prvProcessTimerOrBlockTask+0x3c>
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d806      	bhi.n	80047cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047be:	f7ff fa25 	bl	8003c0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047c2:	68f9      	ldr	r1, [r7, #12]
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f7ff ff81 	bl	80046cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047ca:	e024      	b.n	8004816 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d008      	beq.n	80047e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047d2:	4b13      	ldr	r3, [pc, #76]	@ (8004820 <prvProcessTimerOrBlockTask+0x90>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <prvProcessTimerOrBlockTask+0x50>
 80047dc:	2301      	movs	r3, #1
 80047de:	e000      	b.n	80047e2 <prvProcessTimerOrBlockTask+0x52>
 80047e0:	2300      	movs	r3, #0
 80047e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047e4:	4b0f      	ldr	r3, [pc, #60]	@ (8004824 <prvProcessTimerOrBlockTask+0x94>)
 80047e6:	6818      	ldr	r0, [r3, #0]
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	4619      	mov	r1, r3
 80047f2:	f7fe fee5 	bl	80035c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80047f6:	f7ff fa09 	bl	8003c0c <xTaskResumeAll>
 80047fa:	4603      	mov	r3, r0
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10a      	bne.n	8004816 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004800:	4b09      	ldr	r3, [pc, #36]	@ (8004828 <prvProcessTimerOrBlockTask+0x98>)
 8004802:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	f3bf 8f4f 	dsb	sy
 800480c:	f3bf 8f6f 	isb	sy
}
 8004810:	e001      	b.n	8004816 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004812:	f7ff f9fb 	bl	8003c0c <xTaskResumeAll>
}
 8004816:	bf00      	nop
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20000dc4 	.word	0x20000dc4
 8004824:	20000dc8 	.word	0x20000dc8
 8004828:	e000ed04 	.word	0xe000ed04

0800482c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800482c:	b480      	push	{r7}
 800482e:	b085      	sub	sp, #20
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004834:	4b0e      	ldr	r3, [pc, #56]	@ (8004870 <prvGetNextExpireTime+0x44>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <prvGetNextExpireTime+0x16>
 800483e:	2201      	movs	r2, #1
 8004840:	e000      	b.n	8004844 <prvGetNextExpireTime+0x18>
 8004842:	2200      	movs	r2, #0
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004850:	4b07      	ldr	r3, [pc, #28]	@ (8004870 <prvGetNextExpireTime+0x44>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	e001      	b.n	8004860 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004860:	68fb      	ldr	r3, [r7, #12]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr
 800486e:	bf00      	nop
 8004870:	20000dc0 	.word	0x20000dc0

08004874 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800487c:	f7ff fa64 	bl	8003d48 <xTaskGetTickCount>
 8004880:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004882:	4b0b      	ldr	r3, [pc, #44]	@ (80048b0 <prvSampleTimeNow+0x3c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	429a      	cmp	r2, r3
 800488a:	d205      	bcs.n	8004898 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800488c:	f000 f93a 	bl	8004b04 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	601a      	str	r2, [r3, #0]
 8004896:	e002      	b.n	800489e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800489e:	4a04      	ldr	r2, [pc, #16]	@ (80048b0 <prvSampleTimeNow+0x3c>)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048a4:	68fb      	ldr	r3, [r7, #12]
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	3710      	adds	r7, #16
 80048aa:	46bd      	mov	sp, r7
 80048ac:	bd80      	pop	{r7, pc}
 80048ae:	bf00      	nop
 80048b0:	20000dd0 	.word	0x20000dd0

080048b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048c2:	2300      	movs	r3, #0
 80048c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048d2:	68ba      	ldr	r2, [r7, #8]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d812      	bhi.n	8004900 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	1ad2      	subs	r2, r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d302      	bcc.n	80048ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048e8:	2301      	movs	r3, #1
 80048ea:	617b      	str	r3, [r7, #20]
 80048ec:	e01b      	b.n	8004926 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048ee:	4b10      	ldr	r3, [pc, #64]	@ (8004930 <prvInsertTimerInActiveList+0x7c>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3304      	adds	r3, #4
 80048f6:	4619      	mov	r1, r3
 80048f8:	4610      	mov	r0, r2
 80048fa:	f7fe f938 	bl	8002b6e <vListInsert>
 80048fe:	e012      	b.n	8004926 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	429a      	cmp	r2, r3
 8004906:	d206      	bcs.n	8004916 <prvInsertTimerInActiveList+0x62>
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	429a      	cmp	r2, r3
 800490e:	d302      	bcc.n	8004916 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004910:	2301      	movs	r3, #1
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	e007      	b.n	8004926 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004916:	4b07      	ldr	r3, [pc, #28]	@ (8004934 <prvInsertTimerInActiveList+0x80>)
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	3304      	adds	r3, #4
 800491e:	4619      	mov	r1, r3
 8004920:	4610      	mov	r0, r2
 8004922:	f7fe f924 	bl	8002b6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004926:	697b      	ldr	r3, [r7, #20]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20000dc4 	.word	0x20000dc4
 8004934:	20000dc0 	.word	0x20000dc0

08004938 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b08e      	sub	sp, #56	@ 0x38
 800493c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800493e:	e0ce      	b.n	8004ade <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	da19      	bge.n	800497a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004946:	1d3b      	adds	r3, r7, #4
 8004948:	3304      	adds	r3, #4
 800494a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800494c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8004952:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004956:	f383 8811 	msr	BASEPRI, r3
 800495a:	f3bf 8f6f 	isb	sy
 800495e:	f3bf 8f4f 	dsb	sy
 8004962:	61fb      	str	r3, [r7, #28]
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	e7fd      	b.n	8004966 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800496a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004970:	6850      	ldr	r0, [r2, #4]
 8004972:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004974:	6892      	ldr	r2, [r2, #8]
 8004976:	4611      	mov	r1, r2
 8004978:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	f2c0 80ae 	blt.w	8004ade <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d004      	beq.n	8004998 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800498e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004990:	3304      	adds	r3, #4
 8004992:	4618      	mov	r0, r3
 8004994:	f7fe f924 	bl	8002be0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004998:	463b      	mov	r3, r7
 800499a:	4618      	mov	r0, r3
 800499c:	f7ff ff6a 	bl	8004874 <prvSampleTimeNow>
 80049a0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b09      	cmp	r3, #9
 80049a6:	f200 8097 	bhi.w	8004ad8 <prvProcessReceivedCommands+0x1a0>
 80049aa:	a201      	add	r2, pc, #4	@ (adr r2, 80049b0 <prvProcessReceivedCommands+0x78>)
 80049ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b0:	080049d9 	.word	0x080049d9
 80049b4:	080049d9 	.word	0x080049d9
 80049b8:	080049d9 	.word	0x080049d9
 80049bc:	08004a4f 	.word	0x08004a4f
 80049c0:	08004a63 	.word	0x08004a63
 80049c4:	08004aaf 	.word	0x08004aaf
 80049c8:	080049d9 	.word	0x080049d9
 80049cc:	080049d9 	.word	0x080049d9
 80049d0:	08004a4f 	.word	0x08004a4f
 80049d4:	08004a63 	.word	0x08004a63
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049da:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049de:	f043 0301 	orr.w	r3, r3, #1
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049e6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	18d1      	adds	r1, r2, r3
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049f8:	f7ff ff5c 	bl	80048b4 <prvInsertTimerInActiveList>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d06c      	beq.n	8004adc <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a04:	6a1b      	ldr	r3, [r3, #32]
 8004a06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a08:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d061      	beq.n	8004adc <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a18:	68ba      	ldr	r2, [r7, #8]
 8004a1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	441a      	add	r2, r3
 8004a20:	2300      	movs	r3, #0
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	2300      	movs	r3, #0
 8004a26:	2100      	movs	r1, #0
 8004a28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004a2a:	f7ff fe01 	bl	8004630 <xTimerGenericCommand>
 8004a2e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a30:	6a3b      	ldr	r3, [r7, #32]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d152      	bne.n	8004adc <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	61bb      	str	r3, [r7, #24]
}
 8004a48:	bf00      	nop
 8004a4a:	bf00      	nop
 8004a4c:	e7fd      	b.n	8004a4a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004a60:	e03d      	b.n	8004ade <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a68:	f043 0301 	orr.w	r3, r3, #1
 8004a6c:	b2da      	uxtb	r2, r3
 8004a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a78:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10b      	bne.n	8004a9a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8004a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a86:	f383 8811 	msr	BASEPRI, r3
 8004a8a:	f3bf 8f6f 	isb	sy
 8004a8e:	f3bf 8f4f 	dsb	sy
 8004a92:	617b      	str	r3, [r7, #20]
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	e7fd      	b.n	8004a96 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	18d1      	adds	r1, r2, r3
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aa6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004aa8:	f7ff ff04 	bl	80048b4 <prvInsertTimerInActiveList>
					break;
 8004aac:	e017      	b.n	8004ade <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d103      	bne.n	8004ac4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8004abc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004abe:	f000 fbeb 	bl	8005298 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004ac2:	e00c      	b.n	8004ade <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004aca:	f023 0301 	bic.w	r3, r3, #1
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ad2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004ad6:	e002      	b.n	8004ade <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8004ad8:	bf00      	nop
 8004ada:	e000      	b.n	8004ade <prvProcessReceivedCommands+0x1a6>
					break;
 8004adc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ade:	4b08      	ldr	r3, [pc, #32]	@ (8004b00 <prvProcessReceivedCommands+0x1c8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	1d39      	adds	r1, r7, #4
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe fb4e 	bl	8003188 <xQueueReceive>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f47f af26 	bne.w	8004940 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004af4:	bf00      	nop
 8004af6:	bf00      	nop
 8004af8:	3730      	adds	r7, #48	@ 0x30
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop
 8004b00:	20000dc8 	.word	0x20000dc8

08004b04 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b0a:	e049      	b.n	8004ba0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b0c:	4b2e      	ldr	r3, [pc, #184]	@ (8004bc8 <prvSwitchTimerLists+0xc4>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68db      	ldr	r3, [r3, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b16:	4b2c      	ldr	r3, [pc, #176]	@ (8004bc8 <prvSwitchTimerLists+0xc4>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3304      	adds	r3, #4
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7fe f85b 	bl	8002be0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a1b      	ldr	r3, [r3, #32]
 8004b2e:	68f8      	ldr	r0, [r7, #12]
 8004b30:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004b38:	f003 0304 	and.w	r3, r3, #4
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d02f      	beq.n	8004ba0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4413      	add	r3, r2
 8004b48:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	693b      	ldr	r3, [r7, #16]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d90e      	bls.n	8004b70 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	68ba      	ldr	r2, [r7, #8]
 8004b56:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8004bc8 <prvSwitchTimerLists+0xc4>)
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3304      	adds	r3, #4
 8004b66:	4619      	mov	r1, r3
 8004b68:	4610      	mov	r0, r2
 8004b6a:	f7fe f800 	bl	8002b6e <vListInsert>
 8004b6e:	e017      	b.n	8004ba0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b70:	2300      	movs	r3, #0
 8004b72:	9300      	str	r3, [sp, #0]
 8004b74:	2300      	movs	r3, #0
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	2100      	movs	r1, #0
 8004b7a:	68f8      	ldr	r0, [r7, #12]
 8004b7c:	f7ff fd58 	bl	8004630 <xTimerGenericCommand>
 8004b80:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10b      	bne.n	8004ba0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	603b      	str	r3, [r7, #0]
}
 8004b9a:	bf00      	nop
 8004b9c:	bf00      	nop
 8004b9e:	e7fd      	b.n	8004b9c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ba0:	4b09      	ldr	r3, [pc, #36]	@ (8004bc8 <prvSwitchTimerLists+0xc4>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d1b0      	bne.n	8004b0c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004baa:	4b07      	ldr	r3, [pc, #28]	@ (8004bc8 <prvSwitchTimerLists+0xc4>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004bb0:	4b06      	ldr	r3, [pc, #24]	@ (8004bcc <prvSwitchTimerLists+0xc8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a04      	ldr	r2, [pc, #16]	@ (8004bc8 <prvSwitchTimerLists+0xc4>)
 8004bb6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004bb8:	4a04      	ldr	r2, [pc, #16]	@ (8004bcc <prvSwitchTimerLists+0xc8>)
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	6013      	str	r3, [r2, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20000dc0 	.word	0x20000dc0
 8004bcc:	20000dc4 	.word	0x20000dc4

08004bd0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004bd6:	f000 f96f 	bl	8004eb8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004bda:	4b15      	ldr	r3, [pc, #84]	@ (8004c30 <prvCheckForValidListAndQueue+0x60>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d120      	bne.n	8004c24 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004be2:	4814      	ldr	r0, [pc, #80]	@ (8004c34 <prvCheckForValidListAndQueue+0x64>)
 8004be4:	f7fd ff72 	bl	8002acc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004be8:	4813      	ldr	r0, [pc, #76]	@ (8004c38 <prvCheckForValidListAndQueue+0x68>)
 8004bea:	f7fd ff6f 	bl	8002acc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004bee:	4b13      	ldr	r3, [pc, #76]	@ (8004c3c <prvCheckForValidListAndQueue+0x6c>)
 8004bf0:	4a10      	ldr	r2, [pc, #64]	@ (8004c34 <prvCheckForValidListAndQueue+0x64>)
 8004bf2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004bf4:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <prvCheckForValidListAndQueue+0x70>)
 8004bf6:	4a10      	ldr	r2, [pc, #64]	@ (8004c38 <prvCheckForValidListAndQueue+0x68>)
 8004bf8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	4b11      	ldr	r3, [pc, #68]	@ (8004c44 <prvCheckForValidListAndQueue+0x74>)
 8004c00:	4a11      	ldr	r2, [pc, #68]	@ (8004c48 <prvCheckForValidListAndQueue+0x78>)
 8004c02:	2110      	movs	r1, #16
 8004c04:	200a      	movs	r0, #10
 8004c06:	f7fe f87f 	bl	8002d08 <xQueueGenericCreateStatic>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	4a08      	ldr	r2, [pc, #32]	@ (8004c30 <prvCheckForValidListAndQueue+0x60>)
 8004c0e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004c10:	4b07      	ldr	r3, [pc, #28]	@ (8004c30 <prvCheckForValidListAndQueue+0x60>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d005      	beq.n	8004c24 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004c18:	4b05      	ldr	r3, [pc, #20]	@ (8004c30 <prvCheckForValidListAndQueue+0x60>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	490b      	ldr	r1, [pc, #44]	@ (8004c4c <prvCheckForValidListAndQueue+0x7c>)
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f7fe fca4 	bl	800356c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004c24:	f000 f97a 	bl	8004f1c <vPortExitCritical>
}
 8004c28:	bf00      	nop
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	20000dc8 	.word	0x20000dc8
 8004c34:	20000d98 	.word	0x20000d98
 8004c38:	20000dac 	.word	0x20000dac
 8004c3c:	20000dc0 	.word	0x20000dc0
 8004c40:	20000dc4 	.word	0x20000dc4
 8004c44:	20000e74 	.word	0x20000e74
 8004c48:	20000dd4 	.word	0x20000dd4
 8004c4c:	08005a44 	.word	0x08005a44

08004c50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3b04      	subs	r3, #4
 8004c60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004c68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	3b04      	subs	r3, #4
 8004c6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f023 0201 	bic.w	r2, r3, #1
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	3b04      	subs	r3, #4
 8004c7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c80:	4a0c      	ldr	r2, [pc, #48]	@ (8004cb4 <pxPortInitialiseStack+0x64>)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	3b14      	subs	r3, #20
 8004c8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c8c:	687a      	ldr	r2, [r7, #4]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	3b04      	subs	r3, #4
 8004c96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f06f 0202 	mvn.w	r2, #2
 8004c9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	3b20      	subs	r3, #32
 8004ca4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	08004cb9 	.word	0x08004cb9

08004cb8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004cc2:	4b13      	ldr	r3, [pc, #76]	@ (8004d10 <prvTaskExitError+0x58>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cca:	d00b      	beq.n	8004ce4 <prvTaskExitError+0x2c>
	__asm volatile
 8004ccc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cd0:	f383 8811 	msr	BASEPRI, r3
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	f3bf 8f4f 	dsb	sy
 8004cdc:	60fb      	str	r3, [r7, #12]
}
 8004cde:	bf00      	nop
 8004ce0:	bf00      	nop
 8004ce2:	e7fd      	b.n	8004ce0 <prvTaskExitError+0x28>
	__asm volatile
 8004ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce8:	f383 8811 	msr	BASEPRI, r3
 8004cec:	f3bf 8f6f 	isb	sy
 8004cf0:	f3bf 8f4f 	dsb	sy
 8004cf4:	60bb      	str	r3, [r7, #8]
}
 8004cf6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004cf8:	bf00      	nop
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0fc      	beq.n	8004cfa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	2000000c 	.word	0x2000000c
	...

08004d20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d20:	4b07      	ldr	r3, [pc, #28]	@ (8004d40 <pxCurrentTCBConst2>)
 8004d22:	6819      	ldr	r1, [r3, #0]
 8004d24:	6808      	ldr	r0, [r1, #0]
 8004d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d2a:	f380 8809 	msr	PSP, r0
 8004d2e:	f3bf 8f6f 	isb	sy
 8004d32:	f04f 0000 	mov.w	r0, #0
 8004d36:	f380 8811 	msr	BASEPRI, r0
 8004d3a:	4770      	bx	lr
 8004d3c:	f3af 8000 	nop.w

08004d40 <pxCurrentTCBConst2>:
 8004d40:	20000898 	.word	0x20000898
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d44:	bf00      	nop
 8004d46:	bf00      	nop

08004d48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004d48:	4808      	ldr	r0, [pc, #32]	@ (8004d6c <prvPortStartFirstTask+0x24>)
 8004d4a:	6800      	ldr	r0, [r0, #0]
 8004d4c:	6800      	ldr	r0, [r0, #0]
 8004d4e:	f380 8808 	msr	MSP, r0
 8004d52:	f04f 0000 	mov.w	r0, #0
 8004d56:	f380 8814 	msr	CONTROL, r0
 8004d5a:	b662      	cpsie	i
 8004d5c:	b661      	cpsie	f
 8004d5e:	f3bf 8f4f 	dsb	sy
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	df00      	svc	0
 8004d68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004d6a:	bf00      	nop
 8004d6c:	e000ed08 	.word	0xe000ed08

08004d70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004d76:	4b47      	ldr	r3, [pc, #284]	@ (8004e94 <xPortStartScheduler+0x124>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a47      	ldr	r2, [pc, #284]	@ (8004e98 <xPortStartScheduler+0x128>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d10b      	bne.n	8004d98 <xPortStartScheduler+0x28>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	60fb      	str	r3, [r7, #12]
}
 8004d92:	bf00      	nop
 8004d94:	bf00      	nop
 8004d96:	e7fd      	b.n	8004d94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d98:	4b3e      	ldr	r3, [pc, #248]	@ (8004e94 <xPortStartScheduler+0x124>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a3f      	ldr	r2, [pc, #252]	@ (8004e9c <xPortStartScheduler+0x12c>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d10b      	bne.n	8004dba <xPortStartScheduler+0x4a>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	613b      	str	r3, [r7, #16]
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	e7fd      	b.n	8004db6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004dba:	4b39      	ldr	r3, [pc, #228]	@ (8004ea0 <xPortStartScheduler+0x130>)
 8004dbc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	22ff      	movs	r2, #255	@ 0xff
 8004dca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	781b      	ldrb	r3, [r3, #0]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004dd4:	78fb      	ldrb	r3, [r7, #3]
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ddc:	b2da      	uxtb	r2, r3
 8004dde:	4b31      	ldr	r3, [pc, #196]	@ (8004ea4 <xPortStartScheduler+0x134>)
 8004de0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004de2:	4b31      	ldr	r3, [pc, #196]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004de4:	2207      	movs	r2, #7
 8004de6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004de8:	e009      	b.n	8004dfe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004dea:	4b2f      	ldr	r3, [pc, #188]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	3b01      	subs	r3, #1
 8004df0:	4a2d      	ldr	r2, [pc, #180]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004df2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	b2db      	uxtb	r3, r3
 8004df8:	005b      	lsls	r3, r3, #1
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e06:	2b80      	cmp	r3, #128	@ 0x80
 8004e08:	d0ef      	beq.n	8004dea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004e0a:	4b27      	ldr	r3, [pc, #156]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f1c3 0307 	rsb	r3, r3, #7
 8004e12:	2b04      	cmp	r3, #4
 8004e14:	d00b      	beq.n	8004e2e <xPortStartScheduler+0xbe>
	__asm volatile
 8004e16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1a:	f383 8811 	msr	BASEPRI, r3
 8004e1e:	f3bf 8f6f 	isb	sy
 8004e22:	f3bf 8f4f 	dsb	sy
 8004e26:	60bb      	str	r3, [r7, #8]
}
 8004e28:	bf00      	nop
 8004e2a:	bf00      	nop
 8004e2c:	e7fd      	b.n	8004e2a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004e2e:	4b1e      	ldr	r3, [pc, #120]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	021b      	lsls	r3, r3, #8
 8004e34:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e36:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004e38:	4b1b      	ldr	r3, [pc, #108]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004e40:	4a19      	ldr	r2, [pc, #100]	@ (8004ea8 <xPortStartScheduler+0x138>)
 8004e42:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	b2da      	uxtb	r2, r3
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004e4c:	4b17      	ldr	r3, [pc, #92]	@ (8004eac <xPortStartScheduler+0x13c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <xPortStartScheduler+0x13c>)
 8004e52:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004e56:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004e58:	4b14      	ldr	r3, [pc, #80]	@ (8004eac <xPortStartScheduler+0x13c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a13      	ldr	r2, [pc, #76]	@ (8004eac <xPortStartScheduler+0x13c>)
 8004e5e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004e62:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004e64:	f000 f8da 	bl	800501c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004e68:	4b11      	ldr	r3, [pc, #68]	@ (8004eb0 <xPortStartScheduler+0x140>)
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004e6e:	f000 f8f9 	bl	8005064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004e72:	4b10      	ldr	r3, [pc, #64]	@ (8004eb4 <xPortStartScheduler+0x144>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a0f      	ldr	r2, [pc, #60]	@ (8004eb4 <xPortStartScheduler+0x144>)
 8004e78:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004e7c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004e7e:	f7ff ff63 	bl	8004d48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004e82:	f7ff f82b 	bl	8003edc <vTaskSwitchContext>
	prvTaskExitError();
 8004e86:	f7ff ff17 	bl	8004cb8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3718      	adds	r7, #24
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	e000ed00 	.word	0xe000ed00
 8004e98:	410fc271 	.word	0x410fc271
 8004e9c:	410fc270 	.word	0x410fc270
 8004ea0:	e000e400 	.word	0xe000e400
 8004ea4:	20000ec4 	.word	0x20000ec4
 8004ea8:	20000ec8 	.word	0x20000ec8
 8004eac:	e000ed20 	.word	0xe000ed20
 8004eb0:	2000000c 	.word	0x2000000c
 8004eb4:	e000ef34 	.word	0xe000ef34

08004eb8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	607b      	str	r3, [r7, #4]
}
 8004ed0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ed2:	4b10      	ldr	r3, [pc, #64]	@ (8004f14 <vPortEnterCritical+0x5c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3301      	adds	r3, #1
 8004ed8:	4a0e      	ldr	r2, [pc, #56]	@ (8004f14 <vPortEnterCritical+0x5c>)
 8004eda:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004edc:	4b0d      	ldr	r3, [pc, #52]	@ (8004f14 <vPortEnterCritical+0x5c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d110      	bne.n	8004f06 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ee4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f18 <vPortEnterCritical+0x60>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d00b      	beq.n	8004f06 <vPortEnterCritical+0x4e>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	603b      	str	r3, [r7, #0]
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	e7fd      	b.n	8004f02 <vPortEnterCritical+0x4a>
	}
}
 8004f06:	bf00      	nop
 8004f08:	370c      	adds	r7, #12
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f10:	4770      	bx	lr
 8004f12:	bf00      	nop
 8004f14:	2000000c 	.word	0x2000000c
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004f22:	4b12      	ldr	r3, [pc, #72]	@ (8004f6c <vPortExitCritical+0x50>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10b      	bne.n	8004f42 <vPortExitCritical+0x26>
	__asm volatile
 8004f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2e:	f383 8811 	msr	BASEPRI, r3
 8004f32:	f3bf 8f6f 	isb	sy
 8004f36:	f3bf 8f4f 	dsb	sy
 8004f3a:	607b      	str	r3, [r7, #4]
}
 8004f3c:	bf00      	nop
 8004f3e:	bf00      	nop
 8004f40:	e7fd      	b.n	8004f3e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004f42:	4b0a      	ldr	r3, [pc, #40]	@ (8004f6c <vPortExitCritical+0x50>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	4a08      	ldr	r2, [pc, #32]	@ (8004f6c <vPortExitCritical+0x50>)
 8004f4a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004f4c:	4b07      	ldr	r3, [pc, #28]	@ (8004f6c <vPortExitCritical+0x50>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d105      	bne.n	8004f60 <vPortExitCritical+0x44>
 8004f54:	2300      	movs	r3, #0
 8004f56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	f383 8811 	msr	BASEPRI, r3
}
 8004f5e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr
 8004f6c:	2000000c 	.word	0x2000000c

08004f70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004f70:	f3ef 8009 	mrs	r0, PSP
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	4b15      	ldr	r3, [pc, #84]	@ (8004fd0 <pxCurrentTCBConst>)
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	f01e 0f10 	tst.w	lr, #16
 8004f80:	bf08      	it	eq
 8004f82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004f86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8a:	6010      	str	r0, [r2, #0]
 8004f8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f90:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004f94:	f380 8811 	msr	BASEPRI, r0
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	f3bf 8f6f 	isb	sy
 8004fa0:	f7fe ff9c 	bl	8003edc <vTaskSwitchContext>
 8004fa4:	f04f 0000 	mov.w	r0, #0
 8004fa8:	f380 8811 	msr	BASEPRI, r0
 8004fac:	bc09      	pop	{r0, r3}
 8004fae:	6819      	ldr	r1, [r3, #0]
 8004fb0:	6808      	ldr	r0, [r1, #0]
 8004fb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fb6:	f01e 0f10 	tst.w	lr, #16
 8004fba:	bf08      	it	eq
 8004fbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004fc0:	f380 8809 	msr	PSP, r0
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	f3af 8000 	nop.w

08004fd0 <pxCurrentTCBConst>:
 8004fd0:	20000898 	.word	0x20000898
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004fd4:	bf00      	nop
 8004fd6:	bf00      	nop

08004fd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	af00      	add	r7, sp, #0
	__asm volatile
 8004fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe2:	f383 8811 	msr	BASEPRI, r3
 8004fe6:	f3bf 8f6f 	isb	sy
 8004fea:	f3bf 8f4f 	dsb	sy
 8004fee:	607b      	str	r3, [r7, #4]
}
 8004ff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ff2:	f7fe feb9 	bl	8003d68 <xTaskIncrementTick>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d003      	beq.n	8005004 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004ffc:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <xPortSysTickHandler+0x40>)
 8004ffe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005002:	601a      	str	r2, [r3, #0]
 8005004:	2300      	movs	r3, #0
 8005006:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	f383 8811 	msr	BASEPRI, r3
}
 800500e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}
 8005018:	e000ed04 	.word	0xe000ed04

0800501c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005020:	4b0b      	ldr	r3, [pc, #44]	@ (8005050 <vPortSetupTimerInterrupt+0x34>)
 8005022:	2200      	movs	r2, #0
 8005024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005026:	4b0b      	ldr	r3, [pc, #44]	@ (8005054 <vPortSetupTimerInterrupt+0x38>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800502c:	4b0a      	ldr	r3, [pc, #40]	@ (8005058 <vPortSetupTimerInterrupt+0x3c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a0a      	ldr	r2, [pc, #40]	@ (800505c <vPortSetupTimerInterrupt+0x40>)
 8005032:	fba2 2303 	umull	r2, r3, r2, r3
 8005036:	099b      	lsrs	r3, r3, #6
 8005038:	4a09      	ldr	r2, [pc, #36]	@ (8005060 <vPortSetupTimerInterrupt+0x44>)
 800503a:	3b01      	subs	r3, #1
 800503c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800503e:	4b04      	ldr	r3, [pc, #16]	@ (8005050 <vPortSetupTimerInterrupt+0x34>)
 8005040:	2207      	movs	r2, #7
 8005042:	601a      	str	r2, [r3, #0]
}
 8005044:	bf00      	nop
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	e000e010 	.word	0xe000e010
 8005054:	e000e018 	.word	0xe000e018
 8005058:	20000000 	.word	0x20000000
 800505c:	10624dd3 	.word	0x10624dd3
 8005060:	e000e014 	.word	0xe000e014

08005064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005064:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005074 <vPortEnableVFP+0x10>
 8005068:	6801      	ldr	r1, [r0, #0]
 800506a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800506e:	6001      	str	r1, [r0, #0]
 8005070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005072:	bf00      	nop
 8005074:	e000ed88 	.word	0xe000ed88

08005078 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005078:	b480      	push	{r7}
 800507a:	b085      	sub	sp, #20
 800507c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800507e:	f3ef 8305 	mrs	r3, IPSR
 8005082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b0f      	cmp	r3, #15
 8005088:	d915      	bls.n	80050b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800508a:	4a18      	ldr	r2, [pc, #96]	@ (80050ec <vPortValidateInterruptPriority+0x74>)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	4413      	add	r3, r2
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005094:	4b16      	ldr	r3, [pc, #88]	@ (80050f0 <vPortValidateInterruptPriority+0x78>)
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	7afa      	ldrb	r2, [r7, #11]
 800509a:	429a      	cmp	r2, r3
 800509c:	d20b      	bcs.n	80050b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800509e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050a2:	f383 8811 	msr	BASEPRI, r3
 80050a6:	f3bf 8f6f 	isb	sy
 80050aa:	f3bf 8f4f 	dsb	sy
 80050ae:	607b      	str	r3, [r7, #4]
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	e7fd      	b.n	80050b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80050b6:	4b0f      	ldr	r3, [pc, #60]	@ (80050f4 <vPortValidateInterruptPriority+0x7c>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80050be:	4b0e      	ldr	r3, [pc, #56]	@ (80050f8 <vPortValidateInterruptPriority+0x80>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d90b      	bls.n	80050de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80050c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ca:	f383 8811 	msr	BASEPRI, r3
 80050ce:	f3bf 8f6f 	isb	sy
 80050d2:	f3bf 8f4f 	dsb	sy
 80050d6:	603b      	str	r3, [r7, #0]
}
 80050d8:	bf00      	nop
 80050da:	bf00      	nop
 80050dc:	e7fd      	b.n	80050da <vPortValidateInterruptPriority+0x62>
	}
 80050de:	bf00      	nop
 80050e0:	3714      	adds	r7, #20
 80050e2:	46bd      	mov	sp, r7
 80050e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e8:	4770      	bx	lr
 80050ea:	bf00      	nop
 80050ec:	e000e3f0 	.word	0xe000e3f0
 80050f0:	20000ec4 	.word	0x20000ec4
 80050f4:	e000ed0c 	.word	0xe000ed0c
 80050f8:	20000ec8 	.word	0x20000ec8

080050fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08a      	sub	sp, #40	@ 0x28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005104:	2300      	movs	r3, #0
 8005106:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005108:	f7fe fd72 	bl	8003bf0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800510c:	4b5c      	ldr	r3, [pc, #368]	@ (8005280 <pvPortMalloc+0x184>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005114:	f000 f924 	bl	8005360 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005118:	4b5a      	ldr	r3, [pc, #360]	@ (8005284 <pvPortMalloc+0x188>)
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4013      	ands	r3, r2
 8005120:	2b00      	cmp	r3, #0
 8005122:	f040 8095 	bne.w	8005250 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01e      	beq.n	800516a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800512c:	2208      	movs	r2, #8
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4413      	add	r3, r2
 8005132:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	2b00      	cmp	r3, #0
 800513c:	d015      	beq.n	800516a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f023 0307 	bic.w	r3, r3, #7
 8005144:	3308      	adds	r3, #8
 8005146:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00b      	beq.n	800516a <pvPortMalloc+0x6e>
	__asm volatile
 8005152:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	617b      	str	r3, [r7, #20]
}
 8005164:	bf00      	nop
 8005166:	bf00      	nop
 8005168:	e7fd      	b.n	8005166 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d06f      	beq.n	8005250 <pvPortMalloc+0x154>
 8005170:	4b45      	ldr	r3, [pc, #276]	@ (8005288 <pvPortMalloc+0x18c>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	429a      	cmp	r2, r3
 8005178:	d86a      	bhi.n	8005250 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800517a:	4b44      	ldr	r3, [pc, #272]	@ (800528c <pvPortMalloc+0x190>)
 800517c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800517e:	4b43      	ldr	r3, [pc, #268]	@ (800528c <pvPortMalloc+0x190>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005184:	e004      	b.n	8005190 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005188:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800518a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	429a      	cmp	r2, r3
 8005198:	d903      	bls.n	80051a2 <pvPortMalloc+0xa6>
 800519a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f1      	bne.n	8005186 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80051a2:	4b37      	ldr	r3, [pc, #220]	@ (8005280 <pvPortMalloc+0x184>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a8:	429a      	cmp	r2, r3
 80051aa:	d051      	beq.n	8005250 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2208      	movs	r2, #8
 80051b2:	4413      	add	r3, r2
 80051b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80051b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80051be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051c0:	685a      	ldr	r2, [r3, #4]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	1ad2      	subs	r2, r2, r3
 80051c6:	2308      	movs	r3, #8
 80051c8:	005b      	lsls	r3, r3, #1
 80051ca:	429a      	cmp	r2, r3
 80051cc:	d920      	bls.n	8005210 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80051ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00b      	beq.n	80051f8 <pvPortMalloc+0xfc>
	__asm volatile
 80051e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	613b      	str	r3, [r7, #16]
}
 80051f2:	bf00      	nop
 80051f4:	bf00      	nop
 80051f6:	e7fd      	b.n	80051f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80051f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051fa:	685a      	ldr	r2, [r3, #4]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	1ad2      	subs	r2, r2, r3
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005206:	687a      	ldr	r2, [r7, #4]
 8005208:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800520a:	69b8      	ldr	r0, [r7, #24]
 800520c:	f000 f90a 	bl	8005424 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005210:	4b1d      	ldr	r3, [pc, #116]	@ (8005288 <pvPortMalloc+0x18c>)
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	4a1b      	ldr	r2, [pc, #108]	@ (8005288 <pvPortMalloc+0x18c>)
 800521c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800521e:	4b1a      	ldr	r3, [pc, #104]	@ (8005288 <pvPortMalloc+0x18c>)
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b1b      	ldr	r3, [pc, #108]	@ (8005290 <pvPortMalloc+0x194>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	429a      	cmp	r2, r3
 8005228:	d203      	bcs.n	8005232 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800522a:	4b17      	ldr	r3, [pc, #92]	@ (8005288 <pvPortMalloc+0x18c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a18      	ldr	r2, [pc, #96]	@ (8005290 <pvPortMalloc+0x194>)
 8005230:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005234:	685a      	ldr	r2, [r3, #4]
 8005236:	4b13      	ldr	r3, [pc, #76]	@ (8005284 <pvPortMalloc+0x188>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	431a      	orrs	r2, r3
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	2200      	movs	r2, #0
 8005244:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005246:	4b13      	ldr	r3, [pc, #76]	@ (8005294 <pvPortMalloc+0x198>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	3301      	adds	r3, #1
 800524c:	4a11      	ldr	r2, [pc, #68]	@ (8005294 <pvPortMalloc+0x198>)
 800524e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005250:	f7fe fcdc 	bl	8003c0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	f003 0307 	and.w	r3, r3, #7
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00b      	beq.n	8005276 <pvPortMalloc+0x17a>
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	60fb      	str	r3, [r7, #12]
}
 8005270:	bf00      	nop
 8005272:	bf00      	nop
 8005274:	e7fd      	b.n	8005272 <pvPortMalloc+0x176>
	return pvReturn;
 8005276:	69fb      	ldr	r3, [r7, #28]
}
 8005278:	4618      	mov	r0, r3
 800527a:	3728      	adds	r7, #40	@ 0x28
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	20004ad4 	.word	0x20004ad4
 8005284:	20004ae8 	.word	0x20004ae8
 8005288:	20004ad8 	.word	0x20004ad8
 800528c:	20004acc 	.word	0x20004acc
 8005290:	20004adc 	.word	0x20004adc
 8005294:	20004ae0 	.word	0x20004ae0

08005298 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d04f      	beq.n	800534a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80052aa:	2308      	movs	r3, #8
 80052ac:	425b      	negs	r3, r3
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	4413      	add	r3, r2
 80052b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	4b25      	ldr	r3, [pc, #148]	@ (8005354 <vPortFree+0xbc>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4013      	ands	r3, r2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d10b      	bne.n	80052de <vPortFree+0x46>
	__asm volatile
 80052c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ca:	f383 8811 	msr	BASEPRI, r3
 80052ce:	f3bf 8f6f 	isb	sy
 80052d2:	f3bf 8f4f 	dsb	sy
 80052d6:	60fb      	str	r3, [r7, #12]
}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	e7fd      	b.n	80052da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00b      	beq.n	80052fe <vPortFree+0x66>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	60bb      	str	r3, [r7, #8]
}
 80052f8:	bf00      	nop
 80052fa:	bf00      	nop
 80052fc:	e7fd      	b.n	80052fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	685a      	ldr	r2, [r3, #4]
 8005302:	4b14      	ldr	r3, [pc, #80]	@ (8005354 <vPortFree+0xbc>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4013      	ands	r3, r2
 8005308:	2b00      	cmp	r3, #0
 800530a:	d01e      	beq.n	800534a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d11a      	bne.n	800534a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	4b0e      	ldr	r3, [pc, #56]	@ (8005354 <vPortFree+0xbc>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	43db      	mvns	r3, r3
 800531e:	401a      	ands	r2, r3
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005324:	f7fe fc64 	bl	8003bf0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <vPortFree+0xc0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4413      	add	r3, r2
 8005332:	4a09      	ldr	r2, [pc, #36]	@ (8005358 <vPortFree+0xc0>)
 8005334:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005336:	6938      	ldr	r0, [r7, #16]
 8005338:	f000 f874 	bl	8005424 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800533c:	4b07      	ldr	r3, [pc, #28]	@ (800535c <vPortFree+0xc4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	3301      	adds	r3, #1
 8005342:	4a06      	ldr	r2, [pc, #24]	@ (800535c <vPortFree+0xc4>)
 8005344:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005346:	f7fe fc61 	bl	8003c0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800534a:	bf00      	nop
 800534c:	3718      	adds	r7, #24
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	20004ae8 	.word	0x20004ae8
 8005358:	20004ad8 	.word	0x20004ad8
 800535c:	20004ae4 	.word	0x20004ae4

08005360 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005366:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800536a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800536c:	4b27      	ldr	r3, [pc, #156]	@ (800540c <prvHeapInit+0xac>)
 800536e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f003 0307 	and.w	r3, r3, #7
 8005376:	2b00      	cmp	r3, #0
 8005378:	d00c      	beq.n	8005394 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	3307      	adds	r3, #7
 800537e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 0307 	bic.w	r3, r3, #7
 8005386:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005388:	68ba      	ldr	r2, [r7, #8]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	4a1f      	ldr	r2, [pc, #124]	@ (800540c <prvHeapInit+0xac>)
 8005390:	4413      	add	r3, r2
 8005392:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005398:	4a1d      	ldr	r2, [pc, #116]	@ (8005410 <prvHeapInit+0xb0>)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800539e:	4b1c      	ldr	r3, [pc, #112]	@ (8005410 <prvHeapInit+0xb0>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	4413      	add	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80053ac:	2208      	movs	r2, #8
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	1a9b      	subs	r3, r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0307 	bic.w	r3, r3, #7
 80053ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4a15      	ldr	r2, [pc, #84]	@ (8005414 <prvHeapInit+0xb4>)
 80053c0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80053c2:	4b14      	ldr	r3, [pc, #80]	@ (8005414 <prvHeapInit+0xb4>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	2200      	movs	r2, #0
 80053c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80053ca:	4b12      	ldr	r3, [pc, #72]	@ (8005414 <prvHeapInit+0xb4>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2200      	movs	r2, #0
 80053d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	1ad2      	subs	r2, r2, r3
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80053e0:	4b0c      	ldr	r3, [pc, #48]	@ (8005414 <prvHeapInit+0xb4>)
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005418 <prvHeapInit+0xb8>)
 80053ee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	4a09      	ldr	r2, [pc, #36]	@ (800541c <prvHeapInit+0xbc>)
 80053f6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80053f8:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <prvHeapInit+0xc0>)
 80053fa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80053fe:	601a      	str	r2, [r3, #0]
}
 8005400:	bf00      	nop
 8005402:	3714      	adds	r7, #20
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr
 800540c:	20000ecc 	.word	0x20000ecc
 8005410:	20004acc 	.word	0x20004acc
 8005414:	20004ad4 	.word	0x20004ad4
 8005418:	20004adc 	.word	0x20004adc
 800541c:	20004ad8 	.word	0x20004ad8
 8005420:	20004ae8 	.word	0x20004ae8

08005424 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800542c:	4b28      	ldr	r3, [pc, #160]	@ (80054d0 <prvInsertBlockIntoFreeList+0xac>)
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	e002      	b.n	8005438 <prvInsertBlockIntoFreeList+0x14>
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	60fb      	str	r3, [r7, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	687a      	ldr	r2, [r7, #4]
 800543e:	429a      	cmp	r2, r3
 8005440:	d8f7      	bhi.n	8005432 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	4413      	add	r3, r2
 800544e:	687a      	ldr	r2, [r7, #4]
 8005450:	429a      	cmp	r2, r3
 8005452:	d108      	bne.n	8005466 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	685a      	ldr	r2, [r3, #4]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	441a      	add	r2, r3
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	685b      	ldr	r3, [r3, #4]
 800546e:	68ba      	ldr	r2, [r7, #8]
 8005470:	441a      	add	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d118      	bne.n	80054ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681a      	ldr	r2, [r3, #0]
 800547e:	4b15      	ldr	r3, [pc, #84]	@ (80054d4 <prvInsertBlockIntoFreeList+0xb0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	429a      	cmp	r2, r3
 8005484:	d00d      	beq.n	80054a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	441a      	add	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	601a      	str	r2, [r3, #0]
 80054a0:	e008      	b.n	80054b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80054a2:	4b0c      	ldr	r3, [pc, #48]	@ (80054d4 <prvInsertBlockIntoFreeList+0xb0>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	601a      	str	r2, [r3, #0]
 80054aa:	e003      	b.n	80054b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681a      	ldr	r2, [r3, #0]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d002      	beq.n	80054c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	687a      	ldr	r2, [r7, #4]
 80054c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054c2:	bf00      	nop
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	20004acc 	.word	0x20004acc
 80054d4:	20004ad4 	.word	0x20004ad4

080054d8 <memset>:
 80054d8:	4402      	add	r2, r0
 80054da:	4603      	mov	r3, r0
 80054dc:	4293      	cmp	r3, r2
 80054de:	d100      	bne.n	80054e2 <memset+0xa>
 80054e0:	4770      	bx	lr
 80054e2:	f803 1b01 	strb.w	r1, [r3], #1
 80054e6:	e7f9      	b.n	80054dc <memset+0x4>

080054e8 <_reclaim_reent>:
 80054e8:	4b2d      	ldr	r3, [pc, #180]	@ (80055a0 <_reclaim_reent+0xb8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4283      	cmp	r3, r0
 80054ee:	b570      	push	{r4, r5, r6, lr}
 80054f0:	4604      	mov	r4, r0
 80054f2:	d053      	beq.n	800559c <_reclaim_reent+0xb4>
 80054f4:	69c3      	ldr	r3, [r0, #28]
 80054f6:	b31b      	cbz	r3, 8005540 <_reclaim_reent+0x58>
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	b163      	cbz	r3, 8005516 <_reclaim_reent+0x2e>
 80054fc:	2500      	movs	r5, #0
 80054fe:	69e3      	ldr	r3, [r4, #28]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	5959      	ldr	r1, [r3, r5]
 8005504:	b9b1      	cbnz	r1, 8005534 <_reclaim_reent+0x4c>
 8005506:	3504      	adds	r5, #4
 8005508:	2d80      	cmp	r5, #128	@ 0x80
 800550a:	d1f8      	bne.n	80054fe <_reclaim_reent+0x16>
 800550c:	69e3      	ldr	r3, [r4, #28]
 800550e:	4620      	mov	r0, r4
 8005510:	68d9      	ldr	r1, [r3, #12]
 8005512:	f000 f881 	bl	8005618 <_free_r>
 8005516:	69e3      	ldr	r3, [r4, #28]
 8005518:	6819      	ldr	r1, [r3, #0]
 800551a:	b111      	cbz	r1, 8005522 <_reclaim_reent+0x3a>
 800551c:	4620      	mov	r0, r4
 800551e:	f000 f87b 	bl	8005618 <_free_r>
 8005522:	69e3      	ldr	r3, [r4, #28]
 8005524:	689d      	ldr	r5, [r3, #8]
 8005526:	b15d      	cbz	r5, 8005540 <_reclaim_reent+0x58>
 8005528:	4629      	mov	r1, r5
 800552a:	4620      	mov	r0, r4
 800552c:	682d      	ldr	r5, [r5, #0]
 800552e:	f000 f873 	bl	8005618 <_free_r>
 8005532:	e7f8      	b.n	8005526 <_reclaim_reent+0x3e>
 8005534:	680e      	ldr	r6, [r1, #0]
 8005536:	4620      	mov	r0, r4
 8005538:	f000 f86e 	bl	8005618 <_free_r>
 800553c:	4631      	mov	r1, r6
 800553e:	e7e1      	b.n	8005504 <_reclaim_reent+0x1c>
 8005540:	6961      	ldr	r1, [r4, #20]
 8005542:	b111      	cbz	r1, 800554a <_reclaim_reent+0x62>
 8005544:	4620      	mov	r0, r4
 8005546:	f000 f867 	bl	8005618 <_free_r>
 800554a:	69e1      	ldr	r1, [r4, #28]
 800554c:	b111      	cbz	r1, 8005554 <_reclaim_reent+0x6c>
 800554e:	4620      	mov	r0, r4
 8005550:	f000 f862 	bl	8005618 <_free_r>
 8005554:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8005556:	b111      	cbz	r1, 800555e <_reclaim_reent+0x76>
 8005558:	4620      	mov	r0, r4
 800555a:	f000 f85d 	bl	8005618 <_free_r>
 800555e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005560:	b111      	cbz	r1, 8005568 <_reclaim_reent+0x80>
 8005562:	4620      	mov	r0, r4
 8005564:	f000 f858 	bl	8005618 <_free_r>
 8005568:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800556a:	b111      	cbz	r1, 8005572 <_reclaim_reent+0x8a>
 800556c:	4620      	mov	r0, r4
 800556e:	f000 f853 	bl	8005618 <_free_r>
 8005572:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8005574:	b111      	cbz	r1, 800557c <_reclaim_reent+0x94>
 8005576:	4620      	mov	r0, r4
 8005578:	f000 f84e 	bl	8005618 <_free_r>
 800557c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800557e:	b111      	cbz	r1, 8005586 <_reclaim_reent+0x9e>
 8005580:	4620      	mov	r0, r4
 8005582:	f000 f849 	bl	8005618 <_free_r>
 8005586:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005588:	b111      	cbz	r1, 8005590 <_reclaim_reent+0xa8>
 800558a:	4620      	mov	r0, r4
 800558c:	f000 f844 	bl	8005618 <_free_r>
 8005590:	6a23      	ldr	r3, [r4, #32]
 8005592:	b11b      	cbz	r3, 800559c <_reclaim_reent+0xb4>
 8005594:	4620      	mov	r0, r4
 8005596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800559a:	4718      	bx	r3
 800559c:	bd70      	pop	{r4, r5, r6, pc}
 800559e:	bf00      	nop
 80055a0:	20000010 	.word	0x20000010

080055a4 <__errno>:
 80055a4:	4b01      	ldr	r3, [pc, #4]	@ (80055ac <__errno+0x8>)
 80055a6:	6818      	ldr	r0, [r3, #0]
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	20000010 	.word	0x20000010

080055b0 <__libc_init_array>:
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	4d0d      	ldr	r5, [pc, #52]	@ (80055e8 <__libc_init_array+0x38>)
 80055b4:	4c0d      	ldr	r4, [pc, #52]	@ (80055ec <__libc_init_array+0x3c>)
 80055b6:	1b64      	subs	r4, r4, r5
 80055b8:	10a4      	asrs	r4, r4, #2
 80055ba:	2600      	movs	r6, #0
 80055bc:	42a6      	cmp	r6, r4
 80055be:	d109      	bne.n	80055d4 <__libc_init_array+0x24>
 80055c0:	4d0b      	ldr	r5, [pc, #44]	@ (80055f0 <__libc_init_array+0x40>)
 80055c2:	4c0c      	ldr	r4, [pc, #48]	@ (80055f4 <__libc_init_array+0x44>)
 80055c4:	f000 fa1e 	bl	8005a04 <_init>
 80055c8:	1b64      	subs	r4, r4, r5
 80055ca:	10a4      	asrs	r4, r4, #2
 80055cc:	2600      	movs	r6, #0
 80055ce:	42a6      	cmp	r6, r4
 80055d0:	d105      	bne.n	80055de <__libc_init_array+0x2e>
 80055d2:	bd70      	pop	{r4, r5, r6, pc}
 80055d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055d8:	4798      	blx	r3
 80055da:	3601      	adds	r6, #1
 80055dc:	e7ee      	b.n	80055bc <__libc_init_array+0xc>
 80055de:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e2:	4798      	blx	r3
 80055e4:	3601      	adds	r6, #1
 80055e6:	e7f2      	b.n	80055ce <__libc_init_array+0x1e>
 80055e8:	08005ac8 	.word	0x08005ac8
 80055ec:	08005ac8 	.word	0x08005ac8
 80055f0:	08005ac8 	.word	0x08005ac8
 80055f4:	08005acc 	.word	0x08005acc

080055f8 <__retarget_lock_acquire_recursive>:
 80055f8:	4770      	bx	lr

080055fa <__retarget_lock_release_recursive>:
 80055fa:	4770      	bx	lr

080055fc <memcpy>:
 80055fc:	440a      	add	r2, r1
 80055fe:	4291      	cmp	r1, r2
 8005600:	f100 33ff 	add.w	r3, r0, #4294967295
 8005604:	d100      	bne.n	8005608 <memcpy+0xc>
 8005606:	4770      	bx	lr
 8005608:	b510      	push	{r4, lr}
 800560a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800560e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005612:	4291      	cmp	r1, r2
 8005614:	d1f9      	bne.n	800560a <memcpy+0xe>
 8005616:	bd10      	pop	{r4, pc}

08005618 <_free_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4605      	mov	r5, r0
 800561c:	2900      	cmp	r1, #0
 800561e:	d041      	beq.n	80056a4 <_free_r+0x8c>
 8005620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005624:	1f0c      	subs	r4, r1, #4
 8005626:	2b00      	cmp	r3, #0
 8005628:	bfb8      	it	lt
 800562a:	18e4      	addlt	r4, r4, r3
 800562c:	f000 f83e 	bl	80056ac <__malloc_lock>
 8005630:	4a1d      	ldr	r2, [pc, #116]	@ (80056a8 <_free_r+0x90>)
 8005632:	6813      	ldr	r3, [r2, #0]
 8005634:	b933      	cbnz	r3, 8005644 <_free_r+0x2c>
 8005636:	6063      	str	r3, [r4, #4]
 8005638:	6014      	str	r4, [r2, #0]
 800563a:	4628      	mov	r0, r5
 800563c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005640:	f000 b83a 	b.w	80056b8 <__malloc_unlock>
 8005644:	42a3      	cmp	r3, r4
 8005646:	d908      	bls.n	800565a <_free_r+0x42>
 8005648:	6820      	ldr	r0, [r4, #0]
 800564a:	1821      	adds	r1, r4, r0
 800564c:	428b      	cmp	r3, r1
 800564e:	bf01      	itttt	eq
 8005650:	6819      	ldreq	r1, [r3, #0]
 8005652:	685b      	ldreq	r3, [r3, #4]
 8005654:	1809      	addeq	r1, r1, r0
 8005656:	6021      	streq	r1, [r4, #0]
 8005658:	e7ed      	b.n	8005636 <_free_r+0x1e>
 800565a:	461a      	mov	r2, r3
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	b10b      	cbz	r3, 8005664 <_free_r+0x4c>
 8005660:	42a3      	cmp	r3, r4
 8005662:	d9fa      	bls.n	800565a <_free_r+0x42>
 8005664:	6811      	ldr	r1, [r2, #0]
 8005666:	1850      	adds	r0, r2, r1
 8005668:	42a0      	cmp	r0, r4
 800566a:	d10b      	bne.n	8005684 <_free_r+0x6c>
 800566c:	6820      	ldr	r0, [r4, #0]
 800566e:	4401      	add	r1, r0
 8005670:	1850      	adds	r0, r2, r1
 8005672:	4283      	cmp	r3, r0
 8005674:	6011      	str	r1, [r2, #0]
 8005676:	d1e0      	bne.n	800563a <_free_r+0x22>
 8005678:	6818      	ldr	r0, [r3, #0]
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	6053      	str	r3, [r2, #4]
 800567e:	4408      	add	r0, r1
 8005680:	6010      	str	r0, [r2, #0]
 8005682:	e7da      	b.n	800563a <_free_r+0x22>
 8005684:	d902      	bls.n	800568c <_free_r+0x74>
 8005686:	230c      	movs	r3, #12
 8005688:	602b      	str	r3, [r5, #0]
 800568a:	e7d6      	b.n	800563a <_free_r+0x22>
 800568c:	6820      	ldr	r0, [r4, #0]
 800568e:	1821      	adds	r1, r4, r0
 8005690:	428b      	cmp	r3, r1
 8005692:	bf04      	itt	eq
 8005694:	6819      	ldreq	r1, [r3, #0]
 8005696:	685b      	ldreq	r3, [r3, #4]
 8005698:	6063      	str	r3, [r4, #4]
 800569a:	bf04      	itt	eq
 800569c:	1809      	addeq	r1, r1, r0
 800569e:	6021      	streq	r1, [r4, #0]
 80056a0:	6054      	str	r4, [r2, #4]
 80056a2:	e7ca      	b.n	800563a <_free_r+0x22>
 80056a4:	bd38      	pop	{r3, r4, r5, pc}
 80056a6:	bf00      	nop
 80056a8:	20004c28 	.word	0x20004c28

080056ac <__malloc_lock>:
 80056ac:	4801      	ldr	r0, [pc, #4]	@ (80056b4 <__malloc_lock+0x8>)
 80056ae:	f7ff bfa3 	b.w	80055f8 <__retarget_lock_acquire_recursive>
 80056b2:	bf00      	nop
 80056b4:	20004c24 	.word	0x20004c24

080056b8 <__malloc_unlock>:
 80056b8:	4801      	ldr	r0, [pc, #4]	@ (80056c0 <__malloc_unlock+0x8>)
 80056ba:	f7ff bf9e 	b.w	80055fa <__retarget_lock_release_recursive>
 80056be:	bf00      	nop
 80056c0:	20004c24 	.word	0x20004c24

080056c4 <atan2f>:
 80056c4:	f000 b822 	b.w	800570c <__ieee754_atan2f>

080056c8 <sqrtf>:
 80056c8:	b508      	push	{r3, lr}
 80056ca:	ed2d 8b02 	vpush	{d8}
 80056ce:	eeb0 8a40 	vmov.f32	s16, s0
 80056d2:	f000 f817 	bl	8005704 <__ieee754_sqrtf>
 80056d6:	eeb4 8a48 	vcmp.f32	s16, s16
 80056da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056de:	d60c      	bvs.n	80056fa <sqrtf+0x32>
 80056e0:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8005700 <sqrtf+0x38>
 80056e4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80056e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ec:	d505      	bpl.n	80056fa <sqrtf+0x32>
 80056ee:	f7ff ff59 	bl	80055a4 <__errno>
 80056f2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80056f6:	2321      	movs	r3, #33	@ 0x21
 80056f8:	6003      	str	r3, [r0, #0]
 80056fa:	ecbd 8b02 	vpop	{d8}
 80056fe:	bd08      	pop	{r3, pc}
 8005700:	00000000 	.word	0x00000000

08005704 <__ieee754_sqrtf>:
 8005704:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005708:	4770      	bx	lr
	...

0800570c <__ieee754_atan2f>:
 800570c:	ee10 2a90 	vmov	r2, s1
 8005710:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8005714:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8005718:	b510      	push	{r4, lr}
 800571a:	eef0 7a40 	vmov.f32	s15, s0
 800571e:	d806      	bhi.n	800572e <__ieee754_atan2f+0x22>
 8005720:	ee10 0a10 	vmov	r0, s0
 8005724:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8005728:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800572c:	d904      	bls.n	8005738 <__ieee754_atan2f+0x2c>
 800572e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8005732:	eeb0 0a67 	vmov.f32	s0, s15
 8005736:	bd10      	pop	{r4, pc}
 8005738:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800573c:	d103      	bne.n	8005746 <__ieee754_atan2f+0x3a>
 800573e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005742:	f000 b883 	b.w	800584c <atanf>
 8005746:	1794      	asrs	r4, r2, #30
 8005748:	f004 0402 	and.w	r4, r4, #2
 800574c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8005750:	b943      	cbnz	r3, 8005764 <__ieee754_atan2f+0x58>
 8005752:	2c02      	cmp	r4, #2
 8005754:	d05e      	beq.n	8005814 <__ieee754_atan2f+0x108>
 8005756:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8005828 <__ieee754_atan2f+0x11c>
 800575a:	2c03      	cmp	r4, #3
 800575c:	bf08      	it	eq
 800575e:	eef0 7a47 	vmoveq.f32	s15, s14
 8005762:	e7e6      	b.n	8005732 <__ieee754_atan2f+0x26>
 8005764:	b941      	cbnz	r1, 8005778 <__ieee754_atan2f+0x6c>
 8005766:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800582c <__ieee754_atan2f+0x120>
 800576a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8005830 <__ieee754_atan2f+0x124>
 800576e:	2800      	cmp	r0, #0
 8005770:	bfa8      	it	ge
 8005772:	eef0 7a47 	vmovge.f32	s15, s14
 8005776:	e7dc      	b.n	8005732 <__ieee754_atan2f+0x26>
 8005778:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800577c:	d110      	bne.n	80057a0 <__ieee754_atan2f+0x94>
 800577e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8005782:	f104 34ff 	add.w	r4, r4, #4294967295
 8005786:	d107      	bne.n	8005798 <__ieee754_atan2f+0x8c>
 8005788:	2c02      	cmp	r4, #2
 800578a:	d846      	bhi.n	800581a <__ieee754_atan2f+0x10e>
 800578c:	4b29      	ldr	r3, [pc, #164]	@ (8005834 <__ieee754_atan2f+0x128>)
 800578e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005792:	edd3 7a00 	vldr	s15, [r3]
 8005796:	e7cc      	b.n	8005732 <__ieee754_atan2f+0x26>
 8005798:	2c02      	cmp	r4, #2
 800579a:	d841      	bhi.n	8005820 <__ieee754_atan2f+0x114>
 800579c:	4b26      	ldr	r3, [pc, #152]	@ (8005838 <__ieee754_atan2f+0x12c>)
 800579e:	e7f6      	b.n	800578e <__ieee754_atan2f+0x82>
 80057a0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80057a4:	d0df      	beq.n	8005766 <__ieee754_atan2f+0x5a>
 80057a6:	1a5b      	subs	r3, r3, r1
 80057a8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80057ac:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80057b0:	da1a      	bge.n	80057e8 <__ieee754_atan2f+0xdc>
 80057b2:	2a00      	cmp	r2, #0
 80057b4:	da01      	bge.n	80057ba <__ieee754_atan2f+0xae>
 80057b6:	313c      	adds	r1, #60	@ 0x3c
 80057b8:	db19      	blt.n	80057ee <__ieee754_atan2f+0xe2>
 80057ba:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80057be:	f000 f919 	bl	80059f4 <fabsf>
 80057c2:	f000 f843 	bl	800584c <atanf>
 80057c6:	eef0 7a40 	vmov.f32	s15, s0
 80057ca:	2c01      	cmp	r4, #1
 80057cc:	d012      	beq.n	80057f4 <__ieee754_atan2f+0xe8>
 80057ce:	2c02      	cmp	r4, #2
 80057d0:	d017      	beq.n	8005802 <__ieee754_atan2f+0xf6>
 80057d2:	2c00      	cmp	r4, #0
 80057d4:	d0ad      	beq.n	8005732 <__ieee754_atan2f+0x26>
 80057d6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800583c <__ieee754_atan2f+0x130>
 80057da:	ee77 7a87 	vadd.f32	s15, s15, s14
 80057de:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8005840 <__ieee754_atan2f+0x134>
 80057e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057e6:	e7a4      	b.n	8005732 <__ieee754_atan2f+0x26>
 80057e8:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8005830 <__ieee754_atan2f+0x124>
 80057ec:	e7ed      	b.n	80057ca <__ieee754_atan2f+0xbe>
 80057ee:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8005844 <__ieee754_atan2f+0x138>
 80057f2:	e7ea      	b.n	80057ca <__ieee754_atan2f+0xbe>
 80057f4:	ee17 3a90 	vmov	r3, s15
 80057f8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80057fc:	ee07 3a90 	vmov	s15, r3
 8005800:	e797      	b.n	8005732 <__ieee754_atan2f+0x26>
 8005802:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800583c <__ieee754_atan2f+0x130>
 8005806:	ee77 7a87 	vadd.f32	s15, s15, s14
 800580a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8005840 <__ieee754_atan2f+0x134>
 800580e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005812:	e78e      	b.n	8005732 <__ieee754_atan2f+0x26>
 8005814:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8005840 <__ieee754_atan2f+0x134>
 8005818:	e78b      	b.n	8005732 <__ieee754_atan2f+0x26>
 800581a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8005848 <__ieee754_atan2f+0x13c>
 800581e:	e788      	b.n	8005732 <__ieee754_atan2f+0x26>
 8005820:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8005844 <__ieee754_atan2f+0x138>
 8005824:	e785      	b.n	8005732 <__ieee754_atan2f+0x26>
 8005826:	bf00      	nop
 8005828:	c0490fdb 	.word	0xc0490fdb
 800582c:	bfc90fdb 	.word	0xbfc90fdb
 8005830:	3fc90fdb 	.word	0x3fc90fdb
 8005834:	08005a94 	.word	0x08005a94
 8005838:	08005a88 	.word	0x08005a88
 800583c:	33bbbd2e 	.word	0x33bbbd2e
 8005840:	40490fdb 	.word	0x40490fdb
 8005844:	00000000 	.word	0x00000000
 8005848:	3f490fdb 	.word	0x3f490fdb

0800584c <atanf>:
 800584c:	b538      	push	{r3, r4, r5, lr}
 800584e:	ee10 5a10 	vmov	r5, s0
 8005852:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8005856:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800585a:	eef0 7a40 	vmov.f32	s15, s0
 800585e:	d310      	bcc.n	8005882 <atanf+0x36>
 8005860:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8005864:	d904      	bls.n	8005870 <atanf+0x24>
 8005866:	ee70 7a00 	vadd.f32	s15, s0, s0
 800586a:	eeb0 0a67 	vmov.f32	s0, s15
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80059a8 <atanf+0x15c>
 8005874:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80059ac <atanf+0x160>
 8005878:	2d00      	cmp	r5, #0
 800587a:	bfc8      	it	gt
 800587c:	eef0 7a47 	vmovgt.f32	s15, s14
 8005880:	e7f3      	b.n	800586a <atanf+0x1e>
 8005882:	4b4b      	ldr	r3, [pc, #300]	@ (80059b0 <atanf+0x164>)
 8005884:	429c      	cmp	r4, r3
 8005886:	d810      	bhi.n	80058aa <atanf+0x5e>
 8005888:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800588c:	d20a      	bcs.n	80058a4 <atanf+0x58>
 800588e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80059b4 <atanf+0x168>
 8005892:	ee30 7a07 	vadd.f32	s14, s0, s14
 8005896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800589e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a2:	dce2      	bgt.n	800586a <atanf+0x1e>
 80058a4:	f04f 33ff 	mov.w	r3, #4294967295
 80058a8:	e013      	b.n	80058d2 <atanf+0x86>
 80058aa:	f000 f8a3 	bl	80059f4 <fabsf>
 80058ae:	4b42      	ldr	r3, [pc, #264]	@ (80059b8 <atanf+0x16c>)
 80058b0:	429c      	cmp	r4, r3
 80058b2:	d84f      	bhi.n	8005954 <atanf+0x108>
 80058b4:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80058b8:	429c      	cmp	r4, r3
 80058ba:	d841      	bhi.n	8005940 <atanf+0xf4>
 80058bc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80058c0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80058c4:	eea0 7a27 	vfma.f32	s14, s0, s15
 80058c8:	2300      	movs	r3, #0
 80058ca:	ee30 0a27 	vadd.f32	s0, s0, s15
 80058ce:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80058d2:	1c5a      	adds	r2, r3, #1
 80058d4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80058d8:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80059bc <atanf+0x170>
 80058dc:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80059c0 <atanf+0x174>
 80058e0:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80059c4 <atanf+0x178>
 80058e4:	ee66 6a06 	vmul.f32	s13, s12, s12
 80058e8:	eee6 5a87 	vfma.f32	s11, s13, s14
 80058ec:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80059c8 <atanf+0x17c>
 80058f0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80058f4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80059cc <atanf+0x180>
 80058f8:	eee7 5a26 	vfma.f32	s11, s14, s13
 80058fc:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80059d0 <atanf+0x184>
 8005900:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005904:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80059d4 <atanf+0x188>
 8005908:	eee7 5a26 	vfma.f32	s11, s14, s13
 800590c:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80059d8 <atanf+0x18c>
 8005910:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005914:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80059dc <atanf+0x190>
 8005918:	eea5 7a26 	vfma.f32	s14, s10, s13
 800591c:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 80059e0 <atanf+0x194>
 8005920:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005924:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80059e4 <atanf+0x198>
 8005928:	eea5 7a26 	vfma.f32	s14, s10, s13
 800592c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005930:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005934:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005938:	d121      	bne.n	800597e <atanf+0x132>
 800593a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800593e:	e794      	b.n	800586a <atanf+0x1e>
 8005940:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005944:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005948:	ee30 0a27 	vadd.f32	s0, s0, s15
 800594c:	2301      	movs	r3, #1
 800594e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005952:	e7be      	b.n	80058d2 <atanf+0x86>
 8005954:	4b24      	ldr	r3, [pc, #144]	@ (80059e8 <atanf+0x19c>)
 8005956:	429c      	cmp	r4, r3
 8005958:	d80b      	bhi.n	8005972 <atanf+0x126>
 800595a:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 800595e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005962:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005966:	2302      	movs	r3, #2
 8005968:	ee70 6a67 	vsub.f32	s13, s0, s15
 800596c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005970:	e7af      	b.n	80058d2 <atanf+0x86>
 8005972:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8005976:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800597a:	2303      	movs	r3, #3
 800597c:	e7a9      	b.n	80058d2 <atanf+0x86>
 800597e:	4a1b      	ldr	r2, [pc, #108]	@ (80059ec <atanf+0x1a0>)
 8005980:	491b      	ldr	r1, [pc, #108]	@ (80059f0 <atanf+0x1a4>)
 8005982:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005986:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800598a:	edd3 6a00 	vldr	s13, [r3]
 800598e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005992:	2d00      	cmp	r5, #0
 8005994:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005998:	edd2 7a00 	vldr	s15, [r2]
 800599c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059a0:	bfb8      	it	lt
 80059a2:	eef1 7a67 	vneglt.f32	s15, s15
 80059a6:	e760      	b.n	800586a <atanf+0x1e>
 80059a8:	bfc90fdb 	.word	0xbfc90fdb
 80059ac:	3fc90fdb 	.word	0x3fc90fdb
 80059b0:	3edfffff 	.word	0x3edfffff
 80059b4:	7149f2ca 	.word	0x7149f2ca
 80059b8:	3f97ffff 	.word	0x3f97ffff
 80059bc:	3c8569d7 	.word	0x3c8569d7
 80059c0:	3d4bda59 	.word	0x3d4bda59
 80059c4:	bd6ef16b 	.word	0xbd6ef16b
 80059c8:	3d886b35 	.word	0x3d886b35
 80059cc:	3dba2e6e 	.word	0x3dba2e6e
 80059d0:	3e124925 	.word	0x3e124925
 80059d4:	3eaaaaab 	.word	0x3eaaaaab
 80059d8:	bd15a221 	.word	0xbd15a221
 80059dc:	bd9d8795 	.word	0xbd9d8795
 80059e0:	bde38e38 	.word	0xbde38e38
 80059e4:	be4ccccd 	.word	0xbe4ccccd
 80059e8:	401bffff 	.word	0x401bffff
 80059ec:	08005ab0 	.word	0x08005ab0
 80059f0:	08005aa0 	.word	0x08005aa0

080059f4 <fabsf>:
 80059f4:	ee10 3a10 	vmov	r3, s0
 80059f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80059fc:	ee00 3a10 	vmov	s0, r3
 8005a00:	4770      	bx	lr
	...

08005a04 <_init>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr

08005a10 <_fini>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr
