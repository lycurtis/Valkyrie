
Valkyrie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eec  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  080080bc  080080bc  000090bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008168  08008168  0000a060  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008168  08008168  00009168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008170  08008170  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008170  08008170  00009170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008174  08008174  00009174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08008178  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ce0  20000060  080081d8  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d40  080081d8  0000ad40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7ff  00000000  00000000  0000a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000040b7  00000000  00000000  0002588f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001670  00000000  00000000  00029948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001142  00000000  00000000  0002afb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025578  00000000  00000000  0002c0fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c3ef  00000000  00000000  00051672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc6cf  00000000  00000000  0006da61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014a130  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006004  00000000  00000000  0014a174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  00150178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000060 	.word	0x20000060
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080080a4 	.word	0x080080a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000064 	.word	0x20000064
 800020c:	080080a4 	.word	0x080080a4

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b988 	b.w	8000538 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	468e      	mov	lr, r1
 8000248:	4604      	mov	r4, r0
 800024a:	4688      	mov	r8, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d962      	bls.n	800031c <__udivmoddi4+0xdc>
 8000256:	fab2 f682 	clz	r6, r2
 800025a:	b14e      	cbz	r6, 8000270 <__udivmoddi4+0x30>
 800025c:	f1c6 0320 	rsb	r3, r6, #32
 8000260:	fa01 f806 	lsl.w	r8, r1, r6
 8000264:	fa20 f303 	lsr.w	r3, r0, r3
 8000268:	40b7      	lsls	r7, r6
 800026a:	ea43 0808 	orr.w	r8, r3, r8
 800026e:	40b4      	lsls	r4, r6
 8000270:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000274:	fa1f fc87 	uxth.w	ip, r7
 8000278:	fbb8 f1fe 	udiv	r1, r8, lr
 800027c:	0c23      	lsrs	r3, r4, #16
 800027e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000282:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000286:	fb01 f20c 	mul.w	r2, r1, ip
 800028a:	429a      	cmp	r2, r3
 800028c:	d909      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028e:	18fb      	adds	r3, r7, r3
 8000290:	f101 30ff 	add.w	r0, r1, #4294967295
 8000294:	f080 80ea 	bcs.w	800046c <__udivmoddi4+0x22c>
 8000298:	429a      	cmp	r2, r3
 800029a:	f240 80e7 	bls.w	800046c <__udivmoddi4+0x22c>
 800029e:	3902      	subs	r1, #2
 80002a0:	443b      	add	r3, r7
 80002a2:	1a9a      	subs	r2, r3, r2
 80002a4:	b2a3      	uxth	r3, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002b2:	fb00 fc0c 	mul.w	ip, r0, ip
 80002b6:	459c      	cmp	ip, r3
 80002b8:	d909      	bls.n	80002ce <__udivmoddi4+0x8e>
 80002ba:	18fb      	adds	r3, r7, r3
 80002bc:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c0:	f080 80d6 	bcs.w	8000470 <__udivmoddi4+0x230>
 80002c4:	459c      	cmp	ip, r3
 80002c6:	f240 80d3 	bls.w	8000470 <__udivmoddi4+0x230>
 80002ca:	443b      	add	r3, r7
 80002cc:	3802      	subs	r0, #2
 80002ce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d2:	eba3 030c 	sub.w	r3, r3, ip
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11d      	cbz	r5, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40f3      	lsrs	r3, r6
 80002dc:	2200      	movs	r2, #0
 80002de:	e9c5 3200 	strd	r3, r2, [r5]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d905      	bls.n	80002f6 <__udivmoddi4+0xb6>
 80002ea:	b10d      	cbz	r5, 80002f0 <__udivmoddi4+0xb0>
 80002ec:	e9c5 0100 	strd	r0, r1, [r5]
 80002f0:	2100      	movs	r1, #0
 80002f2:	4608      	mov	r0, r1
 80002f4:	e7f5      	b.n	80002e2 <__udivmoddi4+0xa2>
 80002f6:	fab3 f183 	clz	r1, r3
 80002fa:	2900      	cmp	r1, #0
 80002fc:	d146      	bne.n	800038c <__udivmoddi4+0x14c>
 80002fe:	4573      	cmp	r3, lr
 8000300:	d302      	bcc.n	8000308 <__udivmoddi4+0xc8>
 8000302:	4282      	cmp	r2, r0
 8000304:	f200 8105 	bhi.w	8000512 <__udivmoddi4+0x2d2>
 8000308:	1a84      	subs	r4, r0, r2
 800030a:	eb6e 0203 	sbc.w	r2, lr, r3
 800030e:	2001      	movs	r0, #1
 8000310:	4690      	mov	r8, r2
 8000312:	2d00      	cmp	r5, #0
 8000314:	d0e5      	beq.n	80002e2 <__udivmoddi4+0xa2>
 8000316:	e9c5 4800 	strd	r4, r8, [r5]
 800031a:	e7e2      	b.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	2a00      	cmp	r2, #0
 800031e:	f000 8090 	beq.w	8000442 <__udivmoddi4+0x202>
 8000322:	fab2 f682 	clz	r6, r2
 8000326:	2e00      	cmp	r6, #0
 8000328:	f040 80a4 	bne.w	8000474 <__udivmoddi4+0x234>
 800032c:	1a8a      	subs	r2, r1, r2
 800032e:	0c03      	lsrs	r3, r0, #16
 8000330:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000334:	b280      	uxth	r0, r0
 8000336:	b2bc      	uxth	r4, r7
 8000338:	2101      	movs	r1, #1
 800033a:	fbb2 fcfe 	udiv	ip, r2, lr
 800033e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000342:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000346:	fb04 f20c 	mul.w	r2, r4, ip
 800034a:	429a      	cmp	r2, r3
 800034c:	d907      	bls.n	800035e <__udivmoddi4+0x11e>
 800034e:	18fb      	adds	r3, r7, r3
 8000350:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x11c>
 8000356:	429a      	cmp	r2, r3
 8000358:	f200 80e0 	bhi.w	800051c <__udivmoddi4+0x2dc>
 800035c:	46c4      	mov	ip, r8
 800035e:	1a9b      	subs	r3, r3, r2
 8000360:	fbb3 f2fe 	udiv	r2, r3, lr
 8000364:	fb0e 3312 	mls	r3, lr, r2, r3
 8000368:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800036c:	fb02 f404 	mul.w	r4, r2, r4
 8000370:	429c      	cmp	r4, r3
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x144>
 8000374:	18fb      	adds	r3, r7, r3
 8000376:	f102 30ff 	add.w	r0, r2, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x142>
 800037c:	429c      	cmp	r4, r3
 800037e:	f200 80ca 	bhi.w	8000516 <__udivmoddi4+0x2d6>
 8000382:	4602      	mov	r2, r0
 8000384:	1b1b      	subs	r3, r3, r4
 8000386:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0x98>
 800038c:	f1c1 0620 	rsb	r6, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 f706 	lsr.w	r7, r2, r6
 8000396:	431f      	orrs	r7, r3
 8000398:	fa0e f401 	lsl.w	r4, lr, r1
 800039c:	fa20 f306 	lsr.w	r3, r0, r6
 80003a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80003a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fa00 f801 	lsl.w	r8, r0, r1
 80003ae:	fa1f fc87 	uxth.w	ip, r7
 80003b2:	fbbe f0f9 	udiv	r0, lr, r9
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80003bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003c4:	45a6      	cmp	lr, r4
 80003c6:	fa02 f201 	lsl.w	r2, r2, r1
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x1a0>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 3aff 	add.w	sl, r0, #4294967295
 80003d2:	f080 809c 	bcs.w	800050e <__udivmoddi4+0x2ce>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	f240 8099 	bls.w	800050e <__udivmoddi4+0x2ce>
 80003dc:	3802      	subs	r0, #2
 80003de:	443c      	add	r4, r7
 80003e0:	eba4 040e 	sub.w	r4, r4, lr
 80003e4:	fa1f fe83 	uxth.w	lr, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1ce>
 80003fc:	193c      	adds	r4, r7, r4
 80003fe:	f103 3eff 	add.w	lr, r3, #4294967295
 8000402:	f080 8082 	bcs.w	800050a <__udivmoddi4+0x2ca>
 8000406:	45a4      	cmp	ip, r4
 8000408:	d97f      	bls.n	800050a <__udivmoddi4+0x2ca>
 800040a:	3b02      	subs	r3, #2
 800040c:	443c      	add	r4, r7
 800040e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000412:	eba4 040c 	sub.w	r4, r4, ip
 8000416:	fba0 ec02 	umull	lr, ip, r0, r2
 800041a:	4564      	cmp	r4, ip
 800041c:	4673      	mov	r3, lr
 800041e:	46e1      	mov	r9, ip
 8000420:	d362      	bcc.n	80004e8 <__udivmoddi4+0x2a8>
 8000422:	d05f      	beq.n	80004e4 <__udivmoddi4+0x2a4>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x1fe>
 8000426:	ebb8 0203 	subs.w	r2, r8, r3
 800042a:	eb64 0409 	sbc.w	r4, r4, r9
 800042e:	fa04 f606 	lsl.w	r6, r4, r6
 8000432:	fa22 f301 	lsr.w	r3, r2, r1
 8000436:	431e      	orrs	r6, r3
 8000438:	40cc      	lsrs	r4, r1
 800043a:	e9c5 6400 	strd	r6, r4, [r5]
 800043e:	2100      	movs	r1, #0
 8000440:	e74f      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000442:	fbb1 fcf2 	udiv	ip, r1, r2
 8000446:	0c01      	lsrs	r1, r0, #16
 8000448:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800044c:	b280      	uxth	r0, r0
 800044e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000452:	463b      	mov	r3, r7
 8000454:	4638      	mov	r0, r7
 8000456:	463c      	mov	r4, r7
 8000458:	46b8      	mov	r8, r7
 800045a:	46be      	mov	lr, r7
 800045c:	2620      	movs	r6, #32
 800045e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000462:	eba2 0208 	sub.w	r2, r2, r8
 8000466:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800046a:	e766      	b.n	800033a <__udivmoddi4+0xfa>
 800046c:	4601      	mov	r1, r0
 800046e:	e718      	b.n	80002a2 <__udivmoddi4+0x62>
 8000470:	4610      	mov	r0, r2
 8000472:	e72c      	b.n	80002ce <__udivmoddi4+0x8e>
 8000474:	f1c6 0220 	rsb	r2, r6, #32
 8000478:	fa2e f302 	lsr.w	r3, lr, r2
 800047c:	40b7      	lsls	r7, r6
 800047e:	40b1      	lsls	r1, r6
 8000480:	fa20 f202 	lsr.w	r2, r0, r2
 8000484:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000488:	430a      	orrs	r2, r1
 800048a:	fbb3 f8fe 	udiv	r8, r3, lr
 800048e:	b2bc      	uxth	r4, r7
 8000490:	fb0e 3318 	mls	r3, lr, r8, r3
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049a:	fb08 f904 	mul.w	r9, r8, r4
 800049e:	40b0      	lsls	r0, r6
 80004a0:	4589      	cmp	r9, r1
 80004a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004a6:	b280      	uxth	r0, r0
 80004a8:	d93e      	bls.n	8000528 <__udivmoddi4+0x2e8>
 80004aa:	1879      	adds	r1, r7, r1
 80004ac:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b0:	d201      	bcs.n	80004b6 <__udivmoddi4+0x276>
 80004b2:	4589      	cmp	r9, r1
 80004b4:	d81f      	bhi.n	80004f6 <__udivmoddi4+0x2b6>
 80004b6:	eba1 0109 	sub.w	r1, r1, r9
 80004ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80004be:	fb09 f804 	mul.w	r8, r9, r4
 80004c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004c6:	b292      	uxth	r2, r2
 80004c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004cc:	4542      	cmp	r2, r8
 80004ce:	d229      	bcs.n	8000524 <__udivmoddi4+0x2e4>
 80004d0:	18ba      	adds	r2, r7, r2
 80004d2:	f109 31ff 	add.w	r1, r9, #4294967295
 80004d6:	d2c4      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004d8:	4542      	cmp	r2, r8
 80004da:	d2c2      	bcs.n	8000462 <__udivmoddi4+0x222>
 80004dc:	f1a9 0102 	sub.w	r1, r9, #2
 80004e0:	443a      	add	r2, r7
 80004e2:	e7be      	b.n	8000462 <__udivmoddi4+0x222>
 80004e4:	45f0      	cmp	r8, lr
 80004e6:	d29d      	bcs.n	8000424 <__udivmoddi4+0x1e4>
 80004e8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f0:	3801      	subs	r0, #1
 80004f2:	46e1      	mov	r9, ip
 80004f4:	e796      	b.n	8000424 <__udivmoddi4+0x1e4>
 80004f6:	eba7 0909 	sub.w	r9, r7, r9
 80004fa:	4449      	add	r1, r9
 80004fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8000500:	fbb1 f9fe 	udiv	r9, r1, lr
 8000504:	fb09 f804 	mul.w	r8, r9, r4
 8000508:	e7db      	b.n	80004c2 <__udivmoddi4+0x282>
 800050a:	4673      	mov	r3, lr
 800050c:	e77f      	b.n	800040e <__udivmoddi4+0x1ce>
 800050e:	4650      	mov	r0, sl
 8000510:	e766      	b.n	80003e0 <__udivmoddi4+0x1a0>
 8000512:	4608      	mov	r0, r1
 8000514:	e6fd      	b.n	8000312 <__udivmoddi4+0xd2>
 8000516:	443b      	add	r3, r7
 8000518:	3a02      	subs	r2, #2
 800051a:	e733      	b.n	8000384 <__udivmoddi4+0x144>
 800051c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000520:	443b      	add	r3, r7
 8000522:	e71c      	b.n	800035e <__udivmoddi4+0x11e>
 8000524:	4649      	mov	r1, r9
 8000526:	e79c      	b.n	8000462 <__udivmoddi4+0x222>
 8000528:	eba1 0109 	sub.w	r1, r1, r9
 800052c:	46c4      	mov	ip, r8
 800052e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000532:	fb09 f804 	mul.w	r8, r9, r4
 8000536:	e7c4      	b.n	80004c2 <__udivmoddi4+0x282>

08000538 <__aeabi_idiv0>:
 8000538:	4770      	bx	lr
 800053a:	bf00      	nop

0800053c <ComplementaryFilter_Init>:
#define PI 3.14159265358979323846f
#endif

#define ALPHA 0.98f

void ComplementaryFilter_Init(comp *filter){
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	filter->roll = 0.0f;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f04f 0200 	mov.w	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
	filter->pitch = 0.0f;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	f04f 0200 	mov.w	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055e:	4770      	bx	lr

08000560 <ComplementaryFilter_Update>:

void ComplementaryFilter_Update(comp *filter, float ax, float ay, float az, float gx, float gy, float dt){
 8000560:	b580      	push	{r7, lr}
 8000562:	ed2d 8b02 	vpush	{d8}
 8000566:	b08a      	sub	sp, #40	@ 0x28
 8000568:	af00      	add	r7, sp, #0
 800056a:	61f8      	str	r0, [r7, #28]
 800056c:	ed87 0a06 	vstr	s0, [r7, #24]
 8000570:	edc7 0a05 	vstr	s1, [r7, #20]
 8000574:	ed87 1a04 	vstr	s2, [r7, #16]
 8000578:	edc7 1a03 	vstr	s3, [r7, #12]
 800057c:	ed87 2a02 	vstr	s4, [r7, #8]
 8000580:	edc7 2a01 	vstr	s5, [r7, #4]
	// Calculate roll and pitch from the accelerometer
	float roll_accel = atan2f(ay, az) * (180.0f/PI);
 8000584:	edd7 0a04 	vldr	s1, [r7, #16]
 8000588:	ed97 0a05 	vldr	s0, [r7, #20]
 800058c:	f007 fbea 	bl	8007d64 <atan2f>
 8000590:	eef0 7a40 	vmov.f32	s15, s0
 8000594:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000658 <ComplementaryFilter_Update+0xf8>
 8000598:	ee67 7a87 	vmul.f32	s15, s15, s14
 800059c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float pitch_accel = atan2f(-ax, sqrtf(ay * ay + az * az)) * (180.0f/PI);
 80005a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80005a4:	eeb1 8a67 	vneg.f32	s16, s15
 80005a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80005ac:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80005b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80005b4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80005b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005bc:	eeb0 0a67 	vmov.f32	s0, s15
 80005c0:	f007 fbd2 	bl	8007d68 <sqrtf>
 80005c4:	eef0 7a40 	vmov.f32	s15, s0
 80005c8:	eef0 0a67 	vmov.f32	s1, s15
 80005cc:	eeb0 0a48 	vmov.f32	s0, s16
 80005d0:	f007 fbc8 	bl	8007d64 <atan2f>
 80005d4:	eef0 7a40 	vmov.f32	s15, s0
 80005d8:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000658 <ComplementaryFilter_Update+0xf8>
 80005dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005e0:	edc7 7a08 	vstr	s15, [r7, #32]

	// Complementary filter formula
	// angle = α * (angle + gyro * dt) + (1 - α) * accel_angle;
	filter->roll = ALPHA * (filter->roll+gx*dt) + (1.0f-ALPHA) * roll_accel;
 80005e4:	69fb      	ldr	r3, [r7, #28]
 80005e6:	ed93 7a00 	vldr	s14, [r3]
 80005ea:	edd7 6a03 	vldr	s13, [r7, #12]
 80005ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80005f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80005f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005fa:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800065c <ComplementaryFilter_Update+0xfc>
 80005fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000602:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8000606:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8000660 <ComplementaryFilter_Update+0x100>
 800060a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800060e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000612:	69fb      	ldr	r3, [r7, #28]
 8000614:	edc3 7a00 	vstr	s15, [r3]
	filter->pitch = ALPHA * (filter->pitch+gy*dt) + (1.0f-ALPHA) * pitch_accel;
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	ed93 7a01 	vldr	s14, [r3, #4]
 800061e:	edd7 6a02 	vldr	s13, [r7, #8]
 8000622:	edd7 7a01 	vldr	s15, [r7, #4]
 8000626:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800062a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800062e:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 800065c <ComplementaryFilter_Update+0xfc>
 8000632:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000636:	edd7 7a08 	vldr	s15, [r7, #32]
 800063a:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8000660 <ComplementaryFilter_Update+0x100>
 800063e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000642:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000646:	69fb      	ldr	r3, [r7, #28]
 8000648:	edc3 7a01 	vstr	s15, [r3, #4]

}
 800064c:	bf00      	nop
 800064e:	3728      	adds	r7, #40	@ 0x28
 8000650:	46bd      	mov	sp, r7
 8000652:	ecbd 8b02 	vpop	{d8}
 8000656:	bd80      	pop	{r7, pc}
 8000658:	42652ee0 	.word	0x42652ee0
 800065c:	3f7ae148 	.word	0x3f7ae148
 8000660:	3ca3d700 	.word	0x3ca3d700

08000664 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_DMA_Init+0x3c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000672:	4a0b      	ldr	r2, [pc, #44]	@ (80006a0 <MX_DMA_Init+0x3c>)
 8000674:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000678:	6313      	str	r3, [r2, #48]	@ 0x30
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_DMA_Init+0x3c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2105      	movs	r1, #5
 800068a:	203a      	movs	r0, #58	@ 0x3a
 800068c:	f001 f89e 	bl	80017cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000690:	203a      	movs	r0, #58	@ 0x3a
 8000692:	f001 f8b7 	bl	8001804 <HAL_NVIC_EnableIRQ>

}
 8000696:	bf00      	nop
 8000698:	3708      	adds	r7, #8
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800

080006a4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b084      	sub	sp, #16
 80006a8:	af02      	add	r7, sp, #8
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	ibus_rx_semaphore = xSemaphoreCreateBinary();
 80006aa:	2203      	movs	r2, #3
 80006ac:	2100      	movs	r1, #0
 80006ae:	2001      	movs	r0, #1
 80006b0:	f004 fc09 	bl	8004ec6 <xQueueGenericCreate>
 80006b4:	4603      	mov	r3, r0
 80006b6:	4a1a      	ldr	r2, [pc, #104]	@ (8000720 <MX_FREERTOS_Init+0x7c>)
 80006b8:	6013      	str	r3, [r2, #0]
	configASSERT(ibus_rx_semaphore != NULL);
 80006ba:	4b19      	ldr	r3, [pc, #100]	@ (8000720 <MX_FREERTOS_Init+0x7c>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d10b      	bne.n	80006da <MX_FREERTOS_Init+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80006c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006c6:	f383 8811 	msr	BASEPRI, r3
 80006ca:	f3bf 8f6f 	isb	sy
 80006ce:	f3bf 8f4f 	dsb	sy
 80006d2:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	e7fd      	b.n	80006d6 <MX_FREERTOS_Init+0x32>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006da:	4a12      	ldr	r2, [pc, #72]	@ (8000724 <MX_FREERTOS_Init+0x80>)
 80006dc:	2100      	movs	r1, #0
 80006de:	4812      	ldr	r0, [pc, #72]	@ (8000728 <MX_FREERTOS_Init+0x84>)
 80006e0:	f004 f974 	bl	80049cc <osThreadNew>
 80006e4:	4603      	mov	r3, r0
 80006e6:	4a11      	ldr	r2, [pc, #68]	@ (800072c <MX_FREERTOS_Init+0x88>)
 80006e8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(IMU_Task,  "IMU",  256, NULL, tskIDLE_PRIORITY+2, &IMU_TaskHandle);
 80006ea:	4b11      	ldr	r3, [pc, #68]	@ (8000730 <MX_FREERTOS_Init+0x8c>)
 80006ec:	9301      	str	r3, [sp, #4]
 80006ee:	2302      	movs	r3, #2
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2300      	movs	r3, #0
 80006f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80006f8:	490e      	ldr	r1, [pc, #56]	@ (8000734 <MX_FREERTOS_Init+0x90>)
 80006fa:	480f      	ldr	r0, [pc, #60]	@ (8000738 <MX_FREERTOS_Init+0x94>)
 80006fc:	f005 fa4a 	bl	8005b94 <xTaskCreate>
  xTaskCreate(IBUS_Task, "IBUS", 256, NULL, tskIDLE_PRIORITY+1, &IBUS_TaskHandle);
 8000700:	4b0e      	ldr	r3, [pc, #56]	@ (800073c <MX_FREERTOS_Init+0x98>)
 8000702:	9301      	str	r3, [sp, #4]
 8000704:	2301      	movs	r3, #1
 8000706:	9300      	str	r3, [sp, #0]
 8000708:	2300      	movs	r3, #0
 800070a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800070e:	490c      	ldr	r1, [pc, #48]	@ (8000740 <MX_FREERTOS_Init+0x9c>)
 8000710:	480c      	ldr	r0, [pc, #48]	@ (8000744 <MX_FREERTOS_Init+0xa0>)
 8000712:	f005 fa3f 	bl	8005b94 <xTaskCreate>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000cc 	.word	0x200000cc
 8000724:	080080ec 	.word	0x080080ec
 8000728:	08000749 	.word	0x08000749
 800072c:	2000008c 	.word	0x2000008c
 8000730:	2000007c 	.word	0x2000007c
 8000734:	080080c8 	.word	0x080080c8
 8000738:	08000759 	.word	0x08000759
 800073c:	20000080 	.word	0x20000080
 8000740:	080080cc 	.word	0x080080cc
 8000744:	08000801 	.word	0x08000801

08000748 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000750:	2001      	movs	r0, #1
 8000752:	f004 f9cd 	bl	8004af0 <osDelay>
 8000756:	e7fb      	b.n	8000750 <StartDefaultTask+0x8>

08000758 <IMU_Task>:
  /* USER CODE END StartDefaultTask */
}

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void IMU_Task(void *pvParameters){
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b08d      	sub	sp, #52	@ 0x34
 800075c:	af02      	add	r7, sp, #8
 800075e:	6078      	str	r0, [r7, #4]
	const TickType_t period = pdMS_TO_TICKS(5); // 200 Hz
 8000760:	2305      	movs	r3, #5
 8000762:	627b      	str	r3, [r7, #36]	@ 0x24
	TickType_t last = xTaskGetTickCount();
 8000764:	f005 fd46 	bl	80061f4 <xTaskGetTickCount>
 8000768:	4603      	mov	r3, r0
 800076a:	623b      	str	r3, [r7, #32]

	while(1){
		float ax_g, ay_g, az_g;
		float gx_dps, gy_dps, gz_dps;

		MPU6050_Read_Calibrated(&ax_g, &ay_g, &az_g, &gx_dps, &gy_dps, &gz_dps);
 800076c:	f107 0410 	add.w	r4, r7, #16
 8000770:	f107 0214 	add.w	r2, r7, #20
 8000774:	f107 0118 	add.w	r1, r7, #24
 8000778:	f107 001c 	add.w	r0, r7, #28
 800077c:	f107 0308 	add.w	r3, r7, #8
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	f107 030c 	add.w	r3, r7, #12
 8000786:	9300      	str	r3, [sp, #0]
 8000788:	4623      	mov	r3, r4
 800078a:	f000 fc0b 	bl	8000fa4 <MPU6050_Read_Calibrated>
		ComplementaryFilter_Update(&imu_CA, ax_g, ay_g, az_g, gx_dps, gy_dps, 0.005f);
 800078e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000792:	ed97 7a06 	vldr	s14, [r7, #24]
 8000796:	edd7 6a05 	vldr	s13, [r7, #20]
 800079a:	ed97 6a04 	vldr	s12, [r7, #16]
 800079e:	edd7 5a03 	vldr	s11, [r7, #12]
 80007a2:	eddf 2a12 	vldr	s5, [pc, #72]	@ 80007ec <IMU_Task+0x94>
 80007a6:	eeb0 2a65 	vmov.f32	s4, s11
 80007aa:	eef0 1a46 	vmov.f32	s3, s12
 80007ae:	eeb0 1a66 	vmov.f32	s2, s13
 80007b2:	eef0 0a47 	vmov.f32	s1, s14
 80007b6:	eeb0 0a67 	vmov.f32	s0, s15
 80007ba:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <IMU_Task+0x98>)
 80007bc:	f7ff fed0 	bl	8000560 <ComplementaryFilter_Update>

		// results
		roll = imu_CA.roll;
 80007c0:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <IMU_Task+0x98>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a0b      	ldr	r2, [pc, #44]	@ (80007f4 <IMU_Task+0x9c>)
 80007c6:	6013      	str	r3, [r2, #0]
		pitch = imu_CA.pitch;
 80007c8:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <IMU_Task+0x98>)
 80007ca:	685b      	ldr	r3, [r3, #4]
 80007cc:	4a0a      	ldr	r2, [pc, #40]	@ (80007f8 <IMU_Task+0xa0>)
 80007ce:	6013      	str	r3, [r2, #0]

		// Optional print statements here for roll pitch
		//char buffer[64];
		//snprintf(buffer, sizeof(buffer), "Roll: %.2f\tPitch: %.2f\r\n", roll, pitch);
		//UART2_WriteString(buffer);
		IMUTaskProfiler++;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <IMU_Task+0xa4>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	3301      	adds	r3, #1
 80007d6:	4a09      	ldr	r2, [pc, #36]	@ (80007fc <IMU_Task+0xa4>)
 80007d8:	6013      	str	r3, [r2, #0]

		vTaskDelayUntil(&last, period);
 80007da:	f107 0320 	add.w	r3, r7, #32
 80007de:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80007e0:	4618      	mov	r0, r3
 80007e2:	f005 fb35 	bl	8005e50 <vTaskDelayUntil>
	while(1){
 80007e6:	bf00      	nop
 80007e8:	e7c0      	b.n	800076c <IMU_Task+0x14>
 80007ea:	bf00      	nop
 80007ec:	3ba3d70a 	.word	0x3ba3d70a
 80007f0:	20000090 	.word	0x20000090
 80007f4:	20000098 	.word	0x20000098
 80007f8:	2000009c 	.word	0x2000009c
 80007fc:	20000084 	.word	0x20000084

08000800 <IBUS_Task>:
	}
}

void IBUS_Task(void *pvParameters){
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8000808:	4b21      	ldr	r3, [pc, #132]	@ (8000890 <IBUS_Task+0x90>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	68da      	ldr	r2, [r3, #12]
 800080e:	4b20      	ldr	r3, [pc, #128]	@ (8000890 <IBUS_Task+0x90>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f042 0210 	orr.w	r2, r2, #16
 8000816:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(&huart1, ibus_dma_buffer, IBUS_PACKET_SIZE);
 8000818:	2220      	movs	r2, #32
 800081a:	491e      	ldr	r1, [pc, #120]	@ (8000894 <IBUS_Task+0x94>)
 800081c:	481c      	ldr	r0, [pc, #112]	@ (8000890 <IBUS_Task+0x90>)
 800081e:	f002 feeb 	bl	80035f8 <HAL_UART_Receive_DMA>

	while(1){
		// Wait indefinitely for the semaphore, the task will be in blocked state
		// ISR is in charge of giving the semaphore
		if(xSemaphoreTake(ibus_rx_semaphore, portMAX_DELAY) == pdTRUE){
 8000822:	4b1d      	ldr	r3, [pc, #116]	@ (8000898 <IBUS_Task+0x98>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f04f 31ff 	mov.w	r1, #4294967295
 800082a:	4618      	mov	r0, r3
 800082c:	f004 febc 	bl	80055a8 <xQueueSemaphoreTake>
 8000830:	4603      	mov	r3, r0
 8000832:	2b01      	cmp	r3, #1
 8000834:	d1f5      	bne.n	8000822 <IBUS_Task+0x22>
			if(ibus_dma_buffer[0] == 0x20 && ibus_dma_buffer[1] == 0x20){ //ibus_dma_buffer[1] == 0x40
 8000836:	4b17      	ldr	r3, [pc, #92]	@ (8000894 <IBUS_Task+0x94>)
 8000838:	781b      	ldrb	r3, [r3, #0]
 800083a:	2b20      	cmp	r3, #32
 800083c:	d121      	bne.n	8000882 <IBUS_Task+0x82>
 800083e:	4b15      	ldr	r3, [pc, #84]	@ (8000894 <IBUS_Task+0x94>)
 8000840:	785b      	ldrb	r3, [r3, #1]
 8000842:	2b20      	cmp	r3, #32
 8000844:	d11d      	bne.n	8000882 <IBUS_Task+0x82>
				// Decode channels Note: iBUS data is little endian
				for(int ch = 0; ch < 6; ch++){
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	e017      	b.n	800087c <IBUS_Task+0x7c>
					ibus_channels[ch] = (uint16_t)(ibus_dma_buffer[2 + ch*2] | (ibus_dma_buffer[3 + ch*2] << 8));
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	3301      	adds	r3, #1
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	4a10      	ldr	r2, [pc, #64]	@ (8000894 <IBUS_Task+0x94>)
 8000854:	5cd3      	ldrb	r3, [r2, r3]
 8000856:	b21a      	sxth	r2, r3
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	3303      	adds	r3, #3
 800085e:	490d      	ldr	r1, [pc, #52]	@ (8000894 <IBUS_Task+0x94>)
 8000860:	5ccb      	ldrb	r3, [r1, r3]
 8000862:	b21b      	sxth	r3, r3
 8000864:	021b      	lsls	r3, r3, #8
 8000866:	b21b      	sxth	r3, r3
 8000868:	4313      	orrs	r3, r2
 800086a:	b21b      	sxth	r3, r3
 800086c:	b299      	uxth	r1, r3
 800086e:	4a0b      	ldr	r2, [pc, #44]	@ (800089c <IBUS_Task+0x9c>)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int ch = 0; ch < 6; ch++){
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	3301      	adds	r3, #1
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	2b05      	cmp	r3, #5
 8000880:	dde4      	ble.n	800084c <IBUS_Task+0x4c>
//				snprintf(str, sizeof(str), "CH1:%4d CH2:%4d CH3:%4d CH4:%4d\r\n",
//						ibus_channels[0], ibus_channels[1],
//						ibus_channels[2], ibus_channels[3]);
//				UART2_WriteString(str);
			}
			IBUSTaskProfiler++;
 8000882:	4b07      	ldr	r3, [pc, #28]	@ (80008a0 <IBUS_Task+0xa0>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	3301      	adds	r3, #1
 8000888:	4a05      	ldr	r2, [pc, #20]	@ (80008a0 <IBUS_Task+0xa0>)
 800088a:	6013      	str	r3, [r2, #0]
		if(xSemaphoreTake(ibus_rx_semaphore, portMAX_DELAY) == pdTRUE){
 800088c:	e7c9      	b.n	8000822 <IBUS_Task+0x22>
 800088e:	bf00      	nop
 8000890:	20000124 	.word	0x20000124
 8000894:	200000ac 	.word	0x200000ac
 8000898:	200000cc 	.word	0x200000cc
 800089c:	200000a0 	.word	0x200000a0
 80008a0:	20000088 	.word	0x20000088

080008a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <MX_GPIO_Init+0x4c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a0f      	ldr	r2, [pc, #60]	@ (80008f0 <MX_GPIO_Init+0x4c>)
 80008b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b0d      	ldr	r3, [pc, #52]	@ (80008f0 <MX_GPIO_Init+0x4c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	4b09      	ldr	r3, [pc, #36]	@ (80008f0 <MX_GPIO_Init+0x4c>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a08      	ldr	r2, [pc, #32]	@ (80008f0 <MX_GPIO_Init+0x4c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_GPIO_Init+0x4c>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	603b      	str	r3, [r7, #0]
 80008e0:	683b      	ldr	r3, [r7, #0]

}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800

080008f4 <I2C_Init>:
#define AC_GPIOB_OTYPER_OT9 (1U<<9)
#define I2C_100KHZ 80
#define SD_MODE_MAX_RISE_TIME 17
#define I2C1_AF4 (4U)

void I2C_Init(void) {
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
	// Enable clock access for GPIOB
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 80008f8:	4b39      	ldr	r3, [pc, #228]	@ (80009e0 <I2C_Init+0xec>)
 80008fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fc:	4a38      	ldr	r2, [pc, #224]	@ (80009e0 <I2C_Init+0xec>)
 80008fe:	f043 0302 	orr.w	r3, r3, #2
 8000902:	6313      	str	r3, [r2, #48]	@ 0x30

	// Configure GPIO pins for I2C (Alternate Function, Open Drain)
	// Set  PB8 and PB9 mode to alternate function [10] for I2C1
	GPIOB->MODER |= (1U<<17);
 8000904:	4b37      	ldr	r3, [pc, #220]	@ (80009e4 <I2C_Init+0xf0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a36      	ldr	r2, [pc, #216]	@ (80009e4 <I2C_Init+0xf0>)
 800090a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800090e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<16);
 8000910:	4b34      	ldr	r3, [pc, #208]	@ (80009e4 <I2C_Init+0xf0>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a33      	ldr	r2, [pc, #204]	@ (80009e4 <I2C_Init+0xf0>)
 8000916:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800091a:	6013      	str	r3, [r2, #0]

	GPIOB->MODER |= (1U<<19);
 800091c:	4b31      	ldr	r3, [pc, #196]	@ (80009e4 <I2C_Init+0xf0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a30      	ldr	r2, [pc, #192]	@ (80009e4 <I2C_Init+0xf0>)
 8000922:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000926:	6013      	str	r3, [r2, #0]
	GPIOB->MODER &= ~(1U<<18);
 8000928:	4b2e      	ldr	r3, [pc, #184]	@ (80009e4 <I2C_Init+0xf0>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a2d      	ldr	r2, [pc, #180]	@ (80009e4 <I2C_Init+0xf0>)
 800092e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000932:	6013      	str	r3, [r2, #0]

	// Configure Open-Drain output type
	GPIOB->OTYPER |= AC_GPIOB_OTYPER_OT8; // Output open drain pin 8
 8000934:	4b2b      	ldr	r3, [pc, #172]	@ (80009e4 <I2C_Init+0xf0>)
 8000936:	685b      	ldr	r3, [r3, #4]
 8000938:	4a2a      	ldr	r2, [pc, #168]	@ (80009e4 <I2C_Init+0xf0>)
 800093a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800093e:	6053      	str	r3, [r2, #4]
	GPIOB->OTYPER |= AC_GPIOB_OTYPER_OT9; // Output open drain pin 9
 8000940:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <I2C_Init+0xf0>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	4a27      	ldr	r2, [pc, #156]	@ (80009e4 <I2C_Init+0xf0>)
 8000946:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800094a:	6053      	str	r3, [r2, #4]

	// Enable Pull-up [01] for PB8 and PB9
	GPIOB->PUPDR &= ~(1U<<17);
 800094c:	4b25      	ldr	r3, [pc, #148]	@ (80009e4 <I2C_Init+0xf0>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	4a24      	ldr	r2, [pc, #144]	@ (80009e4 <I2C_Init+0xf0>)
 8000952:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000956:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1U<<16);
 8000958:	4b22      	ldr	r3, [pc, #136]	@ (80009e4 <I2C_Init+0xf0>)
 800095a:	68db      	ldr	r3, [r3, #12]
 800095c:	4a21      	ldr	r2, [pc, #132]	@ (80009e4 <I2C_Init+0xf0>)
 800095e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000962:	60d3      	str	r3, [r2, #12]

	GPIOB->PUPDR &= ~(1U<<19);
 8000964:	4b1f      	ldr	r3, [pc, #124]	@ (80009e4 <I2C_Init+0xf0>)
 8000966:	68db      	ldr	r3, [r3, #12]
 8000968:	4a1e      	ldr	r2, [pc, #120]	@ (80009e4 <I2C_Init+0xf0>)
 800096a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800096e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (1U<<18);
 8000970:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <I2C_Init+0xf0>)
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	4a1b      	ldr	r2, [pc, #108]	@ (80009e4 <I2C_Init+0xf0>)
 8000976:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800097a:	60d3      	str	r3, [r2, #12]

	// Configure Alternate Function I2C1 (AF4) for PB8 and PB9
	// We know AF4 based on Alternate function mapping on datasheet
	GPIOB->AFR[1] |= (4U << 0);  // PB8: AFRH[3:0]
 800097c:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <I2C_Init+0xf0>)
 800097e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000980:	4a18      	ldr	r2, [pc, #96]	@ (80009e4 <I2C_Init+0xf0>)
 8000982:	f043 0304 	orr.w	r3, r3, #4
 8000986:	6253      	str	r3, [r2, #36]	@ 0x24
	GPIOB->AFR[1] |= (4U << 4);  // PB9: AFRH[7:4]
 8000988:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <I2C_Init+0xf0>)
 800098a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800098c:	4a15      	ldr	r2, [pc, #84]	@ (80009e4 <I2C_Init+0xf0>)
 800098e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000992:	6253      	str	r3, [r2, #36]	@ 0x24


    // Enable clock access to I2C1 peripheral
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000994:	4b12      	ldr	r3, [pc, #72]	@ (80009e0 <I2C_Init+0xec>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000998:	4a11      	ldr	r2, [pc, #68]	@ (80009e0 <I2C_Init+0xec>)
 800099a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800099e:	6413      	str	r3, [r2, #64]	@ 0x40

    // RESET I2C1
	// 1. Enter RESET Mode then immediately come out of RESET
	I2C1->CR1 |= I2C_CR1_SWRST;
 80009a0:	4b11      	ldr	r3, [pc, #68]	@ (80009e8 <I2C_Init+0xf4>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a10      	ldr	r2, [pc, #64]	@ (80009e8 <I2C_Init+0xf4>)
 80009a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009aa:	6013      	str	r3, [r2, #0]
	I2C1->CR1 &= ~I2C_CR1_SWRST;
 80009ac:	4b0e      	ldr	r3, [pc, #56]	@ (80009e8 <I2C_Init+0xf4>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0d      	ldr	r2, [pc, #52]	@ (80009e8 <I2C_Init+0xf4>)
 80009b2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80009b6:	6013      	str	r3, [r2, #0]

	// 2. Set clock Frequency to 16 MHz
	I2C1->CR2 = 16U; //I2C1->CR2 |= (1U<<4); //FREQ[5:0] ==> (1U<<4) = 0b0100 = 16
 80009b8:	4b0b      	ldr	r3, [pc, #44]	@ (80009e8 <I2C_Init+0xf4>)
 80009ba:	2210      	movs	r2, #16
 80009bc:	605a      	str	r2, [r3, #4]
	 *
	 * TRISE = (Maximum rise time/ T_PCLK1) + 1
	 * TRISE = (1000 ns / 62.5 ns) + 1
	 * TRISE = 16 + 1 = 17
	 * */
	I2C1->CCR = I2C_100KHZ;
 80009be:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <I2C_Init+0xf4>)
 80009c0:	2250      	movs	r2, #80	@ 0x50
 80009c2:	61da      	str	r2, [r3, #28]

	// 4. Set rise time
	I2C1->TRISE = SD_MODE_MAX_RISE_TIME;
 80009c4:	4b08      	ldr	r3, [pc, #32]	@ (80009e8 <I2C_Init+0xf4>)
 80009c6:	2211      	movs	r2, #17
 80009c8:	621a      	str	r2, [r3, #32]

	// 5. Enable I2C peripheral
	I2C1->CR1 |= I2C_CR1_PE;
 80009ca:	4b07      	ldr	r3, [pc, #28]	@ (80009e8 <I2C_Init+0xf4>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a06      	ldr	r2, [pc, #24]	@ (80009e8 <I2C_Init+0xf4>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6013      	str	r3, [r2, #0]
}
 80009d6:	bf00      	nop
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	40023800 	.word	0x40023800
 80009e4:	40020400 	.word	0x40020400
 80009e8:	40005400 	.word	0x40005400

080009ec <I2C_Mem_Write>:
	    // 6. Re-enable ACK for future transfers
	    I2C1->CR1 |= I2C_CR1_ACK;
}


void I2C_Mem_Write(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	603a      	str	r2, [r7, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
 80009fa:	460b      	mov	r3, r1
 80009fc:	71bb      	strb	r3, [r7, #6]
 80009fe:	4613      	mov	r3, r2
 8000a00:	80bb      	strh	r3, [r7, #4]
    // Send register address, then write data

	// 1. Generate a START condition (set the START bit in CR1)
	I2C1->CR1 |= I2C_CR1_START;
 8000a02:	4b2b      	ldr	r3, [pc, #172]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a2a      	ldr	r2, [pc, #168]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a0c:	6013      	str	r3, [r2, #0]

	// 2. Wait until the SB (Start Bit) flag is set in SR1
	while(!(I2C1->SR1 & I2C_SR1_SB)){}
 8000a0e:	bf00      	nop
 8000a10:	4b27      	ldr	r3, [pc, #156]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	f003 0301 	and.w	r3, r3, #1
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d0f9      	beq.n	8000a10 <I2C_Mem_Write+0x24>

	// 3. Send the slave address with the write bit (LSB = 0)
	I2C1->DR = dev_addr << 1;
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	4a24      	ldr	r2, [pc, #144]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	6113      	str	r3, [r2, #16]

	// 4. Wait until the ADDR (Address Sent) flag is set in SR1
	while(!(I2C1->SR1 & I2C_SR1_ADDR)){}
 8000a24:	bf00      	nop
 8000a26:	4b22      	ldr	r3, [pc, #136]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0f9      	beq.n	8000a26 <I2C_Mem_Write+0x3a>

	// 5. Clear the ADDR flag by reading SR1 followed by SR2
	// To clear this flag (which is required to continue the transfer):
	(void)I2C1->SR1; // Read SR1
 8000a32:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a34:	695b      	ldr	r3, [r3, #20]
	(void)I2C1->SR2; // Then immediately after read SR2
 8000a36:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a38:	699b      	ldr	r3, [r3, #24]

	// 6. Send the memory/register address (mem_addr)
	while(!(I2C1->SR1 & I2C_SR1_TXE)); // Must wait for TXE before sending register address
 8000a3a:	bf00      	nop
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d0f9      	beq.n	8000a3c <I2C_Mem_Write+0x50>
	I2C1->DR = reg_addr;
 8000a48:	4a19      	ldr	r2, [pc, #100]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a4a:	79bb      	ldrb	r3, [r7, #6]
 8000a4c:	6113      	str	r3, [r2, #16]

	// 8. Loop through the data array:
	//    For each byte:
	//    a. Wait until TXE is set
	//    b. Write the byte to the DR register
	for(int i = 0; i < len; i++){
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	e00f      	b.n	8000a74 <I2C_Mem_Write+0x88>

		while(!(I2C1->SR1 & I2C_SR1_TXE)){}
 8000a54:	bf00      	nop
 8000a56:	4b16      	ldr	r3, [pc, #88]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a58:	695b      	ldr	r3, [r3, #20]
 8000a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d0f9      	beq.n	8000a56 <I2C_Mem_Write+0x6a>

		I2C1->DR = data[i]; // Write the current byte to the DR register
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	683a      	ldr	r2, [r7, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	781a      	ldrb	r2, [r3, #0]
 8000a6a:	4b11      	ldr	r3, [pc, #68]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a6c:	611a      	str	r2, [r3, #16]
	for(int i = 0; i < len; i++){
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	3301      	adds	r3, #1
 8000a72:	60fb      	str	r3, [r7, #12]
 8000a74:	88bb      	ldrh	r3, [r7, #4]
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	429a      	cmp	r2, r3
 8000a7a:	dbeb      	blt.n	8000a54 <I2C_Mem_Write+0x68>
	}

	// 9. After all bytes are sent, wait until BTF (Byte Transfer Finished) flag is set (optional but recommended)
	while(!(I2C1->SR1 & I2C_SR1_TXE)){}
 8000a7c:	bf00      	nop
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d0f9      	beq.n	8000a7e <I2C_Mem_Write+0x92>
	while(!(I2C1->SR1 & I2C_SR1_BTF)){}
 8000a8a:	bf00      	nop
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	f003 0304 	and.w	r3, r3, #4
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d0f9      	beq.n	8000a8c <I2C_Mem_Write+0xa0>

	// 10. Generate a STOP condition (set the STOP bit in CR1)
	I2C1->CR1 |= I2C_CR1_STOP;
 8000a98:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a04      	ldr	r2, [pc, #16]	@ (8000ab0 <I2C_Mem_Write+0xc4>)
 8000a9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000aa2:	6013      	str	r3, [r2, #0]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	40005400 	.word	0x40005400

08000ab4 <I2C_Mem_Read>:

void I2C_Mem_Read(uint8_t dev_addr, uint8_t reg_addr, uint8_t *data, uint16_t len) {
 8000ab4:	b480      	push	{r7}
 8000ab6:	b085      	sub	sp, #20
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	603a      	str	r2, [r7, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4603      	mov	r3, r0
 8000ac0:	71fb      	strb	r3, [r7, #7]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	71bb      	strb	r3, [r7, #6]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	80bb      	strh	r3, [r7, #4]
	// Send register address, then read data (Combined Transaction)

		// ====== Phase 1: Write the register address to read from ======

		// 1. Generate a START condition
		I2C1->CR1 |= I2C_CR1_START;
 8000aca:	4b40      	ldr	r3, [pc, #256]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a3f      	ldr	r2, [pc, #252]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000ad0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ad4:	6013      	str	r3, [r2, #0]
		while(!(I2C1->SR1 & I2C_SR1_SB));
 8000ad6:	bf00      	nop
 8000ad8:	4b3c      	ldr	r3, [pc, #240]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000ada:	695b      	ldr	r3, [r3, #20]
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d0f9      	beq.n	8000ad8 <I2C_Mem_Read+0x24>

		// 2. Send the slave address with the WRITE bit
		I2C1->DR = dev_addr << 1;
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	4a39      	ldr	r2, [pc, #228]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000ae8:	005b      	lsls	r3, r3, #1
 8000aea:	6113      	str	r3, [r2, #16]
		while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000aec:	bf00      	nop
 8000aee:	4b37      	ldr	r3, [pc, #220]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000af0:	695b      	ldr	r3, [r3, #20]
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0f9      	beq.n	8000aee <I2C_Mem_Read+0x3a>

		// 3. Clear the ADDR flag
		(void)I2C1->SR1;
 8000afa:	4b34      	ldr	r3, [pc, #208]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000afc:	695b      	ldr	r3, [r3, #20]
		(void)I2C1->SR2;
 8000afe:	4b33      	ldr	r3, [pc, #204]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b00:	699b      	ldr	r3, [r3, #24]

		// 4. Send the memory/register address
		while(!(I2C1->SR1 & I2C_SR1_TXE));
 8000b02:	bf00      	nop
 8000b04:	4b31      	ldr	r3, [pc, #196]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b06:	695b      	ldr	r3, [r3, #20]
 8000b08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d0f9      	beq.n	8000b04 <I2C_Mem_Read+0x50>
		I2C1->DR = reg_addr;
 8000b10:	4a2e      	ldr	r2, [pc, #184]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b12:	79bb      	ldrb	r3, [r7, #6]
 8000b14:	6113      	str	r3, [r2, #16]

		// 5. Wait for TXE flag to set, indicating address is sent
		while(!(I2C1->SR1 & I2C_SR1_TXE));
 8000b16:	bf00      	nop
 8000b18:	4b2c      	ldr	r3, [pc, #176]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b1a:	695b      	ldr	r3, [r3, #20]
 8000b1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d0f9      	beq.n	8000b18 <I2C_Mem_Read+0x64>


		// ====== Phase 2: Read data from the specified register ======

		// 6. Generate a REPEATED START condition
		I2C1->CR1 |= I2C_CR1_START;
 8000b24:	4b29      	ldr	r3, [pc, #164]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a28      	ldr	r2, [pc, #160]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b2e:	6013      	str	r3, [r2, #0]
		while(!(I2C1->SR1 & I2C_SR1_SB));
 8000b30:	bf00      	nop
 8000b32:	4b26      	ldr	r3, [pc, #152]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b34:	695b      	ldr	r3, [r3, #20]
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0f9      	beq.n	8000b32 <I2C_Mem_Read+0x7e>

		// 7. Send the slave address with the READ bit
		I2C1->DR = (dev_addr << 1) | 1;
 8000b3e:	79fb      	ldrb	r3, [r7, #7]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	f043 0201 	orr.w	r2, r3, #1
 8000b46:	4b21      	ldr	r3, [pc, #132]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b48:	611a      	str	r2, [r3, #16]
		while(!(I2C1->SR1 & I2C_SR1_ADDR));
 8000b4a:	bf00      	nop
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	f003 0302 	and.w	r3, r3, #2
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d0f9      	beq.n	8000b4c <I2C_Mem_Read+0x98>

		// 8. Clear the ADDR flag
		(void)I2C1->SR1;
 8000b58:	4b1c      	ldr	r3, [pc, #112]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b5a:	695b      	ldr	r3, [r3, #20]
		(void)I2C1->SR2;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b5e:	699b      	ldr	r3, [r3, #24]

		// 9. Read the data bytes (using the same logic as I2C_Read)
	    // FIX: Use the corrected read logic here as well.
	    for (int i = 0; i < len; i++) {
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e021      	b.n	8000baa <I2C_Mem_Read+0xf6>
	        if (i == len - 1) {
 8000b66:	88bb      	ldrh	r3, [r7, #4]
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	68fa      	ldr	r2, [r7, #12]
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d10b      	bne.n	8000b88 <I2C_Mem_Read+0xd4>
	            // For the last byte, NACK it and STOP.
	            I2C1->CR1 &= ~I2C_CR1_ACK;
 8000b70:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a15      	ldr	r2, [pc, #84]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000b7a:	6013      	str	r3, [r2, #0]
	            I2C1->CR1 |= I2C_CR1_STOP;
 8000b7c:	4b13      	ldr	r3, [pc, #76]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a12      	ldr	r2, [pc, #72]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b82:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b86:	6013      	str	r3, [r2, #0]
	        }

	        while(!(I2C1->SR1 & I2C_SR1_RXNE));
 8000b88:	bf00      	nop
 8000b8a:	4b10      	ldr	r3, [pc, #64]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b8c:	695b      	ldr	r3, [r3, #20]
 8000b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d0f9      	beq.n	8000b8a <I2C_Mem_Read+0xd6>
	        data[i] = I2C1->DR;
 8000b96:	4b0d      	ldr	r3, [pc, #52]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000b98:	6919      	ldr	r1, [r3, #16]
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	b2ca      	uxtb	r2, r1
 8000ba2:	701a      	strb	r2, [r3, #0]
	    for (int i = 0; i < len; i++) {
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	88bb      	ldrh	r3, [r7, #4]
 8000bac:	68fa      	ldr	r2, [r7, #12]
 8000bae:	429a      	cmp	r2, r3
 8000bb0:	dbd9      	blt.n	8000b66 <I2C_Mem_Read+0xb2>
	    }

	    // 10. Re-enable ACK for future transfers
	    I2C1->CR1 |= I2C_CR1_ACK;
 8000bb2:	4b06      	ldr	r3, [pc, #24]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4a05      	ldr	r2, [pc, #20]	@ (8000bcc <I2C_Mem_Read+0x118>)
 8000bb8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bbc:	6013      	str	r3, [r2, #0]
}
 8000bbe:	bf00      	nop
 8000bc0:	3714      	adds	r7, #20
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40005400 	.word	0x40005400

08000bd0 <FPU_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Enabling FPU (Floating Point Unit)
void FPU_Init(void){
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
	SCB->CPACR |= (0xF<<20); // Enable full access to CP10 and CP11
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <FPU_Init+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	@ (8000bf0 <FPU_Init+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf8:	f000 fcee 	bl	80015d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  FPU_Init();
 8000bfc:	f7ff ffe8 	bl	8000bd0 <FPU_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c00:	f000 f81c 	bl	8000c3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c04:	f7ff fe4e 	bl	80008a4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c08:	f7ff fd2c 	bl	8000664 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c0c:	f000 fbd8 	bl	80013c0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000c10:	f000 fbac 	bl	800136c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  I2C_Init();
 8000c14:	f7ff fe6e 	bl	80008f4 <I2C_Init>
  //UART2_Init(115200); // UART2 for serial monitor
  //UART1_Init(115200); // UART1 for iBUS
  MPU6050_Init();
 8000c18:	f000 f89a 	bl	8000d50 <MPU6050_Init>

  MPU6050_Calibrate();
 8000c1c:	f000 f92a 	bl	8000e74 <MPU6050_Calibrate>
  ComplementaryFilter_Init(&imu_CA);
 8000c20:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <main+0x44>)
 8000c22:	f7ff fc8b 	bl	800053c <ComplementaryFilter_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c26:	f003 fe87 	bl	8004938 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000c2a:	f7ff fd3b 	bl	80006a4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c2e:	f003 fea7 	bl	8004980 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c32:	bf00      	nop
 8000c34:	e7fd      	b.n	8000c32 <main+0x3e>
 8000c36:	bf00      	nop
 8000c38:	20000090 	.word	0x20000090

08000c3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b094      	sub	sp, #80	@ 0x50
 8000c40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c42:	f107 031c 	add.w	r3, r7, #28
 8000c46:	2234      	movs	r2, #52	@ 0x34
 8000c48:	2100      	movs	r1, #0
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f006 ff94 	bl	8007b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c50:	f107 0308 	add.w	r3, r7, #8
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c60:	2300      	movs	r3, #0
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	4b2c      	ldr	r3, [pc, #176]	@ (8000d18 <SystemClock_Config+0xdc>)
 8000c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c68:	4a2b      	ldr	r2, [pc, #172]	@ (8000d18 <SystemClock_Config+0xdc>)
 8000c6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c70:	4b29      	ldr	r3, [pc, #164]	@ (8000d18 <SystemClock_Config+0xdc>)
 8000c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c78:	607b      	str	r3, [r7, #4]
 8000c7a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	603b      	str	r3, [r7, #0]
 8000c80:	4b26      	ldr	r3, [pc, #152]	@ (8000d1c <SystemClock_Config+0xe0>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a25      	ldr	r2, [pc, #148]	@ (8000d1c <SystemClock_Config+0xe0>)
 8000c86:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b23      	ldr	r3, [pc, #140]	@ (8000d1c <SystemClock_Config+0xe0>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c94:	603b      	str	r3, [r7, #0]
 8000c96:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000c9c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000ca0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ca2:	2302      	movs	r3, #2
 8000ca4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ca6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000caa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000cac:	2304      	movs	r3, #4
 8000cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000cb0:	23b4      	movs	r3, #180	@ 0xb4
 8000cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f001 ff0d 	bl	8002ae4 <HAL_RCC_OscConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000cd0:	f000 f838 	bl	8000d44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cd4:	f001 fb3a 	bl	800234c <HAL_PWREx_EnableOverDrive>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000cde:	f000 f831 	bl	8000d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ce2:	230f      	movs	r3, #15
 8000ce4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000cf8:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000cfa:	f107 0308 	add.w	r3, r7, #8
 8000cfe:	2105      	movs	r1, #5
 8000d00:	4618      	mov	r0, r3
 8000d02:	f001 fb73 	bl	80023ec <HAL_RCC_ClockConfig>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000d0c:	f000 f81a 	bl	8000d44 <Error_Handler>
  }
}
 8000d10:	bf00      	nop
 8000d12:	3750      	adds	r7, #80	@ 0x50
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40023800 	.word	0x40023800
 8000d1c:	40007000 	.word	0x40007000

08000d20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a04      	ldr	r2, [pc, #16]	@ (8000d40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d101      	bne.n	8000d36 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d32:	f000 fc73 	bl	800161c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40001000 	.word	0x40001000

08000d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d48:	b672      	cpsid	i
}
 8000d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d4c:	bf00      	nop
 8000d4e:	e7fd      	b.n	8000d4c <Error_Handler+0x8>

08000d50 <MPU6050_Init>:

// Calibration offsets
static int16_t accel_x_offset = 0, accel_y_offset = 0, accel_z_offset = 0;
static int16_t gyro_x_offset = 0, gyro_y_offset = 0, gyro_z_offset = 0;

uint8_t MPU6050_Init(void){
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
	//Initialize the I2C peripheral
	//I2C_Init(); //Optional placement here or place in main file

	//Check the WHO_AM_I register to confirm communication with the MPU6050
	//The MPU6050's I2C address is 0x68, therefore this register should also contain 0x68
	I2C_Mem_Read(MPU6050_I2C_ADDR, MPU6050_WHO_AM_I, &check, 1);
 8000d56:	1dfa      	adds	r2, r7, #7
 8000d58:	2301      	movs	r3, #1
 8000d5a:	2175      	movs	r1, #117	@ 0x75
 8000d5c:	2068      	movs	r0, #104	@ 0x68
 8000d5e:	f7ff fea9 	bl	8000ab4 <I2C_Mem_Read>

	if(check == MPU6050_I2C_ADDR){
 8000d62:	79fb      	ldrb	r3, [r7, #7]
 8000d64:	2b68      	cmp	r3, #104	@ 0x68
 8000d66:	d121      	bne.n	8000dac <MPU6050_Init+0x5c>
		//Must wake up device by writing 0 to the Power Management 1 Register
		data = 0x00;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	71bb      	strb	r3, [r7, #6]
		I2C_Mem_Write(MPU6050_I2C_ADDR, MPUR_PWR_MGMT_1, &data, 1);
 8000d6c:	1dba      	adds	r2, r7, #6
 8000d6e:	2301      	movs	r3, #1
 8000d70:	216b      	movs	r1, #107	@ 0x6b
 8000d72:	2068      	movs	r0, #104	@ 0x68
 8000d74:	f7ff fe3a 	bl	80009ec <I2C_Mem_Write>

		// Set the sample rate. 1kHz/(1+SMPLRT_DIV)
		// Set SMPLRT_DIV to 7 for a 125Hz sample rate
		data = 0x07;
 8000d78:	2307      	movs	r3, #7
 8000d7a:	71bb      	strb	r3, [r7, #6]
		I2C_Mem_Write(MPU6050_I2C_ADDR, MPUR_SMPLRT_DIV, &data, 1);
 8000d7c:	1dba      	adds	r2, r7, #6
 8000d7e:	2301      	movs	r3, #1
 8000d80:	2119      	movs	r1, #25
 8000d82:	2068      	movs	r0, #104	@ 0x68
 8000d84:	f7ff fe32 	bl	80009ec <I2C_Mem_Write>

		// Configure the accelerometer to a full-scale range of +/- 2g
		data = 0x00;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	71bb      	strb	r3, [r7, #6]
		I2C_Mem_Write(MPU6050_I2C_ADDR, MPUR_ACCEL_CONFIG, &data, 1);
 8000d8c:	1dba      	adds	r2, r7, #6
 8000d8e:	2301      	movs	r3, #1
 8000d90:	211c      	movs	r1, #28
 8000d92:	2068      	movs	r0, #104	@ 0x68
 8000d94:	f7ff fe2a 	bl	80009ec <I2C_Mem_Write>

		// Configure the gyroscope to a full-scale range of +/- 250 degrees/sec
		data = 0x00;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	71bb      	strb	r3, [r7, #6]
		I2C_Mem_Write(MPU6050_I2C_ADDR, MPUR_GYRO_CONFIG, &data, 1);
 8000d9c:	1dba      	adds	r2, r7, #6
 8000d9e:	2301      	movs	r3, #1
 8000da0:	211b      	movs	r1, #27
 8000da2:	2068      	movs	r0, #104	@ 0x68
 8000da4:	f7ff fe22 	bl	80009ec <I2C_Mem_Write>

		return 1; // success
 8000da8:	2301      	movs	r3, #1
 8000daa:	e000      	b.n	8000dae <MPU6050_Init+0x5e>
	}

	return 0; // fail
 8000dac:	2300      	movs	r3, #0
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(int16_t *accel_x, int16_t * accel_y, int16_t *accel_z){
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b086      	sub	sp, #24
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	60f8      	str	r0, [r7, #12]
 8000dbe:	60b9      	str	r1, [r7, #8]
 8000dc0:	607a      	str	r2, [r7, #4]
	uint8_t buffer[6]; //stores raw data

	// Read 6 bytes of data starting from the ACCEL_XOUT_H register
	// Note: The MPU will automatically increment the register address after each read
	I2C_Mem_Read(MPU6050_I2C_ADDR, MPUR_ACCEL_XOUT_H, buffer, 6);
 8000dc2:	f107 0210 	add.w	r2, r7, #16
 8000dc6:	2306      	movs	r3, #6
 8000dc8:	213b      	movs	r1, #59	@ 0x3b
 8000dca:	2068      	movs	r0, #104	@ 0x68
 8000dcc:	f7ff fe72 	bl	8000ab4 <I2C_Mem_Read>

	// data is transmitted in big-endian format (MSB first)
	// we combine the high and low bytes for each axis to form a 16-bit signed integer
	*accel_x = (int16_t)(buffer[0] << 8 | buffer[1]);
 8000dd0:	7c3b      	ldrb	r3, [r7, #16]
 8000dd2:	b21b      	sxth	r3, r3
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	b21a      	sxth	r2, r3
 8000dd8:	7c7b      	ldrb	r3, [r7, #17]
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b21a      	sxth	r2, r3
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	801a      	strh	r2, [r3, #0]
	*accel_y = (int16_t)(buffer[2] << 8 | buffer[3]);
 8000de4:	7cbb      	ldrb	r3, [r7, #18]
 8000de6:	b21b      	sxth	r3, r3
 8000de8:	021b      	lsls	r3, r3, #8
 8000dea:	b21a      	sxth	r2, r3
 8000dec:	7cfb      	ldrb	r3, [r7, #19]
 8000dee:	b21b      	sxth	r3, r3
 8000df0:	4313      	orrs	r3, r2
 8000df2:	b21a      	sxth	r2, r3
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	801a      	strh	r2, [r3, #0]
	*accel_z = (int16_t)(buffer[4] << 8 | buffer[5]);
 8000df8:	7d3b      	ldrb	r3, [r7, #20]
 8000dfa:	b21b      	sxth	r3, r3
 8000dfc:	021b      	lsls	r3, r3, #8
 8000dfe:	b21a      	sxth	r2, r3
 8000e00:	7d7b      	ldrb	r3, [r7, #21]
 8000e02:	b21b      	sxth	r3, r3
 8000e04:	4313      	orrs	r3, r2
 8000e06:	b21a      	sxth	r2, r3
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	801a      	strh	r2, [r3, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(int16_t *gyro_x, int16_t *gyro_y, int16_t *gyro_z){
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
	uint8_t buffer[6];

	I2C_Mem_Read(MPU6050_I2C_ADDR, MPUR_GYRO_XOUT_H, buffer, 6);
 8000e20:	f107 0210 	add.w	r2, r7, #16
 8000e24:	2306      	movs	r3, #6
 8000e26:	2143      	movs	r1, #67	@ 0x43
 8000e28:	2068      	movs	r0, #104	@ 0x68
 8000e2a:	f7ff fe43 	bl	8000ab4 <I2C_Mem_Read>

	*gyro_x = (int16_t)(buffer[0] << 8 | buffer[1]);
 8000e2e:	7c3b      	ldrb	r3, [r7, #16]
 8000e30:	b21b      	sxth	r3, r3
 8000e32:	021b      	lsls	r3, r3, #8
 8000e34:	b21a      	sxth	r2, r3
 8000e36:	7c7b      	ldrb	r3, [r7, #17]
 8000e38:	b21b      	sxth	r3, r3
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	801a      	strh	r2, [r3, #0]
	*gyro_y = (int16_t)(buffer[2] << 8 | buffer[3]);
 8000e42:	7cbb      	ldrb	r3, [r7, #18]
 8000e44:	b21b      	sxth	r3, r3
 8000e46:	021b      	lsls	r3, r3, #8
 8000e48:	b21a      	sxth	r2, r3
 8000e4a:	7cfb      	ldrb	r3, [r7, #19]
 8000e4c:	b21b      	sxth	r3, r3
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	68bb      	ldr	r3, [r7, #8]
 8000e54:	801a      	strh	r2, [r3, #0]
	*gyro_z = (int16_t)(buffer[4] << 8 | buffer[5]);
 8000e56:	7d3b      	ldrb	r3, [r7, #20]
 8000e58:	b21b      	sxth	r3, r3
 8000e5a:	021b      	lsls	r3, r3, #8
 8000e5c:	b21a      	sxth	r2, r3
 8000e5e:	7d7b      	ldrb	r3, [r7, #21]
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b21a      	sxth	r2, r3
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	801a      	strh	r2, [r3, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	3718      	adds	r7, #24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <MPU6050_Calibrate>:


void MPU6050_Calibrate(void){
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	@ 0x28
 8000e78:	af00      	add	r7, sp, #0
	// Calibrate accel
	int32_t sum_x = 0, sum_y = 0, sum_z = 0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
	const int samples = 500;
 8000e86:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000e8a:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < samples; i++) {
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	e01d      	b.n	8000ece <MPU6050_Calibrate+0x5a>
		int16_t ax, ay, az;
		MPU6050_Read_Accel(&ax, &ay, &az);
 8000e92:	f107 020a 	add.w	r2, r7, #10
 8000e96:	f107 010c 	add.w	r1, r7, #12
 8000e9a:	f107 030e 	add.w	r3, r7, #14
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff ff89 	bl	8000db6 <MPU6050_Read_Accel>
		sum_x += ax;
 8000ea4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000eac:	4413      	add	r3, r2
 8000eae:	627b      	str	r3, [r7, #36]	@ 0x24
		sum_y += ay;
 8000eb0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	6a3b      	ldr	r3, [r7, #32]
 8000eb8:	4413      	add	r3, r2
 8000eba:	623b      	str	r3, [r7, #32]
		sum_z += az;
 8000ebc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < samples; i++) {
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	61bb      	str	r3, [r7, #24]
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	dbdd      	blt.n	8000e92 <MPU6050_Calibrate+0x1e>
	}
	accel_x_offset = sum_x / samples;
 8000ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ede:	b21a      	sxth	r2, r3
 8000ee0:	4b2a      	ldr	r3, [pc, #168]	@ (8000f8c <MPU6050_Calibrate+0x118>)
 8000ee2:	801a      	strh	r2, [r3, #0]
	accel_y_offset = sum_y / samples;
 8000ee4:	6a3a      	ldr	r2, [r7, #32]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	fb92 f3f3 	sdiv	r3, r2, r3
 8000eec:	b21a      	sxth	r2, r3
 8000eee:	4b28      	ldr	r3, [pc, #160]	@ (8000f90 <MPU6050_Calibrate+0x11c>)
 8000ef0:	801a      	strh	r2, [r3, #0]
	accel_z_offset = (sum_z / samples) - 16384; // Optional: subtract 16384 if you want "0g at rest"
 8000ef2:	69fa      	ldr	r2, [r7, #28]
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	fb92 f3f3 	sdiv	r3, r2, r3
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	4b23      	ldr	r3, [pc, #140]	@ (8000f94 <MPU6050_Calibrate+0x120>)
 8000f06:	801a      	strh	r2, [r3, #0]

	// Calibrate gyro
	sum_x = sum_y = sum_z = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	623b      	str	r3, [r7, #32]
 8000f10:	6a3b      	ldr	r3, [r7, #32]
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
	for (int i = 0; i < samples; i++) {
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e01b      	b.n	8000f52 <MPU6050_Calibrate+0xde>
		int16_t gx, gy, gz;
		MPU6050_Read_Gyro(&gx, &gy, &gz);
 8000f1a:	1d3a      	adds	r2, r7, #4
 8000f1c:	1db9      	adds	r1, r7, #6
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff76 	bl	8000e14 <MPU6050_Read_Gyro>
		sum_x += gx;
 8000f28:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f30:	4413      	add	r3, r2
 8000f32:	627b      	str	r3, [r7, #36]	@ 0x24
		sum_y += gy;
 8000f34:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	6a3b      	ldr	r3, [r7, #32]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	623b      	str	r3, [r7, #32]
		sum_z += gz;
 8000f40:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f44:	461a      	mov	r2, r3
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	4413      	add	r3, r2
 8000f4a:	61fb      	str	r3, [r7, #28]
	for (int i = 0; i < samples; i++) {
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3301      	adds	r3, #1
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dbdf      	blt.n	8000f1a <MPU6050_Calibrate+0xa6>
	}
	gyro_x_offset = sum_x / samples;
 8000f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f62:	b21a      	sxth	r2, r3
 8000f64:	4b0c      	ldr	r3, [pc, #48]	@ (8000f98 <MPU6050_Calibrate+0x124>)
 8000f66:	801a      	strh	r2, [r3, #0]
	gyro_y_offset = sum_y / samples;
 8000f68:	6a3a      	ldr	r2, [r7, #32]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f70:	b21a      	sxth	r2, r3
 8000f72:	4b0a      	ldr	r3, [pc, #40]	@ (8000f9c <MPU6050_Calibrate+0x128>)
 8000f74:	801a      	strh	r2, [r3, #0]
	gyro_z_offset = sum_z / samples;
 8000f76:	69fa      	ldr	r2, [r7, #28]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000f7e:	b21a      	sxth	r2, r3
 8000f80:	4b07      	ldr	r3, [pc, #28]	@ (8000fa0 <MPU6050_Calibrate+0x12c>)
 8000f82:	801a      	strh	r2, [r3, #0]
}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	@ 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	200000d0 	.word	0x200000d0
 8000f90:	200000d2 	.word	0x200000d2
 8000f94:	200000d4 	.word	0x200000d4
 8000f98:	200000d6 	.word	0x200000d6
 8000f9c:	200000d8 	.word	0x200000d8
 8000fa0:	200000da 	.word	0x200000da

08000fa4 <MPU6050_Read_Calibrated>:


void MPU6050_Read_Calibrated(float *ax_g_out, float *ay_g_out, float *az_g_out, float *gx_dps_out, float *gy_dps_out, float *gz_dps_out){
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b08a      	sub	sp, #40	@ 0x28
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
 8000fb0:	603b      	str	r3, [r7, #0]
	 int16_t accel_x, accel_y, accel_z;
	    int16_t gyro_x, gyro_y, gyro_z;

	    MPU6050_Read_Accel(&accel_x, &accel_y, &accel_z);
 8000fb2:	f107 0216 	add.w	r2, r7, #22
 8000fb6:	f107 0118 	add.w	r1, r7, #24
 8000fba:	f107 031a 	add.w	r3, r7, #26
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fef9 	bl	8000db6 <MPU6050_Read_Accel>
	    MPU6050_Read_Gyro(&gyro_x, &gyro_y, &gyro_z);
 8000fc4:	f107 0210 	add.w	r2, r7, #16
 8000fc8:	f107 0112 	add.w	r1, r7, #18
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff1f 	bl	8000e14 <MPU6050_Read_Gyro>

	    // Offset correction
	    int16_t axc = accel_x - accel_x_offset;
 8000fd6:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fda:	b29a      	uxth	r2, r3
 8000fdc:	4b45      	ldr	r3, [pc, #276]	@ (80010f4 <MPU6050_Read_Calibrated+0x150>)
 8000fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fe2:	b29b      	uxth	r3, r3
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	84fb      	strh	r3, [r7, #38]	@ 0x26
	    int16_t ayc = accel_y - accel_y_offset;
 8000fea:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8000fee:	b29a      	uxth	r2, r3
 8000ff0:	4b41      	ldr	r3, [pc, #260]	@ (80010f8 <MPU6050_Read_Calibrated+0x154>)
 8000ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	1ad3      	subs	r3, r2, r3
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	84bb      	strh	r3, [r7, #36]	@ 0x24
	    int16_t azc = accel_z - accel_z_offset;
 8000ffe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001002:	b29a      	uxth	r2, r3
 8001004:	4b3d      	ldr	r3, [pc, #244]	@ (80010fc <MPU6050_Read_Calibrated+0x158>)
 8001006:	f9b3 3000 	ldrsh.w	r3, [r3]
 800100a:	b29b      	uxth	r3, r3
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	b29b      	uxth	r3, r3
 8001010:	847b      	strh	r3, [r7, #34]	@ 0x22

	    int16_t gxc = gyro_x - gyro_x_offset;
 8001012:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b39      	ldr	r3, [pc, #228]	@ (8001100 <MPU6050_Read_Calibrated+0x15c>)
 800101a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800101e:	b29b      	uxth	r3, r3
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	b29b      	uxth	r3, r3
 8001024:	843b      	strh	r3, [r7, #32]
	    int16_t gyc = gyro_y - gyro_y_offset;
 8001026:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800102a:	b29a      	uxth	r2, r3
 800102c:	4b35      	ldr	r3, [pc, #212]	@ (8001104 <MPU6050_Read_Calibrated+0x160>)
 800102e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001032:	b29b      	uxth	r3, r3
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	b29b      	uxth	r3, r3
 8001038:	83fb      	strh	r3, [r7, #30]
	    int16_t gzc = gyro_z - gyro_z_offset;
 800103a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800103e:	b29a      	uxth	r2, r3
 8001040:	4b31      	ldr	r3, [pc, #196]	@ (8001108 <MPU6050_Read_Calibrated+0x164>)
 8001042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001046:	b29b      	uxth	r3, r3
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	b29b      	uxth	r3, r3
 800104c:	83bb      	strh	r3, [r7, #28]

	    // Normalization
	    *ax_g_out = axc / 16384.0f;
 800104e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001052:	ee07 3a90 	vmov	s15, r3
 8001056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800105a:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 800110c <MPU6050_Read_Calibrated+0x168>
 800105e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	edc3 7a00 	vstr	s15, [r3]
	    *ay_g_out = ayc / 16384.0f;
 8001068:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001074:	eddf 6a25 	vldr	s13, [pc, #148]	@ 800110c <MPU6050_Read_Calibrated+0x168>
 8001078:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	edc3 7a00 	vstr	s15, [r3]
	    *az_g_out = azc / 16384.0f;
 8001082:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001086:	ee07 3a90 	vmov	s15, r3
 800108a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800108e:	eddf 6a1f 	vldr	s13, [pc, #124]	@ 800110c <MPU6050_Read_Calibrated+0x168>
 8001092:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	edc3 7a00 	vstr	s15, [r3]

	    *gx_dps_out = gxc / 131.0f;
 800109c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80010a0:	ee07 3a90 	vmov	s15, r3
 80010a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010a8:	eddf 6a19 	vldr	s13, [pc, #100]	@ 8001110 <MPU6050_Read_Calibrated+0x16c>
 80010ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	edc3 7a00 	vstr	s15, [r3]
	    *gy_dps_out = gyc / 131.0f;
 80010b6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80010ba:	ee07 3a90 	vmov	s15, r3
 80010be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010c2:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8001110 <MPU6050_Read_Calibrated+0x16c>
 80010c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80010cc:	edc3 7a00 	vstr	s15, [r3]
	    *gz_dps_out = gzc / 131.0f;
 80010d0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80010d4:	ee07 3a90 	vmov	s15, r3
 80010d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010dc:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001110 <MPU6050_Read_Calibrated+0x16c>
 80010e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010e6:	edc3 7a00 	vstr	s15, [r3]
}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	@ 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200000d0 	.word	0x200000d0
 80010f8:	200000d2 	.word	0x200000d2
 80010fc:	200000d4 	.word	0x200000d4
 8001100:	200000d6 	.word	0x200000d6
 8001104:	200000d8 	.word	0x200000d8
 8001108:	200000da 	.word	0x200000da
 800110c:	46800000 	.word	0x46800000
 8001110:	43030000 	.word	0x43030000

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	607b      	str	r3, [r7, #4]
 800111e:	4b12      	ldr	r3, [pc, #72]	@ (8001168 <HAL_MspInit+0x54>)
 8001120:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001122:	4a11      	ldr	r2, [pc, #68]	@ (8001168 <HAL_MspInit+0x54>)
 8001124:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001128:	6453      	str	r3, [r2, #68]	@ 0x44
 800112a:	4b0f      	ldr	r3, [pc, #60]	@ (8001168 <HAL_MspInit+0x54>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800112e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	603b      	str	r3, [r7, #0]
 800113a:	4b0b      	ldr	r3, [pc, #44]	@ (8001168 <HAL_MspInit+0x54>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800113e:	4a0a      	ldr	r2, [pc, #40]	@ (8001168 <HAL_MspInit+0x54>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	@ 0x40
 8001146:	4b08      	ldr	r3, [pc, #32]	@ (8001168 <HAL_MspInit+0x54>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800114e:	603b      	str	r3, [r7, #0]
 8001150:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	210f      	movs	r1, #15
 8001156:	f06f 0001 	mvn.w	r0, #1
 800115a:	f000 fb37 	bl	80017cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08e      	sub	sp, #56	@ 0x38
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001174:	2300      	movs	r3, #0
 8001176:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	60fb      	str	r3, [r7, #12]
 8001180:	4b33      	ldr	r3, [pc, #204]	@ (8001250 <HAL_InitTick+0xe4>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	4a32      	ldr	r2, [pc, #200]	@ (8001250 <HAL_InitTick+0xe4>)
 8001186:	f043 0310 	orr.w	r3, r3, #16
 800118a:	6413      	str	r3, [r2, #64]	@ 0x40
 800118c:	4b30      	ldr	r3, [pc, #192]	@ (8001250 <HAL_InitTick+0xe4>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	f003 0310 	and.w	r3, r3, #16
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001198:	f107 0210 	add.w	r2, r7, #16
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f001 fa3c 	bl	8002620 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011a8:	6a3b      	ldr	r3, [r7, #32]
 80011aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d103      	bne.n	80011ba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011b2:	f001 fa0d 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 80011b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80011b8:	e004      	b.n	80011c4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011ba:	f001 fa09 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 80011be:	4603      	mov	r3, r0
 80011c0:	005b      	lsls	r3, r3, #1
 80011c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80011c6:	4a23      	ldr	r2, [pc, #140]	@ (8001254 <HAL_InitTick+0xe8>)
 80011c8:	fba2 2303 	umull	r2, r3, r2, r3
 80011cc:	0c9b      	lsrs	r3, r3, #18
 80011ce:	3b01      	subs	r3, #1
 80011d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80011d2:	4b21      	ldr	r3, [pc, #132]	@ (8001258 <HAL_InitTick+0xec>)
 80011d4:	4a21      	ldr	r2, [pc, #132]	@ (800125c <HAL_InitTick+0xf0>)
 80011d6:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80011d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <HAL_InitTick+0xec>)
 80011da:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80011de:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80011e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001258 <HAL_InitTick+0xec>)
 80011e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011e4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80011e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001258 <HAL_InitTick+0xec>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001258 <HAL_InitTick+0xec>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f2:	4b19      	ldr	r3, [pc, #100]	@ (8001258 <HAL_InitTick+0xec>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80011f8:	4817      	ldr	r0, [pc, #92]	@ (8001258 <HAL_InitTick+0xec>)
 80011fa:	f001 ff11 	bl	8003020 <HAL_TIM_Base_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001204:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001208:	2b00      	cmp	r3, #0
 800120a:	d11b      	bne.n	8001244 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800120c:	4812      	ldr	r0, [pc, #72]	@ (8001258 <HAL_InitTick+0xec>)
 800120e:	f001 ff61 	bl	80030d4 <HAL_TIM_Base_Start_IT>
 8001212:	4603      	mov	r3, r0
 8001214:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001218:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800121c:	2b00      	cmp	r3, #0
 800121e:	d111      	bne.n	8001244 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001220:	2036      	movs	r0, #54	@ 0x36
 8001222:	f000 faef 	bl	8001804 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2b0f      	cmp	r3, #15
 800122a:	d808      	bhi.n	800123e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800122c:	2200      	movs	r2, #0
 800122e:	6879      	ldr	r1, [r7, #4]
 8001230:	2036      	movs	r0, #54	@ 0x36
 8001232:	f000 facb 	bl	80017cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001236:	4a0a      	ldr	r2, [pc, #40]	@ (8001260 <HAL_InitTick+0xf4>)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	e002      	b.n	8001244 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001244:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001248:	4618      	mov	r0, r3
 800124a:	3738      	adds	r7, #56	@ 0x38
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	431bde83 	.word	0x431bde83
 8001258:	200000dc 	.word	0x200000dc
 800125c:	40001000 	.word	0x40001000
 8001260:	20000004 	.word	0x20000004

08001264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001264:	b480      	push	{r7}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001268:	bf00      	nop
 800126a:	e7fd      	b.n	8001268 <NMI_Handler+0x4>

0800126c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001270:	bf00      	nop
 8001272:	e7fd      	b.n	8001270 <HardFault_Handler+0x4>

08001274 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001278:	bf00      	nop
 800127a:	e7fd      	b.n	8001278 <MemManage_Handler+0x4>

0800127c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001280:	bf00      	nop
 8001282:	e7fd      	b.n	8001280 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	bf00      	nop
 800128a:	e7fd      	b.n	8001288 <UsageFault_Handler+0x4>

0800128c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
	...

0800129c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */
  // Check if the IDLE line interrupt flag is set
  if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE) != RESET){
 80012a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001310 <USART1_IRQHandler+0x74>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0310 	and.w	r3, r3, #16
 80012ac:	2b10      	cmp	r3, #16
 80012ae:	d127      	bne.n	8001300 <USART1_IRQHandler+0x64>
	  // Clear the IDLE line flag
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80012b0:	2300      	movs	r3, #0
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	4b16      	ldr	r3, [pc, #88]	@ (8001310 <USART1_IRQHandler+0x74>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	4b14      	ldr	r3, [pc, #80]	@ (8001310 <USART1_IRQHandler+0x74>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	683b      	ldr	r3, [r7, #0]

	  // Stop the DMA transfer to process the received data
	  HAL_UART_DMAStop(&huart1);
 80012c6:	4812      	ldr	r0, [pc, #72]	@ (8001310 <USART1_IRQHandler+0x74>)
 80012c8:	f002 f9bb 	bl	8003642 <HAL_UART_DMAStop>

	  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80012cc:	2300      	movs	r3, #0
 80012ce:	607b      	str	r3, [r7, #4]

	  // Give the semaphore to unblock the IBUS_Task
	  xSemaphoreGiveFromISR(ibus_rx_semaphore, &xHigherPriorityTaskWoken);
 80012d0:	4b10      	ldr	r3, [pc, #64]	@ (8001314 <USART1_IRQHandler+0x78>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	1d3a      	adds	r2, r7, #4
 80012d6:	4611      	mov	r1, r2
 80012d8:	4618      	mov	r0, r3
 80012da:	f003 fff3 	bl	80052c4 <xQueueGiveFromISR>

	  // Restart the DMA transfer for the next packet
	  HAL_UART_Receive_DMA(&huart1, ibus_dma_buffer, IBUS_PACKET_SIZE);
 80012de:	2220      	movs	r2, #32
 80012e0:	490d      	ldr	r1, [pc, #52]	@ (8001318 <USART1_IRQHandler+0x7c>)
 80012e2:	480b      	ldr	r0, [pc, #44]	@ (8001310 <USART1_IRQHandler+0x74>)
 80012e4:	f002 f988 	bl	80035f8 <HAL_UART_Receive_DMA>

	  // If giving the semaphore woek a higher priority task, yield to it
	  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00b      	beq.n	8001306 <USART1_IRQHandler+0x6a>
 80012ee:	4b0b      	ldr	r3, [pc, #44]	@ (800131c <USART1_IRQHandler+0x80>)
 80012f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	f3bf 8f4f 	dsb	sy
 80012fa:	f3bf 8f6f 	isb	sy
  }
  else{
	  HAL_UART_IRQHandler(&huart1);
  }
  /* USER CODE END USART1_IRQn 1 */
}
 80012fe:	e002      	b.n	8001306 <USART1_IRQHandler+0x6a>
	  HAL_UART_IRQHandler(&huart1);
 8001300:	4803      	ldr	r0, [pc, #12]	@ (8001310 <USART1_IRQHandler+0x74>)
 8001302:	f002 fa1d 	bl	8003740 <HAL_UART_IRQHandler>
}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	20000124 	.word	0x20000124
 8001314:	200000cc 	.word	0x200000cc
 8001318:	200000ac 	.word	0x200000ac
 800131c:	e000ed04 	.word	0xe000ed04

08001320 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001324:	4802      	ldr	r0, [pc, #8]	@ (8001330 <TIM6_DAC_IRQHandler+0x10>)
 8001326:	f001 ff45 	bl	80031b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	200000dc 	.word	0x200000dc

08001334 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <DMA2_Stream2_IRQHandler+0x10>)
 800133a:	f000 fc09 	bl	8001b50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200001b4 	.word	0x200001b4

08001348 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800134c:	4b06      	ldr	r3, [pc, #24]	@ (8001368 <SystemInit+0x20>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001352:	4a05      	ldr	r2, [pc, #20]	@ (8001368 <SystemInit+0x20>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001370:	4b11      	ldr	r3, [pc, #68]	@ (80013b8 <MX_USART1_UART_Init+0x4c>)
 8001372:	4a12      	ldr	r2, [pc, #72]	@ (80013bc <MX_USART1_UART_Init+0x50>)
 8001374:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001376:	4b10      	ldr	r3, [pc, #64]	@ (80013b8 <MX_USART1_UART_Init+0x4c>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b0e      	ldr	r3, [pc, #56]	@ (80013b8 <MX_USART1_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b0c      	ldr	r3, [pc, #48]	@ (80013b8 <MX_USART1_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800138a:	4b0b      	ldr	r3, [pc, #44]	@ (80013b8 <MX_USART1_UART_Init+0x4c>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <MX_USART1_UART_Init+0x4c>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b08      	ldr	r3, [pc, #32]	@ (80013b8 <MX_USART1_UART_Init+0x4c>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <MX_USART1_UART_Init+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80013a2:	4805      	ldr	r0, [pc, #20]	@ (80013b8 <MX_USART1_UART_Init+0x4c>)
 80013a4:	f002 f8d8 	bl	8003558 <HAL_UART_Init>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013ae:	f7ff fcc9 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000124 	.word	0x20000124
 80013bc:	40011000 	.word	0x40011000

080013c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80013c4:	4b11      	ldr	r3, [pc, #68]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013c6:	4a12      	ldr	r2, [pc, #72]	@ (8001410 <MX_USART2_UART_Init+0x50>)
 80013c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80013ca:	4b10      	ldr	r3, [pc, #64]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013de:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013e4:	4b09      	ldr	r3, [pc, #36]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013e6:	220c      	movs	r2, #12
 80013e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013f0:	4b06      	ldr	r3, [pc, #24]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013f6:	4805      	ldr	r0, [pc, #20]	@ (800140c <MX_USART2_UART_Init+0x4c>)
 80013f8:	f002 f8ae 	bl	8003558 <HAL_UART_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001402:	f7ff fc9f 	bl	8000d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	2000016c 	.word	0x2000016c
 8001410:	40004400 	.word	0x40004400

08001414 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b08c      	sub	sp, #48	@ 0x30
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a4e      	ldr	r2, [pc, #312]	@ (800156c <HAL_UART_MspInit+0x158>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d164      	bne.n	8001500 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	4b4d      	ldr	r3, [pc, #308]	@ (8001570 <HAL_UART_MspInit+0x15c>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	4a4c      	ldr	r2, [pc, #304]	@ (8001570 <HAL_UART_MspInit+0x15c>)
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	6453      	str	r3, [r2, #68]	@ 0x44
 8001446:	4b4a      	ldr	r3, [pc, #296]	@ (8001570 <HAL_UART_MspInit+0x15c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	4b46      	ldr	r3, [pc, #280]	@ (8001570 <HAL_UART_MspInit+0x15c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	4a45      	ldr	r2, [pc, #276]	@ (8001570 <HAL_UART_MspInit+0x15c>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	@ 0x30
 8001462:	4b43      	ldr	r3, [pc, #268]	@ (8001570 <HAL_UART_MspInit+0x15c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800146e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001472:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001474:	2302      	movs	r3, #2
 8001476:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147c:	2303      	movs	r3, #3
 800147e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001480:	2307      	movs	r3, #7
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001484:	f107 031c 	add.w	r3, r7, #28
 8001488:	4619      	mov	r1, r3
 800148a:	483a      	ldr	r0, [pc, #232]	@ (8001574 <HAL_UART_MspInit+0x160>)
 800148c:	f000 fdca 	bl	8002024 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001490:	4b39      	ldr	r3, [pc, #228]	@ (8001578 <HAL_UART_MspInit+0x164>)
 8001492:	4a3a      	ldr	r2, [pc, #232]	@ (800157c <HAL_UART_MspInit+0x168>)
 8001494:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001496:	4b38      	ldr	r3, [pc, #224]	@ (8001578 <HAL_UART_MspInit+0x164>)
 8001498:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800149c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800149e:	4b36      	ldr	r3, [pc, #216]	@ (8001578 <HAL_UART_MspInit+0x164>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a4:	4b34      	ldr	r3, [pc, #208]	@ (8001578 <HAL_UART_MspInit+0x164>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014aa:	4b33      	ldr	r3, [pc, #204]	@ (8001578 <HAL_UART_MspInit+0x164>)
 80014ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014b0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b2:	4b31      	ldr	r3, [pc, #196]	@ (8001578 <HAL_UART_MspInit+0x164>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b8:	4b2f      	ldr	r3, [pc, #188]	@ (8001578 <HAL_UART_MspInit+0x164>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80014be:	4b2e      	ldr	r3, [pc, #184]	@ (8001578 <HAL_UART_MspInit+0x164>)
 80014c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014c4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001578 <HAL_UART_MspInit+0x164>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001578 <HAL_UART_MspInit+0x164>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014d2:	4829      	ldr	r0, [pc, #164]	@ (8001578 <HAL_UART_MspInit+0x164>)
 80014d4:	f000 f9a4 	bl	8001820 <HAL_DMA_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80014de:	f7ff fc31 	bl	8000d44 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a24      	ldr	r2, [pc, #144]	@ (8001578 <HAL_UART_MspInit+0x164>)
 80014e6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80014e8:	4a23      	ldr	r2, [pc, #140]	@ (8001578 <HAL_UART_MspInit+0x164>)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2105      	movs	r1, #5
 80014f2:	2025      	movs	r0, #37	@ 0x25
 80014f4:	f000 f96a 	bl	80017cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014f8:	2025      	movs	r0, #37	@ 0x25
 80014fa:	f000 f983 	bl	8001804 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80014fe:	e030      	b.n	8001562 <HAL_UART_MspInit+0x14e>
  else if(uartHandle->Instance==USART2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a1e      	ldr	r2, [pc, #120]	@ (8001580 <HAL_UART_MspInit+0x16c>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d12b      	bne.n	8001562 <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	4b18      	ldr	r3, [pc, #96]	@ (8001570 <HAL_UART_MspInit+0x15c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	4a17      	ldr	r2, [pc, #92]	@ (8001570 <HAL_UART_MspInit+0x15c>)
 8001514:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001518:	6413      	str	r3, [r2, #64]	@ 0x40
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <HAL_UART_MspInit+0x15c>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b11      	ldr	r3, [pc, #68]	@ (8001570 <HAL_UART_MspInit+0x15c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a10      	ldr	r2, [pc, #64]	@ (8001570 <HAL_UART_MspInit+0x15c>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b0e      	ldr	r3, [pc, #56]	@ (8001570 <HAL_UART_MspInit+0x15c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001542:	230c      	movs	r3, #12
 8001544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001552:	2307      	movs	r3, #7
 8001554:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	@ (8001574 <HAL_UART_MspInit+0x160>)
 800155e:	f000 fd61 	bl	8002024 <HAL_GPIO_Init>
}
 8001562:	bf00      	nop
 8001564:	3730      	adds	r7, #48	@ 0x30
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	40011000 	.word	0x40011000
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000
 8001578:	200001b4 	.word	0x200001b4
 800157c:	40026440 	.word	0x40026440
 8001580:	40004400 	.word	0x40004400

08001584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001584:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001588:	f7ff fede 	bl	8001348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800158c:	480c      	ldr	r0, [pc, #48]	@ (80015c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800158e:	490d      	ldr	r1, [pc, #52]	@ (80015c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a4:	4c0a      	ldr	r4, [pc, #40]	@ (80015d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015b2:	f006 fb4d 	bl	8007c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015b6:	f7ff fb1d 	bl	8000bf4 <main>
  bx  lr    
 80015ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80015c8:	08008178 	.word	0x08008178
  ldr r2, =_sbss
 80015cc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80015d0:	20004d40 	.word	0x20004d40

080015d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d4:	e7fe      	b.n	80015d4 <ADC_IRQHandler>
	...

080015d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015dc:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <HAL_Init+0x40>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001618 <HAL_Init+0x40>)
 80015e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <HAL_Init+0x40>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a0a      	ldr	r2, [pc, #40]	@ (8001618 <HAL_Init+0x40>)
 80015ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <HAL_Init+0x40>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a07      	ldr	r2, [pc, #28]	@ (8001618 <HAL_Init+0x40>)
 80015fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001600:	2003      	movs	r0, #3
 8001602:	f000 f8d8 	bl	80017b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001606:	200f      	movs	r0, #15
 8001608:	f7ff fdb0 	bl	800116c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800160c:	f7ff fd82 	bl	8001114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023c00 	.word	0x40023c00

0800161c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001620:	4b06      	ldr	r3, [pc, #24]	@ (800163c <HAL_IncTick+0x20>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_IncTick+0x24>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4413      	add	r3, r2
 800162c:	4a04      	ldr	r2, [pc, #16]	@ (8001640 <HAL_IncTick+0x24>)
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000008 	.word	0x20000008
 8001640:	20000214 	.word	0x20000214

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b03      	ldr	r3, [pc, #12]	@ (8001658 <HAL_GetTick+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	20000214 	.word	0x20000214

0800165c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800166c:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001672:	68ba      	ldr	r2, [r7, #8]
 8001674:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001678:	4013      	ands	r3, r2
 800167a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001684:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800168c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800168e:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <__NVIC_SetPriorityGrouping+0x44>)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	60d3      	str	r3, [r2, #12]
}
 8001694:	bf00      	nop
 8001696:	3714      	adds	r7, #20
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	e000ed00 	.word	0xe000ed00

080016a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016a8:	4b04      	ldr	r3, [pc, #16]	@ (80016bc <__NVIC_GetPriorityGrouping+0x18>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	0a1b      	lsrs	r3, r3, #8
 80016ae:	f003 0307 	and.w	r3, r3, #7
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	db0b      	blt.n	80016ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	f003 021f 	and.w	r2, r3, #31
 80016d8:	4907      	ldr	r1, [pc, #28]	@ (80016f8 <__NVIC_EnableIRQ+0x38>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	095b      	lsrs	r3, r3, #5
 80016e0:	2001      	movs	r0, #1
 80016e2:	fa00 f202 	lsl.w	r2, r0, r2
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016ea:	bf00      	nop
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000e100 	.word	0xe000e100

080016fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	4603      	mov	r3, r0
 8001704:	6039      	str	r1, [r7, #0]
 8001706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170c:	2b00      	cmp	r3, #0
 800170e:	db0a      	blt.n	8001726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	b2da      	uxtb	r2, r3
 8001714:	490c      	ldr	r1, [pc, #48]	@ (8001748 <__NVIC_SetPriority+0x4c>)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	0112      	lsls	r2, r2, #4
 800171c:	b2d2      	uxtb	r2, r2
 800171e:	440b      	add	r3, r1
 8001720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001724:	e00a      	b.n	800173c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	b2da      	uxtb	r2, r3
 800172a:	4908      	ldr	r1, [pc, #32]	@ (800174c <__NVIC_SetPriority+0x50>)
 800172c:	79fb      	ldrb	r3, [r7, #7]
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	3b04      	subs	r3, #4
 8001734:	0112      	lsls	r2, r2, #4
 8001736:	b2d2      	uxtb	r2, r2
 8001738:	440b      	add	r3, r1
 800173a:	761a      	strb	r2, [r3, #24]
}
 800173c:	bf00      	nop
 800173e:	370c      	adds	r7, #12
 8001740:	46bd      	mov	sp, r7
 8001742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001746:	4770      	bx	lr
 8001748:	e000e100 	.word	0xe000e100
 800174c:	e000ed00 	.word	0xe000ed00

08001750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001750:	b480      	push	{r7}
 8001752:	b089      	sub	sp, #36	@ 0x24
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	f1c3 0307 	rsb	r3, r3, #7
 800176a:	2b04      	cmp	r3, #4
 800176c:	bf28      	it	cs
 800176e:	2304      	movcs	r3, #4
 8001770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	3304      	adds	r3, #4
 8001776:	2b06      	cmp	r3, #6
 8001778:	d902      	bls.n	8001780 <NVIC_EncodePriority+0x30>
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3b03      	subs	r3, #3
 800177e:	e000      	b.n	8001782 <NVIC_EncodePriority+0x32>
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	69bb      	ldr	r3, [r7, #24]
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	401a      	ands	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001798:	f04f 31ff 	mov.w	r1, #4294967295
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa01 f303 	lsl.w	r3, r1, r3
 80017a2:	43d9      	mvns	r1, r3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a8:	4313      	orrs	r3, r2
         );
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	3724      	adds	r7, #36	@ 0x24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr

080017b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f7ff ff4c 	bl	800165c <__NVIC_SetPriorityGrouping>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}

080017cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
 80017d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017da:	2300      	movs	r3, #0
 80017dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017de:	f7ff ff61 	bl	80016a4 <__NVIC_GetPriorityGrouping>
 80017e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	68b9      	ldr	r1, [r7, #8]
 80017e8:	6978      	ldr	r0, [r7, #20]
 80017ea:	f7ff ffb1 	bl	8001750 <NVIC_EncodePriority>
 80017ee:	4602      	mov	r2, r0
 80017f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f4:	4611      	mov	r1, r2
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff ff80 	bl	80016fc <__NVIC_SetPriority>
}
 80017fc:	bf00      	nop
 80017fe:	3718      	adds	r7, #24
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff54 	bl	80016c0 <__NVIC_EnableIRQ>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b086      	sub	sp, #24
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800182c:	f7ff ff0a 	bl	8001644 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e099      	b.n	8001970 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2202      	movs	r2, #2
 8001840:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0201 	bic.w	r2, r2, #1
 800185a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800185c:	e00f      	b.n	800187e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800185e:	f7ff fef1 	bl	8001644 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b05      	cmp	r3, #5
 800186a:	d908      	bls.n	800187e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2220      	movs	r2, #32
 8001870:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2203      	movs	r2, #3
 8001876:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e078      	b.n	8001970 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1e8      	bne.n	800185e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	4b38      	ldr	r3, [pc, #224]	@ (8001978 <HAL_DMA_Init+0x158>)
 8001898:	4013      	ands	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	699b      	ldr	r3, [r3, #24]
 80018bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a1b      	ldr	r3, [r3, #32]
 80018c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ca:	697a      	ldr	r2, [r7, #20]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d4:	2b04      	cmp	r3, #4
 80018d6:	d107      	bne.n	80018e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e0:	4313      	orrs	r3, r2
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	695b      	ldr	r3, [r3, #20]
 80018f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f023 0307 	bic.w	r3, r3, #7
 80018fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	4313      	orrs	r3, r2
 8001908:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800190e:	2b04      	cmp	r3, #4
 8001910:	d117      	bne.n	8001942 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	4313      	orrs	r3, r2
 800191a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00e      	beq.n	8001942 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f000 fb01 	bl	8001f2c <DMA_CheckFifoParam>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d008      	beq.n	8001942 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2240      	movs	r2, #64	@ 0x40
 8001934:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2201      	movs	r2, #1
 800193a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800193e:	2301      	movs	r3, #1
 8001940:	e016      	b.n	8001970 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fab8 	bl	8001ec0 <DMA_CalcBaseAndBitshift>
 8001950:	4603      	mov	r3, r0
 8001952:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001958:	223f      	movs	r2, #63	@ 0x3f
 800195a:	409a      	lsls	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2200      	movs	r2, #0
 8001964:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2201      	movs	r2, #1
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800196e:	2300      	movs	r3, #0
}
 8001970:	4618      	mov	r0, r3
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	f010803f 	.word	0xf010803f

0800197c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b086      	sub	sp, #24
 8001980:	af00      	add	r7, sp, #0
 8001982:	60f8      	str	r0, [r7, #12]
 8001984:	60b9      	str	r1, [r7, #8]
 8001986:	607a      	str	r2, [r7, #4]
 8001988:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800198a:	2300      	movs	r3, #0
 800198c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001992:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800199a:	2b01      	cmp	r3, #1
 800199c:	d101      	bne.n	80019a2 <HAL_DMA_Start_IT+0x26>
 800199e:	2302      	movs	r3, #2
 80019a0:	e040      	b.n	8001a24 <HAL_DMA_Start_IT+0xa8>
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2201      	movs	r2, #1
 80019a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d12f      	bne.n	8001a16 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	2202      	movs	r2, #2
 80019ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	f000 fa4a 	bl	8001e64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019d4:	223f      	movs	r2, #63	@ 0x3f
 80019d6:	409a      	lsls	r2, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f042 0216 	orr.w	r2, r2, #22
 80019ea:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d007      	beq.n	8001a04 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f042 0208 	orr.w	r2, r2, #8
 8001a02:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f042 0201 	orr.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	e005      	b.n	8001a22 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001a1e:	2302      	movs	r3, #2
 8001a20:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001a22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3718      	adds	r7, #24
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a38:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a3a:	f7ff fe03 	bl	8001644 <HAL_GetTick>
 8001a3e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d008      	beq.n	8001a5e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2280      	movs	r2, #128	@ 0x80
 8001a50:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e052      	b.n	8001b04 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 0216 	bic.w	r2, r2, #22
 8001a6c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a7c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d103      	bne.n	8001a8e <HAL_DMA_Abort+0x62>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d007      	beq.n	8001a9e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f022 0208 	bic.w	r2, r2, #8
 8001a9c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 0201 	bic.w	r2, r2, #1
 8001aac:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aae:	e013      	b.n	8001ad8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001ab0:	f7ff fdc8 	bl	8001644 <HAL_GetTick>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	d90c      	bls.n	8001ad8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2220      	movs	r2, #32
 8001ac2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2203      	movs	r2, #3
 8001ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e015      	b.n	8001b04 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0301 	and.w	r3, r3, #1
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1e4      	bne.n	8001ab0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aea:	223f      	movs	r2, #63	@ 0x3f
 8001aec:	409a      	lsls	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2201      	movs	r2, #1
 8001af6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}

08001b0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b1a:	b2db      	uxtb	r3, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d004      	beq.n	8001b2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2280      	movs	r2, #128	@ 0x80
 8001b24:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00c      	b.n	8001b44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	2205      	movs	r2, #5
 8001b2e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f022 0201 	bic.w	r2, r2, #1
 8001b40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b5c:	4b8e      	ldr	r3, [pc, #568]	@ (8001d98 <HAL_DMA_IRQHandler+0x248>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a8e      	ldr	r2, [pc, #568]	@ (8001d9c <HAL_DMA_IRQHandler+0x24c>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0a9b      	lsrs	r3, r3, #10
 8001b68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b7a:	2208      	movs	r2, #8
 8001b7c:	409a      	lsls	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4013      	ands	r3, r2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d01a      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d013      	beq.n	8001bbc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0204 	bic.w	r2, r2, #4
 8001ba2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ba8:	2208      	movs	r2, #8
 8001baa:	409a      	lsls	r2, r3
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb4:	f043 0201 	orr.w	r2, r3, #1
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	409a      	lsls	r2, r3
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d012      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d00b      	beq.n	8001bf2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bde:	2201      	movs	r2, #1
 8001be0:	409a      	lsls	r2, r3
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bea:	f043 0202 	orr.w	r2, r3, #2
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bf6:	2204      	movs	r2, #4
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d012      	beq.n	8001c28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0302 	and.w	r3, r3, #2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d00b      	beq.n	8001c28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c14:	2204      	movs	r2, #4
 8001c16:	409a      	lsls	r2, r3
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c20:	f043 0204 	orr.w	r2, r3, #4
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c2c:	2210      	movs	r2, #16
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d043      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d03c      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d018      	beq.n	8001c92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d108      	bne.n	8001c80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d024      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	4798      	blx	r3
 8001c7e:	e01f      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d01b      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	4798      	blx	r3
 8001c90:	e016      	b.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d107      	bne.n	8001cb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0208 	bic.w	r2, r2, #8
 8001cae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 808f 	beq.w	8001df0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0310 	and.w	r3, r3, #16
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	f000 8087 	beq.w	8001df0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	d136      	bne.n	8001d68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0216 	bic.w	r2, r2, #22
 8001d08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	695a      	ldr	r2, [r3, #20]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d103      	bne.n	8001d2a <HAL_DMA_IRQHandler+0x1da>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d007      	beq.n	8001d3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f022 0208 	bic.w	r2, r2, #8
 8001d38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d3e:	223f      	movs	r2, #63	@ 0x3f
 8001d40:	409a      	lsls	r2, r3
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d07e      	beq.n	8001e5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	4798      	blx	r3
        }
        return;
 8001d66:	e079      	b.n	8001e5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01d      	beq.n	8001db2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d031      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	4798      	blx	r3
 8001d94:	e02c      	b.n	8001df0 <HAL_DMA_IRQHandler+0x2a0>
 8001d96:	bf00      	nop
 8001d98:	20000000 	.word	0x20000000
 8001d9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d023      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
 8001db0:	e01e      	b.n	8001df0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d10f      	bne.n	8001de0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0210 	bic.w	r2, r2, #16
 8001dce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d032      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d022      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2205      	movs	r2, #5
 8001e08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	60bb      	str	r3, [r7, #8]
 8001e22:	697a      	ldr	r2, [r7, #20]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d307      	bcc.n	8001e38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0301 	and.w	r3, r3, #1
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f2      	bne.n	8001e1c <HAL_DMA_IRQHandler+0x2cc>
 8001e36:	e000      	b.n	8001e3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d005      	beq.n	8001e5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	4798      	blx	r3
 8001e5a:	e000      	b.n	8001e5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e5c:	bf00      	nop
    }
  }
}
 8001e5e:	3718      	adds	r7, #24
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001e80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	2b40      	cmp	r3, #64	@ 0x40
 8001e90:	d108      	bne.n	8001ea4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68ba      	ldr	r2, [r7, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ea2:	e007      	b.n	8001eb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	68ba      	ldr	r2, [r7, #8]
 8001eaa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	60da      	str	r2, [r3, #12]
}
 8001eb4:	bf00      	nop
 8001eb6:	3714      	adds	r7, #20
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	3b10      	subs	r3, #16
 8001ed0:	4a14      	ldr	r2, [pc, #80]	@ (8001f24 <DMA_CalcBaseAndBitshift+0x64>)
 8001ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed6:	091b      	lsrs	r3, r3, #4
 8001ed8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eda:	4a13      	ldr	r2, [pc, #76]	@ (8001f28 <DMA_CalcBaseAndBitshift+0x68>)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b03      	cmp	r3, #3
 8001eec:	d909      	bls.n	8001f02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001ef6:	f023 0303 	bic.w	r3, r3, #3
 8001efa:	1d1a      	adds	r2, r3, #4
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	659a      	str	r2, [r3, #88]	@ 0x58
 8001f00:	e007      	b.n	8001f12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001f0a:	f023 0303 	bic.w	r3, r3, #3
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	aaaaaaab 	.word	0xaaaaaaab
 8001f28:	08008128 	.word	0x08008128

08001f2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b085      	sub	sp, #20
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d11f      	bne.n	8001f86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	d856      	bhi.n	8001ffa <DMA_CheckFifoParam+0xce>
 8001f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8001f54 <DMA_CheckFifoParam+0x28>)
 8001f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f52:	bf00      	nop
 8001f54:	08001f65 	.word	0x08001f65
 8001f58:	08001f77 	.word	0x08001f77
 8001f5c:	08001f65 	.word	0x08001f65
 8001f60:	08001ffb 	.word	0x08001ffb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d046      	beq.n	8001ffe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f74:	e043      	b.n	8001ffe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001f7e:	d140      	bne.n	8002002 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f84:	e03d      	b.n	8002002 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	699b      	ldr	r3, [r3, #24]
 8001f8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f8e:	d121      	bne.n	8001fd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d837      	bhi.n	8002006 <DMA_CheckFifoParam+0xda>
 8001f96:	a201      	add	r2, pc, #4	@ (adr r2, 8001f9c <DMA_CheckFifoParam+0x70>)
 8001f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9c:	08001fad 	.word	0x08001fad
 8001fa0:	08001fb3 	.word	0x08001fb3
 8001fa4:	08001fad 	.word	0x08001fad
 8001fa8:	08001fc5 	.word	0x08001fc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb0:	e030      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d025      	beq.n	800200a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fc2:	e022      	b.n	800200a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fc8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001fcc:	d11f      	bne.n	800200e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fd2:	e01c      	b.n	800200e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d903      	bls.n	8001fe2 <DMA_CheckFifoParam+0xb6>
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2b03      	cmp	r3, #3
 8001fde:	d003      	beq.n	8001fe8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fe0:	e018      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8001fe6:	e015      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d00e      	beq.n	8002012 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ff8:	e00b      	b.n	8002012 <DMA_CheckFifoParam+0xe6>
      break;
 8001ffa:	bf00      	nop
 8001ffc:	e00a      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      break;
 8001ffe:	bf00      	nop
 8002000:	e008      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      break;
 8002002:	bf00      	nop
 8002004:	e006      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      break;
 8002006:	bf00      	nop
 8002008:	e004      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      break;
 800200a:	bf00      	nop
 800200c:	e002      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      break;   
 800200e:	bf00      	nop
 8002010:	e000      	b.n	8002014 <DMA_CheckFifoParam+0xe8>
      break;
 8002012:	bf00      	nop
    }
  } 
  
  return status; 
 8002014:	7bfb      	ldrb	r3, [r7, #15]
}
 8002016:	4618      	mov	r0, r3
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop

08002024 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	@ 0x24
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800202e:	2300      	movs	r3, #0
 8002030:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002032:	2300      	movs	r3, #0
 8002034:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002036:	2300      	movs	r3, #0
 8002038:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	e165      	b.n	800230c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002040:	2201      	movs	r2, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	4013      	ands	r3, r2
 8002052:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	429a      	cmp	r2, r3
 800205a:	f040 8154 	bne.w	8002306 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d005      	beq.n	8002076 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	2b02      	cmp	r3, #2
 8002074:	d130      	bne.n	80020d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	4013      	ands	r3, r2
 800208c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68da      	ldr	r2, [r3, #12]
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	69ba      	ldr	r2, [r7, #24]
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ac:	2201      	movs	r2, #1
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	43db      	mvns	r3, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4013      	ands	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 0201 	and.w	r2, r3, #1
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d017      	beq.n	8002114 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	689a      	ldr	r2, [r3, #8]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	69ba      	ldr	r2, [r7, #24]
 800210a:	4313      	orrs	r3, r2
 800210c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69ba      	ldr	r2, [r7, #24]
 8002112:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d123      	bne.n	8002168 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	08da      	lsrs	r2, r3, #3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3208      	adds	r2, #8
 8002128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	220f      	movs	r2, #15
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	691a      	ldr	r2, [r3, #16]
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	08da      	lsrs	r2, r3, #3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3208      	adds	r2, #8
 8002162:	69b9      	ldr	r1, [r7, #24]
 8002164:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	2203      	movs	r2, #3
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43db      	mvns	r3, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4013      	ands	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f003 0203 	and.w	r2, r3, #3
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	4313      	orrs	r3, r2
 8002194:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80ae 	beq.w	8002306 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60fb      	str	r3, [r7, #12]
 80021ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002324 <HAL_GPIO_Init+0x300>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b2:	4a5c      	ldr	r2, [pc, #368]	@ (8002324 <HAL_GPIO_Init+0x300>)
 80021b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ba:	4b5a      	ldr	r3, [pc, #360]	@ (8002324 <HAL_GPIO_Init+0x300>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021c6:	4a58      	ldr	r2, [pc, #352]	@ (8002328 <HAL_GPIO_Init+0x304>)
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	089b      	lsrs	r3, r3, #2
 80021cc:	3302      	adds	r3, #2
 80021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	f003 0303 	and.w	r3, r3, #3
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	220f      	movs	r2, #15
 80021de:	fa02 f303 	lsl.w	r3, r2, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	69ba      	ldr	r2, [r7, #24]
 80021e6:	4013      	ands	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4f      	ldr	r2, [pc, #316]	@ (800232c <HAL_GPIO_Init+0x308>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d025      	beq.n	800223e <HAL_GPIO_Init+0x21a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4e      	ldr	r2, [pc, #312]	@ (8002330 <HAL_GPIO_Init+0x30c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d01f      	beq.n	800223a <HAL_GPIO_Init+0x216>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4d      	ldr	r2, [pc, #308]	@ (8002334 <HAL_GPIO_Init+0x310>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d019      	beq.n	8002236 <HAL_GPIO_Init+0x212>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4c      	ldr	r2, [pc, #304]	@ (8002338 <HAL_GPIO_Init+0x314>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d013      	beq.n	8002232 <HAL_GPIO_Init+0x20e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4b      	ldr	r2, [pc, #300]	@ (800233c <HAL_GPIO_Init+0x318>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00d      	beq.n	800222e <HAL_GPIO_Init+0x20a>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a4a      	ldr	r2, [pc, #296]	@ (8002340 <HAL_GPIO_Init+0x31c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <HAL_GPIO_Init+0x206>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a49      	ldr	r2, [pc, #292]	@ (8002344 <HAL_GPIO_Init+0x320>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d101      	bne.n	8002226 <HAL_GPIO_Init+0x202>
 8002222:	2306      	movs	r3, #6
 8002224:	e00c      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 8002226:	2307      	movs	r3, #7
 8002228:	e00a      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800222a:	2305      	movs	r3, #5
 800222c:	e008      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800222e:	2304      	movs	r3, #4
 8002230:	e006      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 8002232:	2303      	movs	r3, #3
 8002234:	e004      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 8002236:	2302      	movs	r3, #2
 8002238:	e002      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <HAL_GPIO_Init+0x21c>
 800223e:	2300      	movs	r3, #0
 8002240:	69fa      	ldr	r2, [r7, #28]
 8002242:	f002 0203 	and.w	r2, r2, #3
 8002246:	0092      	lsls	r2, r2, #2
 8002248:	4093      	lsls	r3, r2
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002250:	4935      	ldr	r1, [pc, #212]	@ (8002328 <HAL_GPIO_Init+0x304>)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	089b      	lsrs	r3, r3, #2
 8002256:	3302      	adds	r3, #2
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800225e:	4b3a      	ldr	r3, [pc, #232]	@ (8002348 <HAL_GPIO_Init+0x324>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	43db      	mvns	r3, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4013      	ands	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	693b      	ldr	r3, [r7, #16]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002282:	4a31      	ldr	r2, [pc, #196]	@ (8002348 <HAL_GPIO_Init+0x324>)
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002288:	4b2f      	ldr	r3, [pc, #188]	@ (8002348 <HAL_GPIO_Init+0x324>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	43db      	mvns	r3, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4013      	ands	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d003      	beq.n	80022ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022ac:	4a26      	ldr	r2, [pc, #152]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80022ae:	69bb      	ldr	r3, [r7, #24]
 80022b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022b2:	4b25      	ldr	r3, [pc, #148]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d003      	beq.n	80022d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022d6:	4a1c      	ldr	r2, [pc, #112]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022dc:	4b1a      	ldr	r3, [pc, #104]	@ (8002348 <HAL_GPIO_Init+0x324>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002300:	4a11      	ldr	r2, [pc, #68]	@ (8002348 <HAL_GPIO_Init+0x324>)
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	3301      	adds	r3, #1
 800230a:	61fb      	str	r3, [r7, #28]
 800230c:	69fb      	ldr	r3, [r7, #28]
 800230e:	2b0f      	cmp	r3, #15
 8002310:	f67f ae96 	bls.w	8002040 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop
 8002318:	3724      	adds	r7, #36	@ 0x24
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40023800 	.word	0x40023800
 8002328:	40013800 	.word	0x40013800
 800232c:	40020000 	.word	0x40020000
 8002330:	40020400 	.word	0x40020400
 8002334:	40020800 	.word	0x40020800
 8002338:	40020c00 	.word	0x40020c00
 800233c:	40021000 	.word	0x40021000
 8002340:	40021400 	.word	0x40021400
 8002344:	40021800 	.word	0x40021800
 8002348:	40013c00 	.word	0x40013c00

0800234c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002352:	2300      	movs	r3, #0
 8002354:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	603b      	str	r3, [r7, #0]
 800235a:	4b20      	ldr	r3, [pc, #128]	@ (80023dc <HAL_PWREx_EnableOverDrive+0x90>)
 800235c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235e:	4a1f      	ldr	r2, [pc, #124]	@ (80023dc <HAL_PWREx_EnableOverDrive+0x90>)
 8002360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002364:	6413      	str	r3, [r2, #64]	@ 0x40
 8002366:	4b1d      	ldr	r3, [pc, #116]	@ (80023dc <HAL_PWREx_EnableOverDrive+0x90>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800236e:	603b      	str	r3, [r7, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002372:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002378:	f7ff f964 	bl	8001644 <HAL_GetTick>
 800237c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800237e:	e009      	b.n	8002394 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002380:	f7ff f960 	bl	8001644 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800238e:	d901      	bls.n	8002394 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002390:	2303      	movs	r3, #3
 8002392:	e01f      	b.n	80023d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002394:	4b13      	ldr	r3, [pc, #76]	@ (80023e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023a0:	d1ee      	bne.n	8002380 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023a2:	4b11      	ldr	r3, [pc, #68]	@ (80023e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a8:	f7ff f94c 	bl	8001644 <HAL_GetTick>
 80023ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023ae:	e009      	b.n	80023c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023b0:	f7ff f948 	bl	8001644 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023be:	d901      	bls.n	80023c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e007      	b.n	80023d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023c4:	4b07      	ldr	r3, [pc, #28]	@ (80023e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80023d0:	d1ee      	bne.n	80023b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40023800 	.word	0x40023800
 80023e0:	420e0040 	.word	0x420e0040
 80023e4:	40007000 	.word	0x40007000
 80023e8:	420e0044 	.word	0x420e0044

080023ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b084      	sub	sp, #16
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d101      	bne.n	8002400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e0cc      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002400:	4b68      	ldr	r3, [pc, #416]	@ (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 030f 	and.w	r3, r3, #15
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	429a      	cmp	r2, r3
 800240c:	d90c      	bls.n	8002428 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240e:	4b65      	ldr	r3, [pc, #404]	@ (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002416:	4b63      	ldr	r3, [pc, #396]	@ (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 030f 	and.w	r3, r3, #15
 800241e:	683a      	ldr	r2, [r7, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d001      	beq.n	8002428 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e0b8      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 0302 	and.w	r3, r3, #2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d020      	beq.n	8002476 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d005      	beq.n	800244c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002440:	4b59      	ldr	r3, [pc, #356]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4a58      	ldr	r2, [pc, #352]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800244a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0308 	and.w	r3, r3, #8
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002458:	4b53      	ldr	r3, [pc, #332]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4a52      	ldr	r2, [pc, #328]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002462:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002464:	4b50      	ldr	r3, [pc, #320]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	494d      	ldr	r1, [pc, #308]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d044      	beq.n	800250c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d107      	bne.n	800249a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800248a:	4b47      	ldr	r3, [pc, #284]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d119      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e07f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d003      	beq.n	80024aa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d107      	bne.n	80024ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024aa:	4b3f      	ldr	r3, [pc, #252]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d109      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e06f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ba:	4b3b      	ldr	r3, [pc, #236]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e067      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ca:	4b37      	ldr	r3, [pc, #220]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f023 0203 	bic.w	r2, r3, #3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4934      	ldr	r1, [pc, #208]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024dc:	f7ff f8b2 	bl	8001644 <HAL_GetTick>
 80024e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024e4:	f7ff f8ae 	bl	8001644 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e04f      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	4b2b      	ldr	r3, [pc, #172]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 020c 	and.w	r2, r3, #12
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	429a      	cmp	r2, r3
 800250a:	d1eb      	bne.n	80024e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800250c:	4b25      	ldr	r3, [pc, #148]	@ (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 030f 	and.w	r3, r3, #15
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	429a      	cmp	r2, r3
 8002518:	d20c      	bcs.n	8002534 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800251a:	4b22      	ldr	r3, [pc, #136]	@ (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	b2d2      	uxtb	r2, r2
 8002520:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002522:	4b20      	ldr	r3, [pc, #128]	@ (80025a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d001      	beq.n	8002534 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e032      	b.n	800259a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002540:	4b19      	ldr	r3, [pc, #100]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4916      	ldr	r1, [pc, #88]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	2b00      	cmp	r3, #0
 800255c:	d009      	beq.n	8002572 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800255e:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	490e      	ldr	r1, [pc, #56]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	4313      	orrs	r3, r2
 8002570:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002572:	f000 f887 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8002576:	4602      	mov	r2, r0
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	091b      	lsrs	r3, r3, #4
 800257e:	f003 030f 	and.w	r3, r3, #15
 8002582:	490a      	ldr	r1, [pc, #40]	@ (80025ac <HAL_RCC_ClockConfig+0x1c0>)
 8002584:	5ccb      	ldrb	r3, [r1, r3]
 8002586:	fa22 f303 	lsr.w	r3, r2, r3
 800258a:	4a09      	ldr	r2, [pc, #36]	@ (80025b0 <HAL_RCC_ClockConfig+0x1c4>)
 800258c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800258e:	4b09      	ldr	r3, [pc, #36]	@ (80025b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4618      	mov	r0, r3
 8002594:	f7fe fdea 	bl	800116c <HAL_InitTick>

  return HAL_OK;
 8002598:	2300      	movs	r3, #0
}
 800259a:	4618      	mov	r0, r3
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40023c00 	.word	0x40023c00
 80025a8:	40023800 	.word	0x40023800
 80025ac:	08008110 	.word	0x08008110
 80025b0:	20000000 	.word	0x20000000
 80025b4:	20000004 	.word	0x20000004

080025b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025bc:	4b03      	ldr	r3, [pc, #12]	@ (80025cc <HAL_RCC_GetHCLKFreq+0x14>)
 80025be:	681b      	ldr	r3, [r3, #0]
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	20000000 	.word	0x20000000

080025d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025d4:	f7ff fff0 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 80025d8:	4602      	mov	r2, r0
 80025da:	4b05      	ldr	r3, [pc, #20]	@ (80025f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	0a9b      	lsrs	r3, r3, #10
 80025e0:	f003 0307 	and.w	r3, r3, #7
 80025e4:	4903      	ldr	r1, [pc, #12]	@ (80025f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025e6:	5ccb      	ldrb	r3, [r1, r3]
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40023800 	.word	0x40023800
 80025f4:	08008120 	.word	0x08008120

080025f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025fc:	f7ff ffdc 	bl	80025b8 <HAL_RCC_GetHCLKFreq>
 8002600:	4602      	mov	r2, r0
 8002602:	4b05      	ldr	r3, [pc, #20]	@ (8002618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	0b5b      	lsrs	r3, r3, #13
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	4903      	ldr	r1, [pc, #12]	@ (800261c <HAL_RCC_GetPCLK2Freq+0x24>)
 800260e:	5ccb      	ldrb	r3, [r1, r3]
 8002610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40023800 	.word	0x40023800
 800261c:	08008120 	.word	0x08008120

08002620 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	220f      	movs	r2, #15
 800262e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002630:	4b12      	ldr	r3, [pc, #72]	@ (800267c <HAL_RCC_GetClockConfig+0x5c>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f003 0203 	and.w	r2, r3, #3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800263c:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <HAL_RCC_GetClockConfig+0x5c>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002648:	4b0c      	ldr	r3, [pc, #48]	@ (800267c <HAL_RCC_GetClockConfig+0x5c>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002654:	4b09      	ldr	r3, [pc, #36]	@ (800267c <HAL_RCC_GetClockConfig+0x5c>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	08db      	lsrs	r3, r3, #3
 800265a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002662:	4b07      	ldr	r3, [pc, #28]	@ (8002680 <HAL_RCC_GetClockConfig+0x60>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 020f 	and.w	r2, r3, #15
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	601a      	str	r2, [r3, #0]
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800
 8002680:	40023c00 	.word	0x40023c00

08002684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002688:	b0ae      	sub	sp, #184	@ 0xb8
 800268a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026aa:	4bcb      	ldr	r3, [pc, #812]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	f200 8206 	bhi.w	8002ac4 <HAL_RCC_GetSysClockFreq+0x440>
 80026b8:	a201      	add	r2, pc, #4	@ (adr r2, 80026c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026f5 	.word	0x080026f5
 80026c4:	08002ac5 	.word	0x08002ac5
 80026c8:	08002ac5 	.word	0x08002ac5
 80026cc:	08002ac5 	.word	0x08002ac5
 80026d0:	080026fd 	.word	0x080026fd
 80026d4:	08002ac5 	.word	0x08002ac5
 80026d8:	08002ac5 	.word	0x08002ac5
 80026dc:	08002ac5 	.word	0x08002ac5
 80026e0:	08002705 	.word	0x08002705
 80026e4:	08002ac5 	.word	0x08002ac5
 80026e8:	08002ac5 	.word	0x08002ac5
 80026ec:	08002ac5 	.word	0x08002ac5
 80026f0:	080028f5 	.word	0x080028f5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f4:	4bb9      	ldr	r3, [pc, #740]	@ (80029dc <HAL_RCC_GetSysClockFreq+0x358>)
 80026f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80026fa:	e1e7      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026fc:	4bb8      	ldr	r3, [pc, #736]	@ (80029e0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80026fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002702:	e1e3      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002704:	4bb4      	ldr	r3, [pc, #720]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800270c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002710:	4bb1      	ldr	r3, [pc, #708]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d071      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271c:	4bae      	ldr	r3, [pc, #696]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	099b      	lsrs	r3, r3, #6
 8002722:	2200      	movs	r2, #0
 8002724:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002728:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800272c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002734:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002738:	2300      	movs	r3, #0
 800273a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800273e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002742:	4622      	mov	r2, r4
 8002744:	462b      	mov	r3, r5
 8002746:	f04f 0000 	mov.w	r0, #0
 800274a:	f04f 0100 	mov.w	r1, #0
 800274e:	0159      	lsls	r1, r3, #5
 8002750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002754:	0150      	lsls	r0, r2, #5
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4621      	mov	r1, r4
 800275c:	1a51      	subs	r1, r2, r1
 800275e:	6439      	str	r1, [r7, #64]	@ 0x40
 8002760:	4629      	mov	r1, r5
 8002762:	eb63 0301 	sbc.w	r3, r3, r1
 8002766:	647b      	str	r3, [r7, #68]	@ 0x44
 8002768:	f04f 0200 	mov.w	r2, #0
 800276c:	f04f 0300 	mov.w	r3, #0
 8002770:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002774:	4649      	mov	r1, r9
 8002776:	018b      	lsls	r3, r1, #6
 8002778:	4641      	mov	r1, r8
 800277a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800277e:	4641      	mov	r1, r8
 8002780:	018a      	lsls	r2, r1, #6
 8002782:	4641      	mov	r1, r8
 8002784:	1a51      	subs	r1, r2, r1
 8002786:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002788:	4649      	mov	r1, r9
 800278a:	eb63 0301 	sbc.w	r3, r3, r1
 800278e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	f04f 0300 	mov.w	r3, #0
 8002798:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 800279c:	4649      	mov	r1, r9
 800279e:	00cb      	lsls	r3, r1, #3
 80027a0:	4641      	mov	r1, r8
 80027a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027a6:	4641      	mov	r1, r8
 80027a8:	00ca      	lsls	r2, r1, #3
 80027aa:	4610      	mov	r0, r2
 80027ac:	4619      	mov	r1, r3
 80027ae:	4603      	mov	r3, r0
 80027b0:	4622      	mov	r2, r4
 80027b2:	189b      	adds	r3, r3, r2
 80027b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80027b6:	462b      	mov	r3, r5
 80027b8:	460a      	mov	r2, r1
 80027ba:	eb42 0303 	adc.w	r3, r2, r3
 80027be:	637b      	str	r3, [r7, #52]	@ 0x34
 80027c0:	f04f 0200 	mov.w	r2, #0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027cc:	4629      	mov	r1, r5
 80027ce:	024b      	lsls	r3, r1, #9
 80027d0:	4621      	mov	r1, r4
 80027d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027d6:	4621      	mov	r1, r4
 80027d8:	024a      	lsls	r2, r1, #9
 80027da:	4610      	mov	r0, r2
 80027dc:	4619      	mov	r1, r3
 80027de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027e2:	2200      	movs	r2, #0
 80027e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80027ec:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80027f0:	f7fd fd0e 	bl	8000210 <__aeabi_uldivmod>
 80027f4:	4602      	mov	r2, r0
 80027f6:	460b      	mov	r3, r1
 80027f8:	4613      	mov	r3, r2
 80027fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80027fe:	e067      	b.n	80028d0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002800:	4b75      	ldr	r3, [pc, #468]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	2200      	movs	r2, #0
 8002808:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800280c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002810:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002814:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002818:	67bb      	str	r3, [r7, #120]	@ 0x78
 800281a:	2300      	movs	r3, #0
 800281c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800281e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002822:	4622      	mov	r2, r4
 8002824:	462b      	mov	r3, r5
 8002826:	f04f 0000 	mov.w	r0, #0
 800282a:	f04f 0100 	mov.w	r1, #0
 800282e:	0159      	lsls	r1, r3, #5
 8002830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002834:	0150      	lsls	r0, r2, #5
 8002836:	4602      	mov	r2, r0
 8002838:	460b      	mov	r3, r1
 800283a:	4621      	mov	r1, r4
 800283c:	1a51      	subs	r1, r2, r1
 800283e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002840:	4629      	mov	r1, r5
 8002842:	eb63 0301 	sbc.w	r3, r3, r1
 8002846:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002848:	f04f 0200 	mov.w	r2, #0
 800284c:	f04f 0300 	mov.w	r3, #0
 8002850:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002854:	4649      	mov	r1, r9
 8002856:	018b      	lsls	r3, r1, #6
 8002858:	4641      	mov	r1, r8
 800285a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800285e:	4641      	mov	r1, r8
 8002860:	018a      	lsls	r2, r1, #6
 8002862:	4641      	mov	r1, r8
 8002864:	ebb2 0a01 	subs.w	sl, r2, r1
 8002868:	4649      	mov	r1, r9
 800286a:	eb63 0b01 	sbc.w	fp, r3, r1
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	f04f 0300 	mov.w	r3, #0
 8002876:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800287a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800287e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002882:	4692      	mov	sl, r2
 8002884:	469b      	mov	fp, r3
 8002886:	4623      	mov	r3, r4
 8002888:	eb1a 0303 	adds.w	r3, sl, r3
 800288c:	623b      	str	r3, [r7, #32]
 800288e:	462b      	mov	r3, r5
 8002890:	eb4b 0303 	adc.w	r3, fp, r3
 8002894:	627b      	str	r3, [r7, #36]	@ 0x24
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028a2:	4629      	mov	r1, r5
 80028a4:	028b      	lsls	r3, r1, #10
 80028a6:	4621      	mov	r1, r4
 80028a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028ac:	4621      	mov	r1, r4
 80028ae:	028a      	lsls	r2, r1, #10
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028b8:	2200      	movs	r2, #0
 80028ba:	673b      	str	r3, [r7, #112]	@ 0x70
 80028bc:	677a      	str	r2, [r7, #116]	@ 0x74
 80028be:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80028c2:	f7fd fca5 	bl	8000210 <__aeabi_uldivmod>
 80028c6:	4602      	mov	r2, r0
 80028c8:	460b      	mov	r3, r1
 80028ca:	4613      	mov	r3, r2
 80028cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028d0:	4b41      	ldr	r3, [pc, #260]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	3301      	adds	r3, #1
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80028e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028e6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 80028f2:	e0eb      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028f4:	4b38      	ldr	r3, [pc, #224]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x354>)
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028fc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002900:	4b35      	ldr	r3, [pc, #212]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x354>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d06b      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800290c:	4b32      	ldr	r3, [pc, #200]	@ (80029d8 <HAL_RCC_GetSysClockFreq+0x354>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	2200      	movs	r2, #0
 8002914:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002916:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002918:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800291a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800291e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002920:	2300      	movs	r3, #0
 8002922:	667b      	str	r3, [r7, #100]	@ 0x64
 8002924:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002928:	4622      	mov	r2, r4
 800292a:	462b      	mov	r3, r5
 800292c:	f04f 0000 	mov.w	r0, #0
 8002930:	f04f 0100 	mov.w	r1, #0
 8002934:	0159      	lsls	r1, r3, #5
 8002936:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800293a:	0150      	lsls	r0, r2, #5
 800293c:	4602      	mov	r2, r0
 800293e:	460b      	mov	r3, r1
 8002940:	4621      	mov	r1, r4
 8002942:	1a51      	subs	r1, r2, r1
 8002944:	61b9      	str	r1, [r7, #24]
 8002946:	4629      	mov	r1, r5
 8002948:	eb63 0301 	sbc.w	r3, r3, r1
 800294c:	61fb      	str	r3, [r7, #28]
 800294e:	f04f 0200 	mov.w	r2, #0
 8002952:	f04f 0300 	mov.w	r3, #0
 8002956:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800295a:	4659      	mov	r1, fp
 800295c:	018b      	lsls	r3, r1, #6
 800295e:	4651      	mov	r1, sl
 8002960:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002964:	4651      	mov	r1, sl
 8002966:	018a      	lsls	r2, r1, #6
 8002968:	4651      	mov	r1, sl
 800296a:	ebb2 0801 	subs.w	r8, r2, r1
 800296e:	4659      	mov	r1, fp
 8002970:	eb63 0901 	sbc.w	r9, r3, r1
 8002974:	f04f 0200 	mov.w	r2, #0
 8002978:	f04f 0300 	mov.w	r3, #0
 800297c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002980:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002984:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002988:	4690      	mov	r8, r2
 800298a:	4699      	mov	r9, r3
 800298c:	4623      	mov	r3, r4
 800298e:	eb18 0303 	adds.w	r3, r8, r3
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	462b      	mov	r3, r5
 8002996:	eb49 0303 	adc.w	r3, r9, r3
 800299a:	617b      	str	r3, [r7, #20]
 800299c:	f04f 0200 	mov.w	r2, #0
 80029a0:	f04f 0300 	mov.w	r3, #0
 80029a4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029a8:	4629      	mov	r1, r5
 80029aa:	024b      	lsls	r3, r1, #9
 80029ac:	4621      	mov	r1, r4
 80029ae:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029b2:	4621      	mov	r1, r4
 80029b4:	024a      	lsls	r2, r1, #9
 80029b6:	4610      	mov	r0, r2
 80029b8:	4619      	mov	r1, r3
 80029ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029be:	2200      	movs	r2, #0
 80029c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029c2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80029c4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029c8:	f7fd fc22 	bl	8000210 <__aeabi_uldivmod>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4613      	mov	r3, r2
 80029d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029d6:	e065      	b.n	8002aa4 <HAL_RCC_GetSysClockFreq+0x420>
 80029d8:	40023800 	.word	0x40023800
 80029dc:	00f42400 	.word	0x00f42400
 80029e0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029e4:	4b3d      	ldr	r3, [pc, #244]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x458>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	099b      	lsrs	r3, r3, #6
 80029ea:	2200      	movs	r2, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	4611      	mov	r1, r2
 80029f0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029f4:	653b      	str	r3, [r7, #80]	@ 0x50
 80029f6:	2300      	movs	r3, #0
 80029f8:	657b      	str	r3, [r7, #84]	@ 0x54
 80029fa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 80029fe:	4642      	mov	r2, r8
 8002a00:	464b      	mov	r3, r9
 8002a02:	f04f 0000 	mov.w	r0, #0
 8002a06:	f04f 0100 	mov.w	r1, #0
 8002a0a:	0159      	lsls	r1, r3, #5
 8002a0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a10:	0150      	lsls	r0, r2, #5
 8002a12:	4602      	mov	r2, r0
 8002a14:	460b      	mov	r3, r1
 8002a16:	4641      	mov	r1, r8
 8002a18:	1a51      	subs	r1, r2, r1
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	4649      	mov	r1, r9
 8002a1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	f04f 0200 	mov.w	r2, #0
 8002a28:	f04f 0300 	mov.w	r3, #0
 8002a2c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a30:	4659      	mov	r1, fp
 8002a32:	018b      	lsls	r3, r1, #6
 8002a34:	4651      	mov	r1, sl
 8002a36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a3a:	4651      	mov	r1, sl
 8002a3c:	018a      	lsls	r2, r1, #6
 8002a3e:	4651      	mov	r1, sl
 8002a40:	1a54      	subs	r4, r2, r1
 8002a42:	4659      	mov	r1, fp
 8002a44:	eb63 0501 	sbc.w	r5, r3, r1
 8002a48:	f04f 0200 	mov.w	r2, #0
 8002a4c:	f04f 0300 	mov.w	r3, #0
 8002a50:	00eb      	lsls	r3, r5, #3
 8002a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a56:	00e2      	lsls	r2, r4, #3
 8002a58:	4614      	mov	r4, r2
 8002a5a:	461d      	mov	r5, r3
 8002a5c:	4643      	mov	r3, r8
 8002a5e:	18e3      	adds	r3, r4, r3
 8002a60:	603b      	str	r3, [r7, #0]
 8002a62:	464b      	mov	r3, r9
 8002a64:	eb45 0303 	adc.w	r3, r5, r3
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	f04f 0300 	mov.w	r3, #0
 8002a72:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a76:	4629      	mov	r1, r5
 8002a78:	028b      	lsls	r3, r1, #10
 8002a7a:	4621      	mov	r1, r4
 8002a7c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a80:	4621      	mov	r1, r4
 8002a82:	028a      	lsls	r2, r1, #10
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a90:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002a92:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002a96:	f7fd fbbb 	bl	8000210 <__aeabi_uldivmod>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8002adc <HAL_RCC_GetSysClockFreq+0x458>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	0f1b      	lsrs	r3, r3, #28
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002ab2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ab6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ac2:	e003      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ac6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002aca:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002acc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	37b8      	adds	r7, #184	@ 0xb8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	00f42400 	.word	0x00f42400

08002ae4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e28d      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 8083 	beq.w	8002c0a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b04:	4b94      	ldr	r3, [pc, #592]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f003 030c 	and.w	r3, r3, #12
 8002b0c:	2b04      	cmp	r3, #4
 8002b0e:	d019      	beq.n	8002b44 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b10:	4b91      	ldr	r3, [pc, #580]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b18:	2b08      	cmp	r3, #8
 8002b1a:	d106      	bne.n	8002b2a <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b1c:	4b8e      	ldr	r3, [pc, #568]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b24:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b28:	d00c      	beq.n	8002b44 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b32:	2b0c      	cmp	r3, #12
 8002b34:	d112      	bne.n	8002b5c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b36:	4b88      	ldr	r3, [pc, #544]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b3e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b42:	d10b      	bne.n	8002b5c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b44:	4b84      	ldr	r3, [pc, #528]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d05b      	beq.n	8002c08 <HAL_RCC_OscConfig+0x124>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d157      	bne.n	8002c08 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e25a      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b64:	d106      	bne.n	8002b74 <HAL_RCC_OscConfig+0x90>
 8002b66:	4b7c      	ldr	r3, [pc, #496]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7b      	ldr	r2, [pc, #492]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002b6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e01d      	b.n	8002bb0 <HAL_RCC_OscConfig+0xcc>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0xb4>
 8002b7e:	4b76      	ldr	r3, [pc, #472]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a75      	ldr	r2, [pc, #468]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b73      	ldr	r3, [pc, #460]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a72      	ldr	r2, [pc, #456]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0xcc>
 8002b98:	4b6f      	ldr	r3, [pc, #444]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a6e      	ldr	r2, [pc, #440]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b6c      	ldr	r3, [pc, #432]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a6b      	ldr	r2, [pc, #428]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fd44 	bl	8001644 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fd40 	bl	8001644 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	@ 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e21f      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	4b61      	ldr	r3, [pc, #388]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0xdc>
 8002bde:	e014      	b.n	8002c0a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe fd30 	bl	8001644 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fe fd2c 	bl	8001644 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	@ 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e20b      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	4b57      	ldr	r3, [pc, #348]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x104>
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d06f      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c16:	4b50      	ldr	r3, [pc, #320]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d017      	beq.n	8002c52 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c22:	4b4d      	ldr	r3, [pc, #308]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d105      	bne.n	8002c3a <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d00b      	beq.n	8002c52 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c3a:	4b47      	ldr	r3, [pc, #284]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c42:	2b0c      	cmp	r3, #12
 8002c44:	d11c      	bne.n	8002c80 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c46:	4b44      	ldr	r3, [pc, #272]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d116      	bne.n	8002c80 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c52:	4b41      	ldr	r3, [pc, #260]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d005      	beq.n	8002c6a <HAL_RCC_OscConfig+0x186>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d001      	beq.n	8002c6a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e1d3      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c6a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4937      	ldr	r1, [pc, #220]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7e:	e03a      	b.n	8002cf6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d020      	beq.n	8002cca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c88:	4b34      	ldr	r3, [pc, #208]	@ (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8e:	f7fe fcd9 	bl	8001644 <HAL_GetTick>
 8002c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c94:	e008      	b.n	8002ca8 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c96:	f7fe fcd5 	bl	8001644 <HAL_GetTick>
 8002c9a:	4602      	mov	r2, r0
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	2b02      	cmp	r3, #2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e1b4      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0f0      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cb4:	4b28      	ldr	r3, [pc, #160]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	4925      	ldr	r1, [pc, #148]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]
 8002cc8:	e015      	b.n	8002cf6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cca:	4b24      	ldr	r3, [pc, #144]	@ (8002d5c <HAL_RCC_OscConfig+0x278>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fcb8 	bl	8001644 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cd8:	f7fe fcb4 	bl	8001644 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e193      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	4b1b      	ldr	r3, [pc, #108]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0308 	and.w	r3, r3, #8
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d036      	beq.n	8002d70 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d016      	beq.n	8002d38 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d0a:	4b15      	ldr	r3, [pc, #84]	@ (8002d60 <HAL_RCC_OscConfig+0x27c>)
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d10:	f7fe fc98 	bl	8001644 <HAL_GetTick>
 8002d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d16:	e008      	b.n	8002d2a <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d18:	f7fe fc94 	bl	8001644 <HAL_GetTick>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e173      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d58 <HAL_RCC_OscConfig+0x274>)
 8002d2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d0f0      	beq.n	8002d18 <HAL_RCC_OscConfig+0x234>
 8002d36:	e01b      	b.n	8002d70 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d38:	4b09      	ldr	r3, [pc, #36]	@ (8002d60 <HAL_RCC_OscConfig+0x27c>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fc81 	bl	8001644 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	e00e      	b.n	8002d64 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d46:	f7fe fc7d 	bl	8001644 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d907      	bls.n	8002d64 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e15c      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	42470000 	.word	0x42470000
 8002d60:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d64:	4b8a      	ldr	r3, [pc, #552]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1ea      	bne.n	8002d46 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 8097 	beq.w	8002eac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d82:	4b83      	ldr	r3, [pc, #524]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10f      	bne.n	8002dae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d8e:	2300      	movs	r3, #0
 8002d90:	60bb      	str	r3, [r7, #8]
 8002d92:	4b7f      	ldr	r3, [pc, #508]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d96:	4a7e      	ldr	r2, [pc, #504]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002d98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d9e:	4b7c      	ldr	r3, [pc, #496]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002da6:	60bb      	str	r3, [r7, #8]
 8002da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002daa:	2301      	movs	r3, #1
 8002dac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dae:	4b79      	ldr	r3, [pc, #484]	@ (8002f94 <HAL_RCC_OscConfig+0x4b0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d118      	bne.n	8002dec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dba:	4b76      	ldr	r3, [pc, #472]	@ (8002f94 <HAL_RCC_OscConfig+0x4b0>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a75      	ldr	r2, [pc, #468]	@ (8002f94 <HAL_RCC_OscConfig+0x4b0>)
 8002dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fc3d 	bl	8001644 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dcc:	e008      	b.n	8002de0 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dce:	f7fe fc39 	bl	8001644 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	2b02      	cmp	r3, #2
 8002dda:	d901      	bls.n	8002de0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	e118      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	4b6c      	ldr	r3, [pc, #432]	@ (8002f94 <HAL_RCC_OscConfig+0x4b0>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0f0      	beq.n	8002dce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	2b01      	cmp	r3, #1
 8002df2:	d106      	bne.n	8002e02 <HAL_RCC_OscConfig+0x31e>
 8002df4:	4b66      	ldr	r3, [pc, #408]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df8:	4a65      	ldr	r2, [pc, #404]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002dfa:	f043 0301 	orr.w	r3, r3, #1
 8002dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e00:	e01c      	b.n	8002e3c <HAL_RCC_OscConfig+0x358>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	2b05      	cmp	r3, #5
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x340>
 8002e0a:	4b61      	ldr	r3, [pc, #388]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0e:	4a60      	ldr	r2, [pc, #384]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002e10:	f043 0304 	orr.w	r3, r3, #4
 8002e14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e16:	4b5e      	ldr	r3, [pc, #376]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1a:	4a5d      	ldr	r2, [pc, #372]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002e1c:	f043 0301 	orr.w	r3, r3, #1
 8002e20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e22:	e00b      	b.n	8002e3c <HAL_RCC_OscConfig+0x358>
 8002e24:	4b5a      	ldr	r3, [pc, #360]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002e26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e28:	4a59      	ldr	r2, [pc, #356]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002e2a:	f023 0301 	bic.w	r3, r3, #1
 8002e2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e30:	4b57      	ldr	r3, [pc, #348]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002e32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e34:	4a56      	ldr	r2, [pc, #344]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002e36:	f023 0304 	bic.w	r3, r3, #4
 8002e3a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d015      	beq.n	8002e70 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e44:	f7fe fbfe 	bl	8001644 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e4a:	e00a      	b.n	8002e62 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e4c:	f7fe fbfa 	bl	8001644 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e0d7      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e62:	4b4b      	ldr	r3, [pc, #300]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e66:	f003 0302 	and.w	r3, r3, #2
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0ee      	beq.n	8002e4c <HAL_RCC_OscConfig+0x368>
 8002e6e:	e014      	b.n	8002e9a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fe fbe8 	bl	8001644 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e78:	f7fe fbe4 	bl	8001644 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0c1      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8e:	4b40      	ldr	r3, [pc, #256]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d1ee      	bne.n	8002e78 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e9a:	7dfb      	ldrb	r3, [r7, #23]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d105      	bne.n	8002eac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	4a3a      	ldr	r2, [pc, #232]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002ea6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002eaa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	699b      	ldr	r3, [r3, #24]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	f000 80ad 	beq.w	8003010 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eb6:	4b36      	ldr	r3, [pc, #216]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f003 030c 	and.w	r3, r3, #12
 8002ebe:	2b08      	cmp	r3, #8
 8002ec0:	d060      	beq.n	8002f84 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d145      	bne.n	8002f56 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eca:	4b33      	ldr	r3, [pc, #204]	@ (8002f98 <HAL_RCC_OscConfig+0x4b4>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed0:	f7fe fbb8 	bl	8001644 <HAL_GetTick>
 8002ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ed8:	f7fe fbb4 	bl	8001644 <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e093      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	4b29      	ldr	r3, [pc, #164]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69da      	ldr	r2, [r3, #28]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	431a      	orrs	r2, r3
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	019b      	lsls	r3, r3, #6
 8002f06:	431a      	orrs	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0c:	085b      	lsrs	r3, r3, #1
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	061b      	lsls	r3, r3, #24
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f20:	071b      	lsls	r3, r3, #28
 8002f22:	491b      	ldr	r1, [pc, #108]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002f24:	4313      	orrs	r3, r2
 8002f26:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f28:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <HAL_RCC_OscConfig+0x4b4>)
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f2e:	f7fe fb89 	bl	8001644 <HAL_GetTick>
 8002f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f34:	e008      	b.n	8002f48 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f36:	f7fe fb85 	bl	8001644 <HAL_GetTick>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	1ad3      	subs	r3, r2, r3
 8002f40:	2b02      	cmp	r3, #2
 8002f42:	d901      	bls.n	8002f48 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f44:	2303      	movs	r3, #3
 8002f46:	e064      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f48:	4b11      	ldr	r3, [pc, #68]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d0f0      	beq.n	8002f36 <HAL_RCC_OscConfig+0x452>
 8002f54:	e05c      	b.n	8003010 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f56:	4b10      	ldr	r3, [pc, #64]	@ (8002f98 <HAL_RCC_OscConfig+0x4b4>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fb72 	bl	8001644 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f64:	f7fe fb6e 	bl	8001644 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e04d      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <HAL_RCC_OscConfig+0x4ac>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0x480>
 8002f82:	e045      	b.n	8003010 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d107      	bne.n	8002f9c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e040      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40007000 	.word	0x40007000
 8002f98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f9c:	4b1f      	ldr	r3, [pc, #124]	@ (800301c <HAL_RCC_OscConfig+0x538>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d030      	beq.n	800300c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d129      	bne.n	800300c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d122      	bne.n	800300c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fc6:	68fa      	ldr	r2, [r7, #12]
 8002fc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fcc:	4013      	ands	r3, r2
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d119      	bne.n	800300c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe2:	085b      	lsrs	r3, r3, #1
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d10f      	bne.n	800300c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ff6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003006:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800

08003020 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d101      	bne.n	8003032 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e041      	b.n	80030b6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d106      	bne.n	800304c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 f839 	bl	80030be <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	3304      	adds	r3, #4
 800305c:	4619      	mov	r1, r3
 800305e:	4610      	mov	r0, r2
 8003060:	f000 f9c0 	bl	80033e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2201      	movs	r2, #1
 8003078:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030b4:	2300      	movs	r3, #0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}

080030be <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80030be:	b480      	push	{r7}
 80030c0:	b083      	sub	sp, #12
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b085      	sub	sp, #20
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d001      	beq.n	80030ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e04e      	b.n	800318a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a23      	ldr	r2, [pc, #140]	@ (8003198 <HAL_TIM_Base_Start_IT+0xc4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d022      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x80>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003116:	d01d      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x80>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1f      	ldr	r2, [pc, #124]	@ (800319c <HAL_TIM_Base_Start_IT+0xc8>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d018      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x80>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1e      	ldr	r2, [pc, #120]	@ (80031a0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d013      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x80>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a1c      	ldr	r2, [pc, #112]	@ (80031a4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00e      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x80>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a1b      	ldr	r2, [pc, #108]	@ (80031a8 <HAL_TIM_Base_Start_IT+0xd4>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d009      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x80>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a19      	ldr	r2, [pc, #100]	@ (80031ac <HAL_TIM_Base_Start_IT+0xd8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d004      	beq.n	8003154 <HAL_TIM_Base_Start_IT+0x80>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a18      	ldr	r2, [pc, #96]	@ (80031b0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d111      	bne.n	8003178 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b06      	cmp	r3, #6
 8003164:	d010      	beq.n	8003188 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f042 0201 	orr.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003176:	e007      	b.n	8003188 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f042 0201 	orr.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003188:	2300      	movs	r3, #0
}
 800318a:	4618      	mov	r0, r3
 800318c:	3714      	adds	r7, #20
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	40010000 	.word	0x40010000
 800319c:	40000400 	.word	0x40000400
 80031a0:	40000800 	.word	0x40000800
 80031a4:	40000c00 	.word	0x40000c00
 80031a8:	40010400 	.word	0x40010400
 80031ac:	40014000 	.word	0x40014000
 80031b0:	40001800 	.word	0x40001800

080031b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68db      	ldr	r3, [r3, #12]
 80031c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d020      	beq.n	8003218 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d01b      	beq.n	8003218 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f06f 0202 	mvn.w	r2, #2
 80031e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	f003 0303 	and.w	r3, r3, #3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d003      	beq.n	8003206 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 f8d2 	bl	80033a8 <HAL_TIM_IC_CaptureCallback>
 8003204:	e005      	b.n	8003212 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f8c4 	bl	8003394 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f000 f8d5 	bl	80033bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	f003 0304 	and.w	r3, r3, #4
 800321e:	2b00      	cmp	r3, #0
 8003220:	d020      	beq.n	8003264 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d01b      	beq.n	8003264 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f06f 0204 	mvn.w	r2, #4
 8003234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2202      	movs	r2, #2
 800323a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 f8ac 	bl	80033a8 <HAL_TIM_IC_CaptureCallback>
 8003250:	e005      	b.n	800325e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f89e 	bl	8003394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8af 	bl	80033bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 0308 	and.w	r3, r3, #8
 800326a:	2b00      	cmp	r3, #0
 800326c:	d020      	beq.n	80032b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 0308 	and.w	r3, r3, #8
 8003274:	2b00      	cmp	r3, #0
 8003276:	d01b      	beq.n	80032b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0208 	mvn.w	r2, #8
 8003280:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2204      	movs	r2, #4
 8003286:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	69db      	ldr	r3, [r3, #28]
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 f886 	bl	80033a8 <HAL_TIM_IC_CaptureCallback>
 800329c:	e005      	b.n	80032aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 f878 	bl	8003394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f889 	bl	80033bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	f003 0310 	and.w	r3, r3, #16
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d020      	beq.n	80032fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f003 0310 	and.w	r3, r3, #16
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01b      	beq.n	80032fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f06f 0210 	mvn.w	r2, #16
 80032cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2208      	movs	r2, #8
 80032d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	69db      	ldr	r3, [r3, #28]
 80032da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f860 	bl	80033a8 <HAL_TIM_IC_CaptureCallback>
 80032e8:	e005      	b.n	80032f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f852 	bl	8003394 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f863 	bl	80033bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00c      	beq.n	8003320 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f06f 0201 	mvn.w	r2, #1
 8003318:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f7fd fd00 	bl	8000d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003326:	2b00      	cmp	r3, #0
 8003328:	d00c      	beq.n	8003344 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003330:	2b00      	cmp	r3, #0
 8003332:	d007      	beq.n	8003344 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800333c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f900 	bl	8003544 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	d00c      	beq.n	8003368 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003354:	2b00      	cmp	r3, #0
 8003356:	d007      	beq.n	8003368 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 f834 	bl	80033d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	f003 0320 	and.w	r3, r3, #32
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00c      	beq.n	800338c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	f003 0320 	and.w	r3, r3, #32
 8003378:	2b00      	cmp	r3, #0
 800337a:	d007      	beq.n	800338c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f06f 0220 	mvn.w	r2, #32
 8003384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f000 f8d2 	bl	8003530 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b085      	sub	sp, #20
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a43      	ldr	r2, [pc, #268]	@ (8003504 <TIM_Base_SetConfig+0x120>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d013      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003402:	d00f      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	4a40      	ldr	r2, [pc, #256]	@ (8003508 <TIM_Base_SetConfig+0x124>)
 8003408:	4293      	cmp	r3, r2
 800340a:	d00b      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4a3f      	ldr	r2, [pc, #252]	@ (800350c <TIM_Base_SetConfig+0x128>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d007      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	4a3e      	ldr	r2, [pc, #248]	@ (8003510 <TIM_Base_SetConfig+0x12c>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d003      	beq.n	8003424 <TIM_Base_SetConfig+0x40>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	4a3d      	ldr	r2, [pc, #244]	@ (8003514 <TIM_Base_SetConfig+0x130>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d108      	bne.n	8003436 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800342a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a32      	ldr	r2, [pc, #200]	@ (8003504 <TIM_Base_SetConfig+0x120>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d02b      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003444:	d027      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a2f      	ldr	r2, [pc, #188]	@ (8003508 <TIM_Base_SetConfig+0x124>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d023      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a2e      	ldr	r2, [pc, #184]	@ (800350c <TIM_Base_SetConfig+0x128>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d01f      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	4a2d      	ldr	r2, [pc, #180]	@ (8003510 <TIM_Base_SetConfig+0x12c>)
 800345a:	4293      	cmp	r3, r2
 800345c:	d01b      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	4a2c      	ldr	r2, [pc, #176]	@ (8003514 <TIM_Base_SetConfig+0x130>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d017      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	4a2b      	ldr	r2, [pc, #172]	@ (8003518 <TIM_Base_SetConfig+0x134>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d013      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a2a      	ldr	r2, [pc, #168]	@ (800351c <TIM_Base_SetConfig+0x138>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00f      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a29      	ldr	r2, [pc, #164]	@ (8003520 <TIM_Base_SetConfig+0x13c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d00b      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a28      	ldr	r2, [pc, #160]	@ (8003524 <TIM_Base_SetConfig+0x140>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d007      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a27      	ldr	r2, [pc, #156]	@ (8003528 <TIM_Base_SetConfig+0x144>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d003      	beq.n	8003496 <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a26      	ldr	r2, [pc, #152]	@ (800352c <TIM_Base_SetConfig+0x148>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d108      	bne.n	80034a8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800349c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	689a      	ldr	r2, [r3, #8]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a0e      	ldr	r2, [pc, #56]	@ (8003504 <TIM_Base_SetConfig+0x120>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d003      	beq.n	80034d6 <TIM_Base_SetConfig+0xf2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a10      	ldr	r2, [pc, #64]	@ (8003514 <TIM_Base_SetConfig+0x130>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d103      	bne.n	80034de <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	691a      	ldr	r2, [r3, #16]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f043 0204 	orr.w	r2, r3, #4
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	601a      	str	r2, [r3, #0]
}
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40010000 	.word	0x40010000
 8003508:	40000400 	.word	0x40000400
 800350c:	40000800 	.word	0x40000800
 8003510:	40000c00 	.word	0x40000c00
 8003514:	40010400 	.word	0x40010400
 8003518:	40014000 	.word	0x40014000
 800351c:	40014400 	.word	0x40014400
 8003520:	40014800 	.word	0x40014800
 8003524:	40001800 	.word	0x40001800
 8003528:	40001c00 	.word	0x40001c00
 800352c:	40002000 	.word	0x40002000

08003530 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d101      	bne.n	800356a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e042      	b.n	80035f0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003570:	b2db      	uxtb	r3, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	d106      	bne.n	8003584 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7fd ff48 	bl	8001414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2224      	movs	r2, #36	@ 0x24
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	68da      	ldr	r2, [r3, #12]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800359a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 ff13 	bl	80043c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2220      	movs	r2, #32
 80035dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	4613      	mov	r3, r2
 8003604:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b20      	cmp	r3, #32
 8003610:	d112      	bne.n	8003638 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d002      	beq.n	800361e <HAL_UART_Receive_DMA+0x26>
 8003618:	88fb      	ldrh	r3, [r7, #6]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d101      	bne.n	8003622 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e00b      	b.n	800363a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003628:	88fb      	ldrh	r3, [r7, #6]
 800362a:	461a      	mov	r2, r3
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	68f8      	ldr	r0, [r7, #12]
 8003630:	f000 fc62 	bl	8003ef8 <UART_Start_Receive_DMA>
 8003634:	4603      	mov	r3, r0
 8003636:	e000      	b.n	800363a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003638:	2302      	movs	r3, #2
  }
}
 800363a:	4618      	mov	r0, r3
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b090      	sub	sp, #64	@ 0x40
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800364a:	2300      	movs	r3, #0
 800364c:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003658:	2b80      	cmp	r3, #128	@ 0x80
 800365a:	bf0c      	ite	eq
 800365c:	2301      	moveq	r3, #1
 800365e:	2300      	movne	r3, #0
 8003660:	b2db      	uxtb	r3, r3
 8003662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800366a:	b2db      	uxtb	r3, r3
 800366c:	2b21      	cmp	r3, #33	@ 0x21
 800366e:	d128      	bne.n	80036c2 <HAL_UART_DMAStop+0x80>
 8003670:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003672:	2b00      	cmp	r3, #0
 8003674:	d025      	beq.n	80036c2 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	3314      	adds	r3, #20
 800367c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	623b      	str	r3, [r7, #32]
   return(result);
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800368c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	3314      	adds	r3, #20
 8003694:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003696:	633a      	str	r2, [r7, #48]	@ 0x30
 8003698:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800369c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e5      	bne.n	8003676 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d004      	beq.n	80036bc <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036b6:	4618      	mov	r0, r3
 80036b8:	f7fe f9b8 	bl	8001a2c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fcc1 	bl	8004044 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036cc:	2b40      	cmp	r3, #64	@ 0x40
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b22      	cmp	r3, #34	@ 0x22
 80036e2:	d128      	bne.n	8003736 <HAL_UART_DMAStop+0xf4>
 80036e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d025      	beq.n	8003736 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3314      	adds	r3, #20
 80036f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	60fb      	str	r3, [r7, #12]
   return(result);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003700:	637b      	str	r3, [r7, #52]	@ 0x34
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	3314      	adds	r3, #20
 8003708:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800370a:	61fa      	str	r2, [r7, #28]
 800370c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800370e:	69b9      	ldr	r1, [r7, #24]
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	e841 2300 	strex	r3, r2, [r1]
 8003716:	617b      	str	r3, [r7, #20]
   return(result);
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d1e5      	bne.n	80036ea <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003722:	2b00      	cmp	r3, #0
 8003724:	d004      	beq.n	8003730 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe f97e 	bl	8001a2c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 fcaf 	bl	8004094 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3740      	adds	r7, #64	@ 0x40
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b0ba      	sub	sp, #232	@ 0xe8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695b      	ldr	r3, [r3, #20]
 8003762:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003766:	2300      	movs	r3, #0
 8003768:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800376c:	2300      	movs	r3, #0
 800376e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003776:	f003 030f 	and.w	r3, r3, #15
 800377a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800377e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10f      	bne.n	80037a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800378a:	f003 0320 	and.w	r3, r3, #32
 800378e:	2b00      	cmp	r3, #0
 8003790:	d009      	beq.n	80037a6 <HAL_UART_IRQHandler+0x66>
 8003792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b00      	cmp	r3, #0
 800379c:	d003      	beq.n	80037a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fd54 	bl	800424c <UART_Receive_IT>
      return;
 80037a4:	e273      	b.n	8003c8e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80037a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 80de 	beq.w	800396c <HAL_UART_IRQHandler+0x22c>
 80037b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80037bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037c0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	f000 80d1 	beq.w	800396c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00b      	beq.n	80037ee <HAL_UART_IRQHandler+0xae>
 80037d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037e6:	f043 0201 	orr.w	r2, r3, #1
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00b      	beq.n	8003812 <HAL_UART_IRQHandler+0xd2>
 80037fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037fe:	f003 0301 	and.w	r3, r3, #1
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800380a:	f043 0202 	orr.w	r2, r3, #2
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00b      	beq.n	8003836 <HAL_UART_IRQHandler+0xf6>
 800381e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003822:	f003 0301 	and.w	r3, r3, #1
 8003826:	2b00      	cmp	r3, #0
 8003828:	d005      	beq.n	8003836 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382e:	f043 0204 	orr.w	r2, r3, #4
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d011      	beq.n	8003866 <HAL_UART_IRQHandler+0x126>
 8003842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003846:	f003 0320 	and.w	r3, r3, #32
 800384a:	2b00      	cmp	r3, #0
 800384c:	d105      	bne.n	800385a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800384e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d005      	beq.n	8003866 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385e:	f043 0208 	orr.w	r2, r3, #8
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386a:	2b00      	cmp	r3, #0
 800386c:	f000 820a 	beq.w	8003c84 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003874:	f003 0320 	and.w	r3, r3, #32
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <HAL_UART_IRQHandler+0x14e>
 800387c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003880:	f003 0320 	and.w	r3, r3, #32
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fcdf 	bl	800424c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003898:	2b40      	cmp	r3, #64	@ 0x40
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038aa:	f003 0308 	and.w	r3, r3, #8
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d103      	bne.n	80038ba <HAL_UART_IRQHandler+0x17a>
 80038b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d04f      	beq.n	800395a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 fbea 	bl	8004094 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ca:	2b40      	cmp	r3, #64	@ 0x40
 80038cc:	d141      	bne.n	8003952 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	3314      	adds	r3, #20
 80038d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80038dc:	e853 3f00 	ldrex	r3, [r3]
 80038e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80038e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80038e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80038ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	3314      	adds	r3, #20
 80038f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80038fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80038fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003906:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003912:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1d9      	bne.n	80038ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800391e:	2b00      	cmp	r3, #0
 8003920:	d013      	beq.n	800394a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003926:	4a8a      	ldr	r2, [pc, #552]	@ (8003b50 <HAL_UART_IRQHandler+0x410>)
 8003928:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe f8ec 	bl	8001b0c <HAL_DMA_Abort_IT>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d016      	beq.n	8003968 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800393e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003944:	4610      	mov	r0, r2
 8003946:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003948:	e00e      	b.n	8003968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f9c0 	bl	8003cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003950:	e00a      	b.n	8003968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f9bc 	bl	8003cd0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003958:	e006      	b.n	8003968 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 f9b8 	bl	8003cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2200      	movs	r2, #0
 8003964:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003966:	e18d      	b.n	8003c84 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003968:	bf00      	nop
    return;
 800396a:	e18b      	b.n	8003c84 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003970:	2b01      	cmp	r3, #1
 8003972:	f040 8167 	bne.w	8003c44 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003976:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800397a:	f003 0310 	and.w	r3, r3, #16
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8160 	beq.w	8003c44 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8003984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003988:	f003 0310 	and.w	r3, r3, #16
 800398c:	2b00      	cmp	r3, #0
 800398e:	f000 8159 	beq.w	8003c44 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60bb      	str	r3, [r7, #8]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039b2:	2b40      	cmp	r3, #64	@ 0x40
 80039b4:	f040 80ce 	bne.w	8003b54 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80039c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 80a9 	beq.w	8003b20 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80039d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039d6:	429a      	cmp	r2, r3
 80039d8:	f080 80a2 	bcs.w	8003b20 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80039e2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039ee:	f000 8088 	beq.w	8003b02 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003a08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003a0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	330c      	adds	r3, #12
 8003a1a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003a1e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a22:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003a2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003a2e:	e841 2300 	strex	r3, r2, [r1]
 8003a32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003a36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1d9      	bne.n	80039f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	3314      	adds	r3, #20
 8003a44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003a4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3314      	adds	r3, #20
 8003a5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003a62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003a66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003a6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003a74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e1      	bne.n	8003a3e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	3314      	adds	r3, #20
 8003a80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003a84:	e853 3f00 	ldrex	r3, [r3]
 8003a88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003a8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003a8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	3314      	adds	r3, #20
 8003a9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003aa0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003aa4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003aa6:	e841 2300 	strex	r3, r2, [r1]
 8003aaa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003aac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1e3      	bne.n	8003a7a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2220      	movs	r2, #32
 8003ab6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	330c      	adds	r3, #12
 8003ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003aca:	e853 3f00 	ldrex	r3, [r3]
 8003ace:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ad0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ad2:	f023 0310 	bic.w	r3, r3, #16
 8003ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	330c      	adds	r3, #12
 8003ae0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003ae4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003ae6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ae8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003aea:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003aec:	e841 2300 	strex	r3, r2, [r1]
 8003af0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003af2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d1e3      	bne.n	8003ac0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fd ff95 	bl	8001a2c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2202      	movs	r2, #2
 8003b06:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f8e3 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003b1e:	e0b3      	b.n	8003c88 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b24:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	f040 80ad 	bne.w	8003c88 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b38:	f040 80a6 	bne.w	8003c88 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003b46:	4619      	mov	r1, r3
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f8cb 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
      return;
 8003b4e:	e09b      	b.n	8003c88 <HAL_UART_IRQHandler+0x548>
 8003b50:	0800415b 	.word	0x0800415b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	1ad3      	subs	r3, r2, r3
 8003b60:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 808e 	beq.w	8003c8c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8003b70:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	f000 8089 	beq.w	8003c8c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	330c      	adds	r3, #12
 8003b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b84:	e853 3f00 	ldrex	r3, [r3]
 8003b88:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	330c      	adds	r3, #12
 8003b9a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003b9e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ba0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003ba4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ba6:	e841 2300 	strex	r3, r2, [r1]
 8003baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1e3      	bne.n	8003b7a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	3314      	adds	r3, #20
 8003bb8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bbc:	e853 3f00 	ldrex	r3, [r3]
 8003bc0:	623b      	str	r3, [r7, #32]
   return(result);
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	3314      	adds	r3, #20
 8003bd2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003bd6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bda:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bdc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bde:	e841 2300 	strex	r3, r2, [r1]
 8003be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1e3      	bne.n	8003bb2 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	330c      	adds	r3, #12
 8003bfe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	e853 3f00 	ldrex	r3, [r3]
 8003c06:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0310 	bic.w	r3, r3, #16
 8003c0e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	330c      	adds	r3, #12
 8003c18:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003c1c:	61fa      	str	r2, [r7, #28]
 8003c1e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c20:	69b9      	ldr	r1, [r7, #24]
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	e841 2300 	strex	r3, r2, [r1]
 8003c28:	617b      	str	r3, [r7, #20]
   return(result);
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d1e3      	bne.n	8003bf8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003c36:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f851 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003c42:	e023      	b.n	8003c8c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d009      	beq.n	8003c64 <HAL_UART_IRQHandler+0x524>
 8003c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fa8d 	bl	800417c <UART_Transmit_IT>
    return;
 8003c62:	e014      	b.n	8003c8e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003c64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00e      	beq.n	8003c8e <HAL_UART_IRQHandler+0x54e>
 8003c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d008      	beq.n	8003c8e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 facd 	bl	800421c <UART_EndTransmit_IT>
    return;
 8003c82:	e004      	b.n	8003c8e <HAL_UART_IRQHandler+0x54e>
    return;
 8003c84:	bf00      	nop
 8003c86:	e002      	b.n	8003c8e <HAL_UART_IRQHandler+0x54e>
      return;
 8003c88:	bf00      	nop
 8003c8a:	e000      	b.n	8003c8e <HAL_UART_IRQHandler+0x54e>
      return;
 8003c8c:	bf00      	nop
  }
}
 8003c8e:	37e8      	adds	r7, #232	@ 0xe8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b09c      	sub	sp, #112	@ 0x70
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d08:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d172      	bne.n	8003dfe <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	330c      	adds	r3, #12
 8003d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d28:	e853 3f00 	ldrex	r3, [r3]
 8003d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003d3e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003d40:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d42:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003d44:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d1e5      	bne.n	8003d1e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	3314      	adds	r3, #20
 8003d58:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5c:	e853 3f00 	ldrex	r3, [r3]
 8003d60:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d64:	f023 0301 	bic.w	r3, r3, #1
 8003d68:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	3314      	adds	r3, #20
 8003d70:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003d72:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d74:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d76:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d78:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d7a:	e841 2300 	strex	r3, r2, [r1]
 8003d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d1e5      	bne.n	8003d52 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3314      	adds	r3, #20
 8003d8c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	e853 3f00 	ldrex	r3, [r3]
 8003d94:	623b      	str	r3, [r7, #32]
   return(result);
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d9c:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	3314      	adds	r3, #20
 8003da4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003da6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dae:	e841 2300 	strex	r3, r2, [r1]
 8003db2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1e5      	bne.n	8003d86 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003dba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003dc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d119      	bne.n	8003dfe <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	330c      	adds	r3, #12
 8003dd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	e853 3f00 	ldrex	r3, [r3]
 8003dd8:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f023 0310 	bic.w	r3, r3, #16
 8003de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	330c      	adds	r3, #12
 8003de8:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003dea:	61fa      	str	r2, [r7, #28]
 8003dec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dee:	69b9      	ldr	r1, [r7, #24]
 8003df0:	69fa      	ldr	r2, [r7, #28]
 8003df2:	e841 2300 	strex	r3, r2, [r1]
 8003df6:	617b      	str	r3, [r7, #20]
   return(result);
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d1e5      	bne.n	8003dca <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e00:	2200      	movs	r2, #0
 8003e02:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d106      	bne.n	8003e1a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003e0e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e10:	4619      	mov	r1, r3
 8003e12:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003e14:	f7ff ff66 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e18:	e002      	b.n	8003e20 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003e1a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003e1c:	f7ff ff44 	bl	8003ca8 <HAL_UART_RxCpltCallback>
}
 8003e20:	bf00      	nop
 8003e22:	3770      	adds	r7, #112	@ 0x70
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d108      	bne.n	8003e56 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e48:	085b      	lsrs	r3, r3, #1
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	4619      	mov	r1, r3
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff ff48 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003e54:	e002      	b.n	8003e5c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f7ff ff30 	bl	8003cbc <HAL_UART_RxHalfCpltCallback>
}
 8003e5c:	bf00      	nop
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}

08003e64 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e74:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e80:	2b80      	cmp	r3, #128	@ 0x80
 8003e82:	bf0c      	ite	eq
 8003e84:	2301      	moveq	r3, #1
 8003e86:	2300      	movne	r3, #0
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b21      	cmp	r3, #33	@ 0x21
 8003e96:	d108      	bne.n	8003eaa <UART_DMAError+0x46>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8003ea4:	68b8      	ldr	r0, [r7, #8]
 8003ea6:	f000 f8cd 	bl	8004044 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695b      	ldr	r3, [r3, #20]
 8003eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb4:	2b40      	cmp	r3, #64	@ 0x40
 8003eb6:	bf0c      	ite	eq
 8003eb8:	2301      	moveq	r3, #1
 8003eba:	2300      	movne	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b22      	cmp	r3, #34	@ 0x22
 8003eca:	d108      	bne.n	8003ede <UART_DMAError+0x7a>
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d005      	beq.n	8003ede <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003ed8:	68b8      	ldr	r0, [r7, #8]
 8003eda:	f000 f8db 	bl	8004094 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee2:	f043 0210 	orr.w	r2, r3, #16
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003eea:	68b8      	ldr	r0, [r7, #8]
 8003eec:	f7ff fef0 	bl	8003cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ef0:	bf00      	nop
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b098      	sub	sp, #96	@ 0x60
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	4613      	mov	r3, r2
 8003f04:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003f06:	68ba      	ldr	r2, [r7, #8]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	88fa      	ldrh	r2, [r7, #6]
 8003f10:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2200      	movs	r2, #0
 8003f16:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2222      	movs	r2, #34	@ 0x22
 8003f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f24:	4a44      	ldr	r2, [pc, #272]	@ (8004038 <UART_Start_Receive_DMA+0x140>)
 8003f26:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f2c:	4a43      	ldr	r2, [pc, #268]	@ (800403c <UART_Start_Receive_DMA+0x144>)
 8003f2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f34:	4a42      	ldr	r2, [pc, #264]	@ (8004040 <UART_Start_Receive_DMA+0x148>)
 8003f36:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003f40:	f107 0308 	add.w	r3, r7, #8
 8003f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4619      	mov	r1, r3
 8003f52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	88fb      	ldrh	r3, [r7, #6]
 8003f58:	f7fd fd10 	bl	800197c <HAL_DMA_Start_IT>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d008      	beq.n	8003f74 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2210      	movs	r2, #16
 8003f66:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e05d      	b.n	8004030 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	613b      	str	r3, [r7, #16]
 8003f88:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d019      	beq.n	8003fc6 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	330c      	adds	r3, #12
 8003f98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f9c:	e853 3f00 	ldrex	r3, [r3]
 8003fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	330c      	adds	r3, #12
 8003fb0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fb2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fb6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003fb8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003fba:	e841 2300 	strex	r3, r2, [r1]
 8003fbe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003fc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e5      	bne.n	8003f92 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3314      	adds	r3, #20
 8003fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fd0:	e853 3f00 	ldrex	r3, [r3]
 8003fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd8:	f043 0301 	orr.w	r3, r3, #1
 8003fdc:	657b      	str	r3, [r7, #84]	@ 0x54
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	3314      	adds	r3, #20
 8003fe4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003fe6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003fe8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003fec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003fee:	e841 2300 	strex	r3, r2, [r1]
 8003ff2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e5      	bne.n	8003fc6 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	3314      	adds	r3, #20
 8004000:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	e853 3f00 	ldrex	r3, [r3]
 8004008:	617b      	str	r3, [r7, #20]
   return(result);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004010:	653b      	str	r3, [r7, #80]	@ 0x50
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3314      	adds	r3, #20
 8004018:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800401a:	627a      	str	r2, [r7, #36]	@ 0x24
 800401c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401e:	6a39      	ldr	r1, [r7, #32]
 8004020:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004022:	e841 2300 	strex	r3, r2, [r1]
 8004026:	61fb      	str	r3, [r7, #28]
   return(result);
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1e5      	bne.n	8003ffa <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800402e:	2300      	movs	r3, #0
}
 8004030:	4618      	mov	r0, r3
 8004032:	3760      	adds	r7, #96	@ 0x60
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	08003cfd 	.word	0x08003cfd
 800403c:	08003e29 	.word	0x08003e29
 8004040:	08003e65 	.word	0x08003e65

08004044 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004044:	b480      	push	{r7}
 8004046:	b089      	sub	sp, #36	@ 0x24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	330c      	adds	r3, #12
 8004052:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	e853 3f00 	ldrex	r3, [r3]
 800405a:	60bb      	str	r3, [r7, #8]
   return(result);
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004062:	61fb      	str	r3, [r7, #28]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	330c      	adds	r3, #12
 800406a:	69fa      	ldr	r2, [r7, #28]
 800406c:	61ba      	str	r2, [r7, #24]
 800406e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004070:	6979      	ldr	r1, [r7, #20]
 8004072:	69ba      	ldr	r2, [r7, #24]
 8004074:	e841 2300 	strex	r3, r2, [r1]
 8004078:	613b      	str	r3, [r7, #16]
   return(result);
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1e5      	bne.n	800404c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2220      	movs	r2, #32
 8004084:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004088:	bf00      	nop
 800408a:	3724      	adds	r7, #36	@ 0x24
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b095      	sub	sp, #84	@ 0x54
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	330c      	adds	r3, #12
 80040a2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040a6:	e853 3f00 	ldrex	r3, [r3]
 80040aa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	330c      	adds	r3, #12
 80040ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80040be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80040c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80040c4:	e841 2300 	strex	r3, r2, [r1]
 80040c8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80040ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d1e5      	bne.n	800409c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3314      	adds	r3, #20
 80040d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	61fb      	str	r3, [r7, #28]
   return(result);
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	f023 0301 	bic.w	r3, r3, #1
 80040e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	3314      	adds	r3, #20
 80040ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e5      	bne.n	80040d0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004108:	2b01      	cmp	r3, #1
 800410a:	d119      	bne.n	8004140 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	330c      	adds	r3, #12
 8004112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	60bb      	str	r3, [r7, #8]
   return(result);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f023 0310 	bic.w	r3, r3, #16
 8004122:	647b      	str	r3, [r7, #68]	@ 0x44
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	330c      	adds	r3, #12
 800412a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800412c:	61ba      	str	r2, [r7, #24]
 800412e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6979      	ldr	r1, [r7, #20]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	613b      	str	r3, [r7, #16]
   return(result);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e5      	bne.n	800410c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800414e:	bf00      	nop
 8004150:	3754      	adds	r7, #84	@ 0x54
 8004152:	46bd      	mov	sp, r7
 8004154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004158:	4770      	bx	lr

0800415a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b084      	sub	sp, #16
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004166:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff fdae 	bl	8003cd0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b21      	cmp	r3, #33	@ 0x21
 800418e:	d13e      	bne.n	800420e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004198:	d114      	bne.n	80041c4 <UART_Transmit_IT+0x48>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	691b      	ldr	r3, [r3, #16]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d110      	bne.n	80041c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	881b      	ldrh	r3, [r3, #0]
 80041ac:	461a      	mov	r2, r3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	1c9a      	adds	r2, r3, #2
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	621a      	str	r2, [r3, #32]
 80041c2:	e008      	b.n	80041d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6a1b      	ldr	r3, [r3, #32]
 80041c8:	1c59      	adds	r1, r3, #1
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6211      	str	r1, [r2, #32]
 80041ce:	781a      	ldrb	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29b      	uxth	r3, r3
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	4619      	mov	r1, r3
 80041e4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10f      	bne.n	800420a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004208:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800420a:	2300      	movs	r3, #0
 800420c:	e000      	b.n	8004210 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800420e:	2302      	movs	r3, #2
  }
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	68da      	ldr	r2, [r3, #12]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004232:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff fd29 	bl	8003c94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b08c      	sub	sp, #48	@ 0x30
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004254:	2300      	movs	r3, #0
 8004256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004258:	2300      	movs	r3, #0
 800425a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004262:	b2db      	uxtb	r3, r3
 8004264:	2b22      	cmp	r3, #34	@ 0x22
 8004266:	f040 80aa 	bne.w	80043be <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004272:	d115      	bne.n	80042a0 <UART_Receive_IT+0x54>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	691b      	ldr	r3, [r3, #16]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d111      	bne.n	80042a0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004280:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	b29b      	uxth	r3, r3
 800428a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428e:	b29a      	uxth	r2, r3
 8004290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004292:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004298:	1c9a      	adds	r2, r3, #2
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	629a      	str	r2, [r3, #40]	@ 0x28
 800429e:	e024      	b.n	80042ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ae:	d007      	beq.n	80042c0 <UART_Receive_IT+0x74>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <UART_Receive_IT+0x82>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d106      	bne.n	80042ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ca:	701a      	strb	r2, [r3, #0]
 80042cc:	e008      	b.n	80042e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	685b      	ldr	r3, [r3, #4]
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	3b01      	subs	r3, #1
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	4619      	mov	r1, r3
 80042f8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d15d      	bne.n	80043ba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68da      	ldr	r2, [r3, #12]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f022 0220 	bic.w	r2, r2, #32
 800430c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	68da      	ldr	r2, [r3, #12]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800431c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	695a      	ldr	r2, [r3, #20]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f022 0201 	bic.w	r2, r2, #1
 800432c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004340:	2b01      	cmp	r3, #1
 8004342:	d135      	bne.n	80043b0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	330c      	adds	r3, #12
 8004350:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	e853 3f00 	ldrex	r3, [r3]
 8004358:	613b      	str	r3, [r7, #16]
   return(result);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	f023 0310 	bic.w	r3, r3, #16
 8004360:	627b      	str	r3, [r7, #36]	@ 0x24
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	330c      	adds	r3, #12
 8004368:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800436a:	623a      	str	r2, [r7, #32]
 800436c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	69f9      	ldr	r1, [r7, #28]
 8004370:	6a3a      	ldr	r2, [r7, #32]
 8004372:	e841 2300 	strex	r3, r2, [r1]
 8004376:	61bb      	str	r3, [r7, #24]
   return(result);
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1e5      	bne.n	800434a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b10      	cmp	r3, #16
 800438a:	d10a      	bne.n	80043a2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800438c:	2300      	movs	r3, #0
 800438e:	60fb      	str	r3, [r7, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043a6:	4619      	mov	r1, r3
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	f7ff fc9b 	bl	8003ce4 <HAL_UARTEx_RxEventCallback>
 80043ae:	e002      	b.n	80043b6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f7ff fc79 	bl	8003ca8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e002      	b.n	80043c0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80043ba:	2300      	movs	r3, #0
 80043bc:	e000      	b.n	80043c0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80043be:	2302      	movs	r3, #2
  }
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3730      	adds	r7, #48	@ 0x30
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043cc:	b0c0      	sub	sp, #256	@ 0x100
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e4:	68d9      	ldr	r1, [r3, #12]
 80043e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	ea40 0301 	orr.w	r3, r0, r1
 80043f0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f6:	689a      	ldr	r2, [r3, #8]
 80043f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	431a      	orrs	r2, r3
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	431a      	orrs	r2, r3
 8004408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	4313      	orrs	r3, r2
 8004410:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004420:	f021 010c 	bic.w	r1, r1, #12
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800442e:	430b      	orrs	r3, r1
 8004430:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800443e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004442:	6999      	ldr	r1, [r3, #24]
 8004444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	ea40 0301 	orr.w	r3, r0, r1
 800444e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4b8f      	ldr	r3, [pc, #572]	@ (8004694 <UART_SetConfig+0x2cc>)
 8004458:	429a      	cmp	r2, r3
 800445a:	d005      	beq.n	8004468 <UART_SetConfig+0xa0>
 800445c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	4b8d      	ldr	r3, [pc, #564]	@ (8004698 <UART_SetConfig+0x2d0>)
 8004464:	429a      	cmp	r2, r3
 8004466:	d104      	bne.n	8004472 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004468:	f7fe f8c6 	bl	80025f8 <HAL_RCC_GetPCLK2Freq>
 800446c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004470:	e003      	b.n	800447a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004472:	f7fe f8ad 	bl	80025d0 <HAL_RCC_GetPCLK1Freq>
 8004476:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800447a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004484:	f040 810c 	bne.w	80046a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004488:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800448c:	2200      	movs	r2, #0
 800448e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004492:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004496:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800449a:	4622      	mov	r2, r4
 800449c:	462b      	mov	r3, r5
 800449e:	1891      	adds	r1, r2, r2
 80044a0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80044a2:	415b      	adcs	r3, r3
 80044a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80044a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80044aa:	4621      	mov	r1, r4
 80044ac:	eb12 0801 	adds.w	r8, r2, r1
 80044b0:	4629      	mov	r1, r5
 80044b2:	eb43 0901 	adc.w	r9, r3, r1
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044ca:	4690      	mov	r8, r2
 80044cc:	4699      	mov	r9, r3
 80044ce:	4623      	mov	r3, r4
 80044d0:	eb18 0303 	adds.w	r3, r8, r3
 80044d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80044d8:	462b      	mov	r3, r5
 80044da:	eb49 0303 	adc.w	r3, r9, r3
 80044de:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80044e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80044ee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80044f2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80044f6:	460b      	mov	r3, r1
 80044f8:	18db      	adds	r3, r3, r3
 80044fa:	653b      	str	r3, [r7, #80]	@ 0x50
 80044fc:	4613      	mov	r3, r2
 80044fe:	eb42 0303 	adc.w	r3, r2, r3
 8004502:	657b      	str	r3, [r7, #84]	@ 0x54
 8004504:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004508:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800450c:	f7fb fe80 	bl	8000210 <__aeabi_uldivmod>
 8004510:	4602      	mov	r2, r0
 8004512:	460b      	mov	r3, r1
 8004514:	4b61      	ldr	r3, [pc, #388]	@ (800469c <UART_SetConfig+0x2d4>)
 8004516:	fba3 2302 	umull	r2, r3, r3, r2
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	011c      	lsls	r4, r3, #4
 800451e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004522:	2200      	movs	r2, #0
 8004524:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004528:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800452c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004530:	4642      	mov	r2, r8
 8004532:	464b      	mov	r3, r9
 8004534:	1891      	adds	r1, r2, r2
 8004536:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004538:	415b      	adcs	r3, r3
 800453a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800453c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004540:	4641      	mov	r1, r8
 8004542:	eb12 0a01 	adds.w	sl, r2, r1
 8004546:	4649      	mov	r1, r9
 8004548:	eb43 0b01 	adc.w	fp, r3, r1
 800454c:	f04f 0200 	mov.w	r2, #0
 8004550:	f04f 0300 	mov.w	r3, #0
 8004554:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004558:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800455c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004560:	4692      	mov	sl, r2
 8004562:	469b      	mov	fp, r3
 8004564:	4643      	mov	r3, r8
 8004566:	eb1a 0303 	adds.w	r3, sl, r3
 800456a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800456e:	464b      	mov	r3, r9
 8004570:	eb4b 0303 	adc.w	r3, fp, r3
 8004574:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004584:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004588:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800458c:	460b      	mov	r3, r1
 800458e:	18db      	adds	r3, r3, r3
 8004590:	643b      	str	r3, [r7, #64]	@ 0x40
 8004592:	4613      	mov	r3, r2
 8004594:	eb42 0303 	adc.w	r3, r2, r3
 8004598:	647b      	str	r3, [r7, #68]	@ 0x44
 800459a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800459e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80045a2:	f7fb fe35 	bl	8000210 <__aeabi_uldivmod>
 80045a6:	4602      	mov	r2, r0
 80045a8:	460b      	mov	r3, r1
 80045aa:	4611      	mov	r1, r2
 80045ac:	4b3b      	ldr	r3, [pc, #236]	@ (800469c <UART_SetConfig+0x2d4>)
 80045ae:	fba3 2301 	umull	r2, r3, r3, r1
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	2264      	movs	r2, #100	@ 0x64
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	1acb      	subs	r3, r1, r3
 80045bc:	00db      	lsls	r3, r3, #3
 80045be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80045c2:	4b36      	ldr	r3, [pc, #216]	@ (800469c <UART_SetConfig+0x2d4>)
 80045c4:	fba3 2302 	umull	r2, r3, r3, r2
 80045c8:	095b      	lsrs	r3, r3, #5
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80045d0:	441c      	add	r4, r3
 80045d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045d6:	2200      	movs	r2, #0
 80045d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80045dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80045e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80045e4:	4642      	mov	r2, r8
 80045e6:	464b      	mov	r3, r9
 80045e8:	1891      	adds	r1, r2, r2
 80045ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80045ec:	415b      	adcs	r3, r3
 80045ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80045f4:	4641      	mov	r1, r8
 80045f6:	1851      	adds	r1, r2, r1
 80045f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80045fa:	4649      	mov	r1, r9
 80045fc:	414b      	adcs	r3, r1
 80045fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800460c:	4659      	mov	r1, fp
 800460e:	00cb      	lsls	r3, r1, #3
 8004610:	4651      	mov	r1, sl
 8004612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004616:	4651      	mov	r1, sl
 8004618:	00ca      	lsls	r2, r1, #3
 800461a:	4610      	mov	r0, r2
 800461c:	4619      	mov	r1, r3
 800461e:	4603      	mov	r3, r0
 8004620:	4642      	mov	r2, r8
 8004622:	189b      	adds	r3, r3, r2
 8004624:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004628:	464b      	mov	r3, r9
 800462a:	460a      	mov	r2, r1
 800462c:	eb42 0303 	adc.w	r3, r2, r3
 8004630:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004640:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004644:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004648:	460b      	mov	r3, r1
 800464a:	18db      	adds	r3, r3, r3
 800464c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800464e:	4613      	mov	r3, r2
 8004650:	eb42 0303 	adc.w	r3, r2, r3
 8004654:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004656:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800465a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800465e:	f7fb fdd7 	bl	8000210 <__aeabi_uldivmod>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4b0d      	ldr	r3, [pc, #52]	@ (800469c <UART_SetConfig+0x2d4>)
 8004668:	fba3 1302 	umull	r1, r3, r3, r2
 800466c:	095b      	lsrs	r3, r3, #5
 800466e:	2164      	movs	r1, #100	@ 0x64
 8004670:	fb01 f303 	mul.w	r3, r1, r3
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	00db      	lsls	r3, r3, #3
 8004678:	3332      	adds	r3, #50	@ 0x32
 800467a:	4a08      	ldr	r2, [pc, #32]	@ (800469c <UART_SetConfig+0x2d4>)
 800467c:	fba2 2303 	umull	r2, r3, r2, r3
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	f003 0207 	and.w	r2, r3, #7
 8004686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4422      	add	r2, r4
 800468e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004690:	e106      	b.n	80048a0 <UART_SetConfig+0x4d8>
 8004692:	bf00      	nop
 8004694:	40011000 	.word	0x40011000
 8004698:	40011400 	.word	0x40011400
 800469c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046a4:	2200      	movs	r2, #0
 80046a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80046aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80046ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80046b2:	4642      	mov	r2, r8
 80046b4:	464b      	mov	r3, r9
 80046b6:	1891      	adds	r1, r2, r2
 80046b8:	6239      	str	r1, [r7, #32]
 80046ba:	415b      	adcs	r3, r3
 80046bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80046be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046c2:	4641      	mov	r1, r8
 80046c4:	1854      	adds	r4, r2, r1
 80046c6:	4649      	mov	r1, r9
 80046c8:	eb43 0501 	adc.w	r5, r3, r1
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	00eb      	lsls	r3, r5, #3
 80046d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046da:	00e2      	lsls	r2, r4, #3
 80046dc:	4614      	mov	r4, r2
 80046de:	461d      	mov	r5, r3
 80046e0:	4643      	mov	r3, r8
 80046e2:	18e3      	adds	r3, r4, r3
 80046e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80046e8:	464b      	mov	r3, r9
 80046ea:	eb45 0303 	adc.w	r3, r5, r3
 80046ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80046f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80046fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004702:	f04f 0200 	mov.w	r2, #0
 8004706:	f04f 0300 	mov.w	r3, #0
 800470a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800470e:	4629      	mov	r1, r5
 8004710:	008b      	lsls	r3, r1, #2
 8004712:	4621      	mov	r1, r4
 8004714:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004718:	4621      	mov	r1, r4
 800471a:	008a      	lsls	r2, r1, #2
 800471c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004720:	f7fb fd76 	bl	8000210 <__aeabi_uldivmod>
 8004724:	4602      	mov	r2, r0
 8004726:	460b      	mov	r3, r1
 8004728:	4b60      	ldr	r3, [pc, #384]	@ (80048ac <UART_SetConfig+0x4e4>)
 800472a:	fba3 2302 	umull	r2, r3, r3, r2
 800472e:	095b      	lsrs	r3, r3, #5
 8004730:	011c      	lsls	r4, r3, #4
 8004732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004736:	2200      	movs	r2, #0
 8004738:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800473c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004740:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004744:	4642      	mov	r2, r8
 8004746:	464b      	mov	r3, r9
 8004748:	1891      	adds	r1, r2, r2
 800474a:	61b9      	str	r1, [r7, #24]
 800474c:	415b      	adcs	r3, r3
 800474e:	61fb      	str	r3, [r7, #28]
 8004750:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004754:	4641      	mov	r1, r8
 8004756:	1851      	adds	r1, r2, r1
 8004758:	6139      	str	r1, [r7, #16]
 800475a:	4649      	mov	r1, r9
 800475c:	414b      	adcs	r3, r1
 800475e:	617b      	str	r3, [r7, #20]
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800476c:	4659      	mov	r1, fp
 800476e:	00cb      	lsls	r3, r1, #3
 8004770:	4651      	mov	r1, sl
 8004772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004776:	4651      	mov	r1, sl
 8004778:	00ca      	lsls	r2, r1, #3
 800477a:	4610      	mov	r0, r2
 800477c:	4619      	mov	r1, r3
 800477e:	4603      	mov	r3, r0
 8004780:	4642      	mov	r2, r8
 8004782:	189b      	adds	r3, r3, r2
 8004784:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004788:	464b      	mov	r3, r9
 800478a:	460a      	mov	r2, r1
 800478c:	eb42 0303 	adc.w	r3, r2, r3
 8004790:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800479e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80047ac:	4649      	mov	r1, r9
 80047ae:	008b      	lsls	r3, r1, #2
 80047b0:	4641      	mov	r1, r8
 80047b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047b6:	4641      	mov	r1, r8
 80047b8:	008a      	lsls	r2, r1, #2
 80047ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80047be:	f7fb fd27 	bl	8000210 <__aeabi_uldivmod>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4611      	mov	r1, r2
 80047c8:	4b38      	ldr	r3, [pc, #224]	@ (80048ac <UART_SetConfig+0x4e4>)
 80047ca:	fba3 2301 	umull	r2, r3, r3, r1
 80047ce:	095b      	lsrs	r3, r3, #5
 80047d0:	2264      	movs	r2, #100	@ 0x64
 80047d2:	fb02 f303 	mul.w	r3, r2, r3
 80047d6:	1acb      	subs	r3, r1, r3
 80047d8:	011b      	lsls	r3, r3, #4
 80047da:	3332      	adds	r3, #50	@ 0x32
 80047dc:	4a33      	ldr	r2, [pc, #204]	@ (80048ac <UART_SetConfig+0x4e4>)
 80047de:	fba2 2303 	umull	r2, r3, r2, r3
 80047e2:	095b      	lsrs	r3, r3, #5
 80047e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047e8:	441c      	add	r4, r3
 80047ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047ee:	2200      	movs	r2, #0
 80047f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80047f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80047f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80047f8:	4642      	mov	r2, r8
 80047fa:	464b      	mov	r3, r9
 80047fc:	1891      	adds	r1, r2, r2
 80047fe:	60b9      	str	r1, [r7, #8]
 8004800:	415b      	adcs	r3, r3
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004808:	4641      	mov	r1, r8
 800480a:	1851      	adds	r1, r2, r1
 800480c:	6039      	str	r1, [r7, #0]
 800480e:	4649      	mov	r1, r9
 8004810:	414b      	adcs	r3, r1
 8004812:	607b      	str	r3, [r7, #4]
 8004814:	f04f 0200 	mov.w	r2, #0
 8004818:	f04f 0300 	mov.w	r3, #0
 800481c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004820:	4659      	mov	r1, fp
 8004822:	00cb      	lsls	r3, r1, #3
 8004824:	4651      	mov	r1, sl
 8004826:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800482a:	4651      	mov	r1, sl
 800482c:	00ca      	lsls	r2, r1, #3
 800482e:	4610      	mov	r0, r2
 8004830:	4619      	mov	r1, r3
 8004832:	4603      	mov	r3, r0
 8004834:	4642      	mov	r2, r8
 8004836:	189b      	adds	r3, r3, r2
 8004838:	66bb      	str	r3, [r7, #104]	@ 0x68
 800483a:	464b      	mov	r3, r9
 800483c:	460a      	mov	r2, r1
 800483e:	eb42 0303 	adc.w	r3, r2, r3
 8004842:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	663b      	str	r3, [r7, #96]	@ 0x60
 800484e:	667a      	str	r2, [r7, #100]	@ 0x64
 8004850:	f04f 0200 	mov.w	r2, #0
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800485c:	4649      	mov	r1, r9
 800485e:	008b      	lsls	r3, r1, #2
 8004860:	4641      	mov	r1, r8
 8004862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004866:	4641      	mov	r1, r8
 8004868:	008a      	lsls	r2, r1, #2
 800486a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800486e:	f7fb fccf 	bl	8000210 <__aeabi_uldivmod>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4b0d      	ldr	r3, [pc, #52]	@ (80048ac <UART_SetConfig+0x4e4>)
 8004878:	fba3 1302 	umull	r1, r3, r3, r2
 800487c:	095b      	lsrs	r3, r3, #5
 800487e:	2164      	movs	r1, #100	@ 0x64
 8004880:	fb01 f303 	mul.w	r3, r1, r3
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	011b      	lsls	r3, r3, #4
 8004888:	3332      	adds	r3, #50	@ 0x32
 800488a:	4a08      	ldr	r2, [pc, #32]	@ (80048ac <UART_SetConfig+0x4e4>)
 800488c:	fba2 2303 	umull	r2, r3, r2, r3
 8004890:	095b      	lsrs	r3, r3, #5
 8004892:	f003 020f 	and.w	r2, r3, #15
 8004896:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4422      	add	r2, r4
 800489e:	609a      	str	r2, [r3, #8]
}
 80048a0:	bf00      	nop
 80048a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80048a6:	46bd      	mov	sp, r7
 80048a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ac:	51eb851f 	.word	0x51eb851f

080048b0 <__NVIC_SetPriority>:
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	4603      	mov	r3, r0
 80048b8:	6039      	str	r1, [r7, #0]
 80048ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	db0a      	blt.n	80048da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	b2da      	uxtb	r2, r3
 80048c8:	490c      	ldr	r1, [pc, #48]	@ (80048fc <__NVIC_SetPriority+0x4c>)
 80048ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ce:	0112      	lsls	r2, r2, #4
 80048d0:	b2d2      	uxtb	r2, r2
 80048d2:	440b      	add	r3, r1
 80048d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80048d8:	e00a      	b.n	80048f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	b2da      	uxtb	r2, r3
 80048de:	4908      	ldr	r1, [pc, #32]	@ (8004900 <__NVIC_SetPriority+0x50>)
 80048e0:	79fb      	ldrb	r3, [r7, #7]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	3b04      	subs	r3, #4
 80048e8:	0112      	lsls	r2, r2, #4
 80048ea:	b2d2      	uxtb	r2, r2
 80048ec:	440b      	add	r3, r1
 80048ee:	761a      	strb	r2, [r3, #24]
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr
 80048fc:	e000e100 	.word	0xe000e100
 8004900:	e000ed00 	.word	0xe000ed00

08004904 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004904:	b580      	push	{r7, lr}
 8004906:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004908:	4b05      	ldr	r3, [pc, #20]	@ (8004920 <SysTick_Handler+0x1c>)
 800490a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800490c:	f001 ffba 	bl	8006884 <xTaskGetSchedulerState>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	d001      	beq.n	800491a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004916:	f002 feaf 	bl	8007678 <xPortSysTickHandler>
  }
}
 800491a:	bf00      	nop
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	e000e010 	.word	0xe000e010

08004924 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004928:	2100      	movs	r1, #0
 800492a:	f06f 0004 	mvn.w	r0, #4
 800492e:	f7ff ffbf 	bl	80048b0 <__NVIC_SetPriority>
#endif
}
 8004932:	bf00      	nop
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800493e:	f3ef 8305 	mrs	r3, IPSR
 8004942:	603b      	str	r3, [r7, #0]
  return(result);
 8004944:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004946:	2b00      	cmp	r3, #0
 8004948:	d003      	beq.n	8004952 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800494a:	f06f 0305 	mvn.w	r3, #5
 800494e:	607b      	str	r3, [r7, #4]
 8004950:	e00c      	b.n	800496c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004952:	4b0a      	ldr	r3, [pc, #40]	@ (800497c <osKernelInitialize+0x44>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d105      	bne.n	8004966 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800495a:	4b08      	ldr	r3, [pc, #32]	@ (800497c <osKernelInitialize+0x44>)
 800495c:	2201      	movs	r2, #1
 800495e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004960:	2300      	movs	r3, #0
 8004962:	607b      	str	r3, [r7, #4]
 8004964:	e002      	b.n	800496c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004966:	f04f 33ff 	mov.w	r3, #4294967295
 800496a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800496c:	687b      	ldr	r3, [r7, #4]
}
 800496e:	4618      	mov	r0, r3
 8004970:	370c      	adds	r7, #12
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	20000218 	.word	0x20000218

08004980 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004980:	b580      	push	{r7, lr}
 8004982:	b082      	sub	sp, #8
 8004984:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004986:	f3ef 8305 	mrs	r3, IPSR
 800498a:	603b      	str	r3, [r7, #0]
  return(result);
 800498c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004992:	f06f 0305 	mvn.w	r3, #5
 8004996:	607b      	str	r3, [r7, #4]
 8004998:	e010      	b.n	80049bc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800499a:	4b0b      	ldr	r3, [pc, #44]	@ (80049c8 <osKernelStart+0x48>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d109      	bne.n	80049b6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80049a2:	f7ff ffbf 	bl	8004924 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80049a6:	4b08      	ldr	r3, [pc, #32]	@ (80049c8 <osKernelStart+0x48>)
 80049a8:	2202      	movs	r2, #2
 80049aa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80049ac:	f001 fb06 	bl	8005fbc <vTaskStartScheduler>
      stat = osOK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	607b      	str	r3, [r7, #4]
 80049b4:	e002      	b.n	80049bc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80049b6:	f04f 33ff 	mov.w	r3, #4294967295
 80049ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80049bc:	687b      	ldr	r3, [r7, #4]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3708      	adds	r7, #8
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}
 80049c6:	bf00      	nop
 80049c8:	20000218 	.word	0x20000218

080049cc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b08e      	sub	sp, #56	@ 0x38
 80049d0:	af04      	add	r7, sp, #16
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80049d8:	2300      	movs	r3, #0
 80049da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80049dc:	f3ef 8305 	mrs	r3, IPSR
 80049e0:	617b      	str	r3, [r7, #20]
  return(result);
 80049e2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d17e      	bne.n	8004ae6 <osThreadNew+0x11a>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d07b      	beq.n	8004ae6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80049ee:	2380      	movs	r3, #128	@ 0x80
 80049f0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80049f2:	2318      	movs	r3, #24
 80049f4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80049f6:	2300      	movs	r3, #0
 80049f8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80049fa:	f04f 33ff 	mov.w	r3, #4294967295
 80049fe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d045      	beq.n	8004a92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <osThreadNew+0x48>
        name = attr->name;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d008      	beq.n	8004a3a <osThreadNew+0x6e>
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b38      	cmp	r3, #56	@ 0x38
 8004a2c:	d805      	bhi.n	8004a3a <osThreadNew+0x6e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <osThreadNew+0x72>
        return (NULL);
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	e054      	b.n	8004ae8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	089b      	lsrs	r3, r3, #2
 8004a4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d00e      	beq.n	8004a74 <osThreadNew+0xa8>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2ba7      	cmp	r3, #167	@ 0xa7
 8004a5c:	d90a      	bls.n	8004a74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d006      	beq.n	8004a74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	695b      	ldr	r3, [r3, #20]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d002      	beq.n	8004a74 <osThreadNew+0xa8>
        mem = 1;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	61bb      	str	r3, [r7, #24]
 8004a72:	e010      	b.n	8004a96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10c      	bne.n	8004a96 <osThreadNew+0xca>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d108      	bne.n	8004a96 <osThreadNew+0xca>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	691b      	ldr	r3, [r3, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d104      	bne.n	8004a96 <osThreadNew+0xca>
          mem = 0;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	61bb      	str	r3, [r7, #24]
 8004a90:	e001      	b.n	8004a96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004a92:	2300      	movs	r3, #0
 8004a94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d110      	bne.n	8004abe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004aa4:	9202      	str	r2, [sp, #8]
 8004aa6:	9301      	str	r3, [sp, #4]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	9300      	str	r3, [sp, #0]
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	6a3a      	ldr	r2, [r7, #32]
 8004ab0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ab2:	68f8      	ldr	r0, [r7, #12]
 8004ab4:	f001 f80e 	bl	8005ad4 <xTaskCreateStatic>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	613b      	str	r3, [r7, #16]
 8004abc:	e013      	b.n	8004ae6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d110      	bne.n	8004ae6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ac4:	6a3b      	ldr	r3, [r7, #32]
 8004ac6:	b29a      	uxth	r2, r3
 8004ac8:	f107 0310 	add.w	r3, r7, #16
 8004acc:	9301      	str	r3, [sp, #4]
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	9300      	str	r3, [sp, #0]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f001 f85c 	bl	8005b94 <xTaskCreate>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d001      	beq.n	8004ae6 <osThreadNew+0x11a>
            hTask = NULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ae6:	693b      	ldr	r3, [r7, #16]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3728      	adds	r7, #40	@ 0x28
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004af8:	f3ef 8305 	mrs	r3, IPSR
 8004afc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004afe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <osDelay+0x1c>
    stat = osErrorISR;
 8004b04:	f06f 0305 	mvn.w	r3, #5
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	e007      	b.n	8004b1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f001 fa1a 	bl	8005f50 <vTaskDelay>
    }
  }

  return (stat);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	4a07      	ldr	r2, [pc, #28]	@ (8004b54 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4a06      	ldr	r2, [pc, #24]	@ (8004b58 <vApplicationGetIdleTaskMemory+0x30>)
 8004b3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2280      	movs	r2, #128	@ 0x80
 8004b44:	601a      	str	r2, [r3, #0]
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	2000021c 	.word	0x2000021c
 8004b58:	200002c4 	.word	0x200002c4

08004b5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	4a07      	ldr	r2, [pc, #28]	@ (8004b88 <vApplicationGetTimerTaskMemory+0x2c>)
 8004b6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	4a06      	ldr	r2, [pc, #24]	@ (8004b8c <vApplicationGetTimerTaskMemory+0x30>)
 8004b72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004b7a:	601a      	str	r2, [r3, #0]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	200004c4 	.word	0x200004c4
 8004b8c:	2000056c 	.word	0x2000056c

08004b90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b90:	b480      	push	{r7}
 8004b92:	b083      	sub	sp, #12
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f103 0208 	add.w	r2, r3, #8
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f103 0208 	add.w	r2, r3, #8
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f103 0208 	add.w	r2, r3, #8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004bde:	bf00      	nop
 8004be0:	370c      	adds	r7, #12
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr

08004bea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bea:	b480      	push	{r7}
 8004bec:	b085      	sub	sp, #20
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	601a      	str	r2, [r3, #0]
}
 8004c26:	bf00      	nop
 8004c28:	3714      	adds	r7, #20
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr

08004c32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c32:	b480      	push	{r7}
 8004c34:	b085      	sub	sp, #20
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
 8004c3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c48:	d103      	bne.n	8004c52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	e00c      	b.n	8004c6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	3308      	adds	r3, #8
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	e002      	b.n	8004c60 <vListInsert+0x2e>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	60fb      	str	r3, [r7, #12]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d2f6      	bcs.n	8004c5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	68fa      	ldr	r2, [r7, #12]
 8004c80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	601a      	str	r2, [r3, #0]
}
 8004c98:	bf00      	nop
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	6892      	ldr	r2, [r2, #8]
 8004cba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	6852      	ldr	r2, [r2, #4]
 8004cc4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	685b      	ldr	r3, [r3, #4]
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d103      	bne.n	8004cd8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689a      	ldr	r2, [r3, #8]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	1e5a      	subs	r2, r3, #1
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d10b      	bne.n	8004d24 <xQueueGenericReset+0x2c>
	__asm volatile
 8004d0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d10:	f383 8811 	msr	BASEPRI, r3
 8004d14:	f3bf 8f6f 	isb	sy
 8004d18:	f3bf 8f4f 	dsb	sy
 8004d1c:	60bb      	str	r3, [r7, #8]
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	e7fd      	b.n	8004d20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d24:	f002 fc18 	bl	8007558 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681a      	ldr	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d30:	68f9      	ldr	r1, [r7, #12]
 8004d32:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	441a      	add	r2, r3
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2200      	movs	r2, #0
 8004d42:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d54:	3b01      	subs	r3, #1
 8004d56:	68f9      	ldr	r1, [r7, #12]
 8004d58:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004d5a:	fb01 f303 	mul.w	r3, r1, r3
 8004d5e:	441a      	add	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	22ff      	movs	r2, #255	@ 0xff
 8004d68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	22ff      	movs	r2, #255	@ 0xff
 8004d70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d114      	bne.n	8004da4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d01a      	beq.n	8004db8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	3310      	adds	r3, #16
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 fbb6 	bl	80064f8 <xTaskRemoveFromEventList>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d012      	beq.n	8004db8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d92:	4b0d      	ldr	r3, [pc, #52]	@ (8004dc8 <xQueueGenericReset+0xd0>)
 8004d94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d98:	601a      	str	r2, [r3, #0]
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	e009      	b.n	8004db8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	3310      	adds	r3, #16
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7ff fef1 	bl	8004b90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	3324      	adds	r3, #36	@ 0x24
 8004db2:	4618      	mov	r0, r3
 8004db4:	f7ff feec 	bl	8004b90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004db8:	f002 fc00 	bl	80075bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dbc:	2301      	movs	r3, #1
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	e000ed04 	.word	0xe000ed04

08004dcc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08e      	sub	sp, #56	@ 0x38
 8004dd0:	af02      	add	r7, sp, #8
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10b      	bne.n	8004df8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004df2:	bf00      	nop
 8004df4:	bf00      	nop
 8004df6:	e7fd      	b.n	8004df4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10b      	bne.n	8004e16 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004e10:	bf00      	nop
 8004e12:	bf00      	nop
 8004e14:	e7fd      	b.n	8004e12 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <xQueueGenericCreateStatic+0x56>
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <xQueueGenericCreateStatic+0x5a>
 8004e22:	2301      	movs	r3, #1
 8004e24:	e000      	b.n	8004e28 <xQueueGenericCreateStatic+0x5c>
 8004e26:	2300      	movs	r3, #0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d10b      	bne.n	8004e44 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e30:	f383 8811 	msr	BASEPRI, r3
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	623b      	str	r3, [r7, #32]
}
 8004e3e:	bf00      	nop
 8004e40:	bf00      	nop
 8004e42:	e7fd      	b.n	8004e40 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d102      	bne.n	8004e50 <xQueueGenericCreateStatic+0x84>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <xQueueGenericCreateStatic+0x88>
 8004e50:	2301      	movs	r3, #1
 8004e52:	e000      	b.n	8004e56 <xQueueGenericCreateStatic+0x8a>
 8004e54:	2300      	movs	r3, #0
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d10b      	bne.n	8004e72 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	61fb      	str	r3, [r7, #28]
}
 8004e6c:	bf00      	nop
 8004e6e:	bf00      	nop
 8004e70:	e7fd      	b.n	8004e6e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004e72:	2350      	movs	r3, #80	@ 0x50
 8004e74:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	2b50      	cmp	r3, #80	@ 0x50
 8004e7a:	d00b      	beq.n	8004e94 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	61bb      	str	r3, [r7, #24]
}
 8004e8e:	bf00      	nop
 8004e90:	bf00      	nop
 8004e92:	e7fd      	b.n	8004e90 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e94:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00d      	beq.n	8004ebc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ea8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004eae:	9300      	str	r3, [sp, #0]
 8004eb0:	4613      	mov	r3, r2
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	68b9      	ldr	r1, [r7, #8]
 8004eb6:	68f8      	ldr	r0, [r7, #12]
 8004eb8:	f000 f840 	bl	8004f3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3730      	adds	r7, #48	@ 0x30
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}

08004ec6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ec6:	b580      	push	{r7, lr}
 8004ec8:	b08a      	sub	sp, #40	@ 0x28
 8004eca:	af02      	add	r7, sp, #8
 8004ecc:	60f8      	str	r0, [r7, #12]
 8004ece:	60b9      	str	r1, [r7, #8]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d10b      	bne.n	8004ef2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	613b      	str	r3, [r7, #16]
}
 8004eec:	bf00      	nop
 8004eee:	bf00      	nop
 8004ef0:	e7fd      	b.n	8004eee <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	68ba      	ldr	r2, [r7, #8]
 8004ef6:	fb02 f303 	mul.w	r3, r2, r3
 8004efa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	3350      	adds	r3, #80	@ 0x50
 8004f00:	4618      	mov	r0, r3
 8004f02:	f002 fc4b 	bl	800779c <pvPortMalloc>
 8004f06:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d011      	beq.n	8004f32 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	3350      	adds	r3, #80	@ 0x50
 8004f16:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f20:	79fa      	ldrb	r2, [r7, #7]
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	9300      	str	r3, [sp, #0]
 8004f26:	4613      	mov	r3, r2
 8004f28:	697a      	ldr	r2, [r7, #20]
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	68f8      	ldr	r0, [r7, #12]
 8004f2e:	f000 f805 	bl	8004f3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f32:	69bb      	ldr	r3, [r7, #24]
	}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3720      	adds	r7, #32
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	607a      	str	r2, [r7, #4]
 8004f48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d103      	bne.n	8004f58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f50:	69bb      	ldr	r3, [r7, #24]
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	e002      	b.n	8004f5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	68ba      	ldr	r2, [r7, #8]
 8004f68:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f6a:	2101      	movs	r1, #1
 8004f6c:	69b8      	ldr	r0, [r7, #24]
 8004f6e:	f7ff fec3 	bl	8004cf8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	78fa      	ldrb	r2, [r7, #3]
 8004f76:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004f7a:	bf00      	nop
 8004f7c:	3710      	adds	r7, #16
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
	...

08004f84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08e      	sub	sp, #56	@ 0x38
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f92:	2300      	movs	r3, #0
 8004f94:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10b      	bne.n	8004fb8 <xQueueGenericSend+0x34>
	__asm volatile
 8004fa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa4:	f383 8811 	msr	BASEPRI, r3
 8004fa8:	f3bf 8f6f 	isb	sy
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004fb2:	bf00      	nop
 8004fb4:	bf00      	nop
 8004fb6:	e7fd      	b.n	8004fb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d103      	bne.n	8004fc6 <xQueueGenericSend+0x42>
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <xQueueGenericSend+0x46>
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e000      	b.n	8004fcc <xQueueGenericSend+0x48>
 8004fca:	2300      	movs	r3, #0
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10b      	bne.n	8004fe8 <xQueueGenericSend+0x64>
	__asm volatile
 8004fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd4:	f383 8811 	msr	BASEPRI, r3
 8004fd8:	f3bf 8f6f 	isb	sy
 8004fdc:	f3bf 8f4f 	dsb	sy
 8004fe0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004fe2:	bf00      	nop
 8004fe4:	bf00      	nop
 8004fe6:	e7fd      	b.n	8004fe4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b02      	cmp	r3, #2
 8004fec:	d103      	bne.n	8004ff6 <xQueueGenericSend+0x72>
 8004fee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ff0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <xQueueGenericSend+0x76>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e000      	b.n	8004ffc <xQueueGenericSend+0x78>
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10b      	bne.n	8005018 <xQueueGenericSend+0x94>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	623b      	str	r3, [r7, #32]
}
 8005012:	bf00      	nop
 8005014:	bf00      	nop
 8005016:	e7fd      	b.n	8005014 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005018:	f001 fc34 	bl	8006884 <xTaskGetSchedulerState>
 800501c:	4603      	mov	r3, r0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d102      	bne.n	8005028 <xQueueGenericSend+0xa4>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d101      	bne.n	800502c <xQueueGenericSend+0xa8>
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <xQueueGenericSend+0xaa>
 800502c:	2300      	movs	r3, #0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10b      	bne.n	800504a <xQueueGenericSend+0xc6>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	61fb      	str	r3, [r7, #28]
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	e7fd      	b.n	8005046 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800504a:	f002 fa85 	bl	8007558 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800504e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005054:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005056:	429a      	cmp	r2, r3
 8005058:	d302      	bcc.n	8005060 <xQueueGenericSend+0xdc>
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	2b02      	cmp	r3, #2
 800505e:	d129      	bne.n	80050b4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005060:	683a      	ldr	r2, [r7, #0]
 8005062:	68b9      	ldr	r1, [r7, #8]
 8005064:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005066:	f000 fbc7 	bl	80057f8 <prvCopyDataToQueue>
 800506a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800506c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800506e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005070:	2b00      	cmp	r3, #0
 8005072:	d010      	beq.n	8005096 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005076:	3324      	adds	r3, #36	@ 0x24
 8005078:	4618      	mov	r0, r3
 800507a:	f001 fa3d 	bl	80064f8 <xTaskRemoveFromEventList>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d013      	beq.n	80050ac <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005084:	4b3f      	ldr	r3, [pc, #252]	@ (8005184 <xQueueGenericSend+0x200>)
 8005086:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800508a:	601a      	str	r2, [r3, #0]
 800508c:	f3bf 8f4f 	dsb	sy
 8005090:	f3bf 8f6f 	isb	sy
 8005094:	e00a      	b.n	80050ac <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005098:	2b00      	cmp	r3, #0
 800509a:	d007      	beq.n	80050ac <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800509c:	4b39      	ldr	r3, [pc, #228]	@ (8005184 <xQueueGenericSend+0x200>)
 800509e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80050ac:	f002 fa86 	bl	80075bc <vPortExitCritical>
				return pdPASS;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e063      	b.n	800517c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80050ba:	f002 fa7f 	bl	80075bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80050be:	2300      	movs	r3, #0
 80050c0:	e05c      	b.n	800517c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80050c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d106      	bne.n	80050d6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80050c8:	f107 0314 	add.w	r3, r7, #20
 80050cc:	4618      	mov	r0, r3
 80050ce:	f001 fa77 	bl	80065c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80050d2:	2301      	movs	r3, #1
 80050d4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80050d6:	f002 fa71 	bl	80075bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80050da:	f000 ffdf 	bl	800609c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80050de:	f002 fa3b 	bl	8007558 <vPortEnterCritical>
 80050e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80050e8:	b25b      	sxtb	r3, r3
 80050ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ee:	d103      	bne.n	80050f8 <xQueueGenericSend+0x174>
 80050f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80050fe:	b25b      	sxtb	r3, r3
 8005100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005104:	d103      	bne.n	800510e <xQueueGenericSend+0x18a>
 8005106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005108:	2200      	movs	r2, #0
 800510a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800510e:	f002 fa55 	bl	80075bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005112:	1d3a      	adds	r2, r7, #4
 8005114:	f107 0314 	add.w	r3, r7, #20
 8005118:	4611      	mov	r1, r2
 800511a:	4618      	mov	r0, r3
 800511c:	f001 fa66 	bl	80065ec <xTaskCheckForTimeOut>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d124      	bne.n	8005170 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005126:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005128:	f000 fc5e 	bl	80059e8 <prvIsQueueFull>
 800512c:	4603      	mov	r3, r0
 800512e:	2b00      	cmp	r3, #0
 8005130:	d018      	beq.n	8005164 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005134:	3310      	adds	r3, #16
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f001 f98a 	bl	8006454 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005140:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005142:	f000 fbe9 	bl	8005918 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005146:	f000 ffb7 	bl	80060b8 <xTaskResumeAll>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	f47f af7c 	bne.w	800504a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005152:	4b0c      	ldr	r3, [pc, #48]	@ (8005184 <xQueueGenericSend+0x200>)
 8005154:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	e772      	b.n	800504a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005164:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005166:	f000 fbd7 	bl	8005918 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800516a:	f000 ffa5 	bl	80060b8 <xTaskResumeAll>
 800516e:	e76c      	b.n	800504a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005170:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005172:	f000 fbd1 	bl	8005918 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005176:	f000 ff9f 	bl	80060b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800517a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800517c:	4618      	mov	r0, r3
 800517e:	3738      	adds	r7, #56	@ 0x38
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	e000ed04 	.word	0xe000ed04

08005188 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b090      	sub	sp, #64	@ 0x40
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800519a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519c:	2b00      	cmp	r3, #0
 800519e:	d10b      	bne.n	80051b8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80051a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051a4:	f383 8811 	msr	BASEPRI, r3
 80051a8:	f3bf 8f6f 	isb	sy
 80051ac:	f3bf 8f4f 	dsb	sy
 80051b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051b2:	bf00      	nop
 80051b4:	bf00      	nop
 80051b6:	e7fd      	b.n	80051b4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051b8:	68bb      	ldr	r3, [r7, #8]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d103      	bne.n	80051c6 <xQueueGenericSendFromISR+0x3e>
 80051be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <xQueueGenericSendFromISR+0x42>
 80051c6:	2301      	movs	r3, #1
 80051c8:	e000      	b.n	80051cc <xQueueGenericSendFromISR+0x44>
 80051ca:	2300      	movs	r3, #0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d10b      	bne.n	80051e8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80051d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80051e2:	bf00      	nop
 80051e4:	bf00      	nop
 80051e6:	e7fd      	b.n	80051e4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d103      	bne.n	80051f6 <xQueueGenericSendFromISR+0x6e>
 80051ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <xQueueGenericSendFromISR+0x72>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <xQueueGenericSendFromISR+0x74>
 80051fa:	2300      	movs	r3, #0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10b      	bne.n	8005218 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	623b      	str	r3, [r7, #32]
}
 8005212:	bf00      	nop
 8005214:	bf00      	nop
 8005216:	e7fd      	b.n	8005214 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005218:	f002 fa7e 	bl	8007718 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800521c:	f3ef 8211 	mrs	r2, BASEPRI
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	61fa      	str	r2, [r7, #28]
 8005232:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005234:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005236:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800523c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800523e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005240:	429a      	cmp	r2, r3
 8005242:	d302      	bcc.n	800524a <xQueueGenericSendFromISR+0xc2>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b02      	cmp	r3, #2
 8005248:	d12f      	bne.n	80052aa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800524a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800524c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005250:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005254:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005258:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800525a:	683a      	ldr	r2, [r7, #0]
 800525c:	68b9      	ldr	r1, [r7, #8]
 800525e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005260:	f000 faca 	bl	80057f8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005264:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005268:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526c:	d112      	bne.n	8005294 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800526e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005270:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005272:	2b00      	cmp	r3, #0
 8005274:	d016      	beq.n	80052a4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005278:	3324      	adds	r3, #36	@ 0x24
 800527a:	4618      	mov	r0, r3
 800527c:	f001 f93c 	bl	80064f8 <xTaskRemoveFromEventList>
 8005280:	4603      	mov	r3, r0
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00e      	beq.n	80052a4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d00b      	beq.n	80052a4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2201      	movs	r2, #1
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	e007      	b.n	80052a4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005294:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005298:	3301      	adds	r3, #1
 800529a:	b2db      	uxtb	r3, r3
 800529c:	b25a      	sxtb	r2, r3
 800529e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80052a4:	2301      	movs	r3, #1
 80052a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80052a8:	e001      	b.n	80052ae <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80052b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3740      	adds	r7, #64	@ 0x40
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b08e      	sub	sp, #56	@ 0x38
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80052d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d10b      	bne.n	80052f0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 80052d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052dc:	f383 8811 	msr	BASEPRI, r3
 80052e0:	f3bf 8f6f 	isb	sy
 80052e4:	f3bf 8f4f 	dsb	sy
 80052e8:	623b      	str	r3, [r7, #32]
}
 80052ea:	bf00      	nop
 80052ec:	bf00      	nop
 80052ee:	e7fd      	b.n	80052ec <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80052f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <xQueueGiveFromISR+0x4c>
	__asm volatile
 80052f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052fc:	f383 8811 	msr	BASEPRI, r3
 8005300:	f3bf 8f6f 	isb	sy
 8005304:	f3bf 8f4f 	dsb	sy
 8005308:	61fb      	str	r3, [r7, #28]
}
 800530a:	bf00      	nop
 800530c:	bf00      	nop
 800530e:	e7fd      	b.n	800530c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d103      	bne.n	8005320 <xQueueGiveFromISR+0x5c>
 8005318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d101      	bne.n	8005324 <xQueueGiveFromISR+0x60>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <xQueueGiveFromISR+0x62>
 8005324:	2300      	movs	r3, #0
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10b      	bne.n	8005342 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	61bb      	str	r3, [r7, #24]
}
 800533c:	bf00      	nop
 800533e:	bf00      	nop
 8005340:	e7fd      	b.n	800533e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005342:	f002 f9e9 	bl	8007718 <vPortValidateInterruptPriority>
	__asm volatile
 8005346:	f3ef 8211 	mrs	r2, BASEPRI
 800534a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534e:	f383 8811 	msr	BASEPRI, r3
 8005352:	f3bf 8f6f 	isb	sy
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	617a      	str	r2, [r7, #20]
 800535c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800535e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005360:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005362:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005366:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005368:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800536e:	429a      	cmp	r2, r3
 8005370:	d22b      	bcs.n	80053ca <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005372:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005374:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005378:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800537c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005382:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005384:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800538c:	d112      	bne.n	80053b4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800538e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005392:	2b00      	cmp	r3, #0
 8005394:	d016      	beq.n	80053c4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005398:	3324      	adds	r3, #36	@ 0x24
 800539a:	4618      	mov	r0, r3
 800539c:	f001 f8ac 	bl	80064f8 <xTaskRemoveFromEventList>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00e      	beq.n	80053c4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2201      	movs	r2, #1
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	e007      	b.n	80053c4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80053b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053b8:	3301      	adds	r3, #1
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	b25a      	sxtb	r2, r3
 80053be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80053c4:	2301      	movs	r3, #1
 80053c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80053c8:	e001      	b.n	80053ce <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80053ca:	2300      	movs	r3, #0
 80053cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80053ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053d0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f383 8811 	msr	BASEPRI, r3
}
 80053d8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3738      	adds	r7, #56	@ 0x38
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b08c      	sub	sp, #48	@ 0x30
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053f0:	2300      	movs	r3, #0
 80053f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <xQueueReceive+0x32>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	623b      	str	r3, [r7, #32]
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d103      	bne.n	8005424 <xQueueReceive+0x40>
 800541c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800541e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005420:	2b00      	cmp	r3, #0
 8005422:	d101      	bne.n	8005428 <xQueueReceive+0x44>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <xQueueReceive+0x46>
 8005428:	2300      	movs	r3, #0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10b      	bne.n	8005446 <xQueueReceive+0x62>
	__asm volatile
 800542e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005432:	f383 8811 	msr	BASEPRI, r3
 8005436:	f3bf 8f6f 	isb	sy
 800543a:	f3bf 8f4f 	dsb	sy
 800543e:	61fb      	str	r3, [r7, #28]
}
 8005440:	bf00      	nop
 8005442:	bf00      	nop
 8005444:	e7fd      	b.n	8005442 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005446:	f001 fa1d 	bl	8006884 <xTaskGetSchedulerState>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d102      	bne.n	8005456 <xQueueReceive+0x72>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <xQueueReceive+0x76>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <xQueueReceive+0x78>
 800545a:	2300      	movs	r3, #0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10b      	bne.n	8005478 <xQueueReceive+0x94>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	61bb      	str	r3, [r7, #24]
}
 8005472:	bf00      	nop
 8005474:	bf00      	nop
 8005476:	e7fd      	b.n	8005474 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005478:	f002 f86e 	bl	8007558 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800547c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800547e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005480:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	2b00      	cmp	r3, #0
 8005486:	d01f      	beq.n	80054c8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005488:	68b9      	ldr	r1, [r7, #8]
 800548a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800548c:	f000 fa1e 	bl	80058cc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005492:	1e5a      	subs	r2, r3, #1
 8005494:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005496:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d00f      	beq.n	80054c0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054a2:	3310      	adds	r3, #16
 80054a4:	4618      	mov	r0, r3
 80054a6:	f001 f827 	bl	80064f8 <xTaskRemoveFromEventList>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d007      	beq.n	80054c0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054b0:	4b3c      	ldr	r3, [pc, #240]	@ (80055a4 <xQueueReceive+0x1c0>)
 80054b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054c0:	f002 f87c 	bl	80075bc <vPortExitCritical>
				return pdPASS;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e069      	b.n	800559c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d103      	bne.n	80054d6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054ce:	f002 f875 	bl	80075bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054d2:	2300      	movs	r3, #0
 80054d4:	e062      	b.n	800559c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d106      	bne.n	80054ea <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054dc:	f107 0310 	add.w	r3, r7, #16
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 f86d 	bl	80065c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054e6:	2301      	movs	r3, #1
 80054e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054ea:	f002 f867 	bl	80075bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054ee:	f000 fdd5 	bl	800609c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054f2:	f002 f831 	bl	8007558 <vPortEnterCritical>
 80054f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054fc:	b25b      	sxtb	r3, r3
 80054fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005502:	d103      	bne.n	800550c <xQueueReceive+0x128>
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	2200      	movs	r2, #0
 8005508:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800550c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005512:	b25b      	sxtb	r3, r3
 8005514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005518:	d103      	bne.n	8005522 <xQueueReceive+0x13e>
 800551a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005522:	f002 f84b 	bl	80075bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005526:	1d3a      	adds	r2, r7, #4
 8005528:	f107 0310 	add.w	r3, r7, #16
 800552c:	4611      	mov	r1, r2
 800552e:	4618      	mov	r0, r3
 8005530:	f001 f85c 	bl	80065ec <xTaskCheckForTimeOut>
 8005534:	4603      	mov	r3, r0
 8005536:	2b00      	cmp	r3, #0
 8005538:	d123      	bne.n	8005582 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800553a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800553c:	f000 fa3e 	bl	80059bc <prvIsQueueEmpty>
 8005540:	4603      	mov	r3, r0
 8005542:	2b00      	cmp	r3, #0
 8005544:	d017      	beq.n	8005576 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005548:	3324      	adds	r3, #36	@ 0x24
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	4611      	mov	r1, r2
 800554e:	4618      	mov	r0, r3
 8005550:	f000 ff80 	bl	8006454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005554:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005556:	f000 f9df 	bl	8005918 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800555a:	f000 fdad 	bl	80060b8 <xTaskResumeAll>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d189      	bne.n	8005478 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005564:	4b0f      	ldr	r3, [pc, #60]	@ (80055a4 <xQueueReceive+0x1c0>)
 8005566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800556a:	601a      	str	r2, [r3, #0]
 800556c:	f3bf 8f4f 	dsb	sy
 8005570:	f3bf 8f6f 	isb	sy
 8005574:	e780      	b.n	8005478 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005576:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005578:	f000 f9ce 	bl	8005918 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800557c:	f000 fd9c 	bl	80060b8 <xTaskResumeAll>
 8005580:	e77a      	b.n	8005478 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005582:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005584:	f000 f9c8 	bl	8005918 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005588:	f000 fd96 	bl	80060b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800558c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800558e:	f000 fa15 	bl	80059bc <prvIsQueueEmpty>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	f43f af6f 	beq.w	8005478 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800559a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800559c:	4618      	mov	r0, r3
 800559e:	3730      	adds	r7, #48	@ 0x30
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	e000ed04 	.word	0xe000ed04

080055a8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08e      	sub	sp, #56	@ 0x38
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80055b2:	2300      	movs	r3, #0
 80055b4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80055ba:	2300      	movs	r3, #0
 80055bc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10b      	bne.n	80055dc <xQueueSemaphoreTake+0x34>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	623b      	str	r3, [r7, #32]
}
 80055d6:	bf00      	nop
 80055d8:	bf00      	nop
 80055da:	e7fd      	b.n	80055d8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80055dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d00b      	beq.n	80055fc <xQueueSemaphoreTake+0x54>
	__asm volatile
 80055e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	61fb      	str	r3, [r7, #28]
}
 80055f6:	bf00      	nop
 80055f8:	bf00      	nop
 80055fa:	e7fd      	b.n	80055f8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80055fc:	f001 f942 	bl	8006884 <xTaskGetSchedulerState>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d102      	bne.n	800560c <xQueueSemaphoreTake+0x64>
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d101      	bne.n	8005610 <xQueueSemaphoreTake+0x68>
 800560c:	2301      	movs	r3, #1
 800560e:	e000      	b.n	8005612 <xQueueSemaphoreTake+0x6a>
 8005610:	2300      	movs	r3, #0
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10b      	bne.n	800562e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	61bb      	str	r3, [r7, #24]
}
 8005628:	bf00      	nop
 800562a:	bf00      	nop
 800562c:	e7fd      	b.n	800562a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800562e:	f001 ff93 	bl	8007558 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005634:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005636:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563a:	2b00      	cmp	r3, #0
 800563c:	d024      	beq.n	8005688 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800563e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005640:	1e5a      	subs	r2, r3, #1
 8005642:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005644:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005646:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d104      	bne.n	8005658 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800564e:	f001 fa93 	bl	8006b78 <pvTaskIncrementMutexHeldCount>
 8005652:	4602      	mov	r2, r0
 8005654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005656:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d00f      	beq.n	8005680 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005662:	3310      	adds	r3, #16
 8005664:	4618      	mov	r0, r3
 8005666:	f000 ff47 	bl	80064f8 <xTaskRemoveFromEventList>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d007      	beq.n	8005680 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005670:	4b54      	ldr	r3, [pc, #336]	@ (80057c4 <xQueueSemaphoreTake+0x21c>)
 8005672:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	f3bf 8f4f 	dsb	sy
 800567c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005680:	f001 ff9c 	bl	80075bc <vPortExitCritical>
				return pdPASS;
 8005684:	2301      	movs	r3, #1
 8005686:	e098      	b.n	80057ba <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d112      	bne.n	80056b4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800568e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00b      	beq.n	80056ac <xQueueSemaphoreTake+0x104>
	__asm volatile
 8005694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005698:	f383 8811 	msr	BASEPRI, r3
 800569c:	f3bf 8f6f 	isb	sy
 80056a0:	f3bf 8f4f 	dsb	sy
 80056a4:	617b      	str	r3, [r7, #20]
}
 80056a6:	bf00      	nop
 80056a8:	bf00      	nop
 80056aa:	e7fd      	b.n	80056a8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80056ac:	f001 ff86 	bl	80075bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056b0:	2300      	movs	r3, #0
 80056b2:	e082      	b.n	80057ba <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d106      	bne.n	80056c8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056ba:	f107 030c 	add.w	r3, r7, #12
 80056be:	4618      	mov	r0, r3
 80056c0:	f000 ff7e 	bl	80065c0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056c8:	f001 ff78 	bl	80075bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056cc:	f000 fce6 	bl	800609c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056d0:	f001 ff42 	bl	8007558 <vPortEnterCritical>
 80056d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056d6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80056da:	b25b      	sxtb	r3, r3
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e0:	d103      	bne.n	80056ea <xQueueSemaphoreTake+0x142>
 80056e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80056ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ec:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80056f0:	b25b      	sxtb	r3, r3
 80056f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056f6:	d103      	bne.n	8005700 <xQueueSemaphoreTake+0x158>
 80056f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056fa:	2200      	movs	r2, #0
 80056fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005700:	f001 ff5c 	bl	80075bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005704:	463a      	mov	r2, r7
 8005706:	f107 030c 	add.w	r3, r7, #12
 800570a:	4611      	mov	r1, r2
 800570c:	4618      	mov	r0, r3
 800570e:	f000 ff6d 	bl	80065ec <xTaskCheckForTimeOut>
 8005712:	4603      	mov	r3, r0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d132      	bne.n	800577e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005718:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800571a:	f000 f94f 	bl	80059bc <prvIsQueueEmpty>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d026      	beq.n	8005772 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d109      	bne.n	8005740 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800572c:	f001 ff14 	bl	8007558 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	4618      	mov	r0, r3
 8005736:	f001 f8c3 	bl	80068c0 <xTaskPriorityInherit>
 800573a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800573c:	f001 ff3e 	bl	80075bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005742:	3324      	adds	r3, #36	@ 0x24
 8005744:	683a      	ldr	r2, [r7, #0]
 8005746:	4611      	mov	r1, r2
 8005748:	4618      	mov	r0, r3
 800574a:	f000 fe83 	bl	8006454 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800574e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005750:	f000 f8e2 	bl	8005918 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005754:	f000 fcb0 	bl	80060b8 <xTaskResumeAll>
 8005758:	4603      	mov	r3, r0
 800575a:	2b00      	cmp	r3, #0
 800575c:	f47f af67 	bne.w	800562e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8005760:	4b18      	ldr	r3, [pc, #96]	@ (80057c4 <xQueueSemaphoreTake+0x21c>)
 8005762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005766:	601a      	str	r2, [r3, #0]
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	f3bf 8f6f 	isb	sy
 8005770:	e75d      	b.n	800562e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005772:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005774:	f000 f8d0 	bl	8005918 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005778:	f000 fc9e 	bl	80060b8 <xTaskResumeAll>
 800577c:	e757      	b.n	800562e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800577e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005780:	f000 f8ca 	bl	8005918 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005784:	f000 fc98 	bl	80060b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005788:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800578a:	f000 f917 	bl	80059bc <prvIsQueueEmpty>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	f43f af4c 	beq.w	800562e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00d      	beq.n	80057b8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800579c:	f001 fedc 	bl	8007558 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80057a0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80057a2:	f000 f811 	bl	80057c8 <prvGetDisinheritPriorityAfterTimeout>
 80057a6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80057a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057ae:	4618      	mov	r0, r3
 80057b0:	f001 f95e 	bl	8006a70 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80057b4:	f001 ff02 	bl	80075bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3738      	adds	r7, #56	@ 0x38
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
 80057c2:	bf00      	nop
 80057c4:	e000ed04 	.word	0xe000ed04

080057c8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80057c8:	b480      	push	{r7}
 80057ca:	b085      	sub	sp, #20
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d006      	beq.n	80057e6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80057e2:	60fb      	str	r3, [r7, #12]
 80057e4:	e001      	b.n	80057ea <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80057e6:	2300      	movs	r3, #0
 80057e8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80057ea:	68fb      	ldr	r3, [r7, #12]
	}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3714      	adds	r7, #20
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800580c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10d      	bne.n	8005832 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d14d      	bne.n	80058ba <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f001 f8b4 	bl	8006990 <xTaskPriorityDisinherit>
 8005828:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2200      	movs	r2, #0
 800582e:	609a      	str	r2, [r3, #8]
 8005830:	e043      	b.n	80058ba <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d119      	bne.n	800586c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	6858      	ldr	r0, [r3, #4]
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005840:	461a      	mov	r2, r3
 8005842:	68b9      	ldr	r1, [r7, #8]
 8005844:	f002 fa2a 	bl	8007c9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005850:	441a      	add	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685a      	ldr	r2, [r3, #4]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	429a      	cmp	r2, r3
 8005860:	d32b      	bcc.n	80058ba <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	605a      	str	r2, [r3, #4]
 800586a:	e026      	b.n	80058ba <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	68d8      	ldr	r0, [r3, #12]
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005874:	461a      	mov	r2, r3
 8005876:	68b9      	ldr	r1, [r7, #8]
 8005878:	f002 fa10 	bl	8007c9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	68da      	ldr	r2, [r3, #12]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005884:	425b      	negs	r3, r3
 8005886:	441a      	add	r2, r3
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	68da      	ldr	r2, [r3, #12]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	429a      	cmp	r2, r3
 8005896:	d207      	bcs.n	80058a8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	689a      	ldr	r2, [r3, #8]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	425b      	negs	r3, r3
 80058a2:	441a      	add	r2, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2b02      	cmp	r3, #2
 80058ac:	d105      	bne.n	80058ba <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	3b01      	subs	r3, #1
 80058b8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80058c2:	697b      	ldr	r3, [r7, #20]
}
 80058c4:	4618      	mov	r0, r3
 80058c6:	3718      	adds	r7, #24
 80058c8:	46bd      	mov	sp, r7
 80058ca:	bd80      	pop	{r7, pc}

080058cc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b082      	sub	sp, #8
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d018      	beq.n	8005910 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	68da      	ldr	r2, [r3, #12]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e6:	441a      	add	r2, r3
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68da      	ldr	r2, [r3, #12]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d303      	bcc.n	8005900 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68d9      	ldr	r1, [r3, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005908:	461a      	mov	r2, r3
 800590a:	6838      	ldr	r0, [r7, #0]
 800590c:	f002 f9c6 	bl	8007c9c <memcpy>
	}
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005920:	f001 fe1a 	bl	8007558 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800592a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800592c:	e011      	b.n	8005952 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005932:	2b00      	cmp	r3, #0
 8005934:	d012      	beq.n	800595c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	3324      	adds	r3, #36	@ 0x24
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fddc 	bl	80064f8 <xTaskRemoveFromEventList>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d001      	beq.n	800594a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005946:	f000 feb5 	bl	80066b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800594a:	7bfb      	ldrb	r3, [r7, #15]
 800594c:	3b01      	subs	r3, #1
 800594e:	b2db      	uxtb	r3, r3
 8005950:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005956:	2b00      	cmp	r3, #0
 8005958:	dce9      	bgt.n	800592e <prvUnlockQueue+0x16>
 800595a:	e000      	b.n	800595e <prvUnlockQueue+0x46>
					break;
 800595c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	22ff      	movs	r2, #255	@ 0xff
 8005962:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005966:	f001 fe29 	bl	80075bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800596a:	f001 fdf5 	bl	8007558 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005974:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005976:	e011      	b.n	800599c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	691b      	ldr	r3, [r3, #16]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d012      	beq.n	80059a6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	3310      	adds	r3, #16
 8005984:	4618      	mov	r0, r3
 8005986:	f000 fdb7 	bl	80064f8 <xTaskRemoveFromEventList>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d001      	beq.n	8005994 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005990:	f000 fe90 	bl	80066b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005994:	7bbb      	ldrb	r3, [r7, #14]
 8005996:	3b01      	subs	r3, #1
 8005998:	b2db      	uxtb	r3, r3
 800599a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800599c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	dce9      	bgt.n	8005978 <prvUnlockQueue+0x60>
 80059a4:	e000      	b.n	80059a8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059a6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	22ff      	movs	r2, #255	@ 0xff
 80059ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80059b0:	f001 fe04 	bl	80075bc <vPortExitCritical>
}
 80059b4:	bf00      	nop
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059c4:	f001 fdc8 	bl	8007558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d102      	bne.n	80059d6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059d0:	2301      	movs	r3, #1
 80059d2:	60fb      	str	r3, [r7, #12]
 80059d4:	e001      	b.n	80059da <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059da:	f001 fdef 	bl	80075bc <vPortExitCritical>

	return xReturn;
 80059de:	68fb      	ldr	r3, [r7, #12]
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059f0:	f001 fdb2 	bl	8007558 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d102      	bne.n	8005a06 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a00:	2301      	movs	r3, #1
 8005a02:	60fb      	str	r3, [r7, #12]
 8005a04:	e001      	b.n	8005a0a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a0a:	f001 fdd7 	bl	80075bc <vPortExitCritical>

	return xReturn;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3710      	adds	r7, #16
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a22:	2300      	movs	r3, #0
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	e014      	b.n	8005a52 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a28:	4a0f      	ldr	r2, [pc, #60]	@ (8005a68 <vQueueAddToRegistry+0x50>)
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10b      	bne.n	8005a4c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a34:	490c      	ldr	r1, [pc, #48]	@ (8005a68 <vQueueAddToRegistry+0x50>)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a3e:	4a0a      	ldr	r2, [pc, #40]	@ (8005a68 <vQueueAddToRegistry+0x50>)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	00db      	lsls	r3, r3, #3
 8005a44:	4413      	add	r3, r2
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a4a:	e006      	b.n	8005a5a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	60fb      	str	r3, [r7, #12]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2b07      	cmp	r3, #7
 8005a56:	d9e7      	bls.n	8005a28 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a58:	bf00      	nop
 8005a5a:	bf00      	nop
 8005a5c:	3714      	adds	r7, #20
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop
 8005a68:	2000096c 	.word	0x2000096c

08005a6c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b086      	sub	sp, #24
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a7c:	f001 fd6c 	bl	8007558 <vPortEnterCritical>
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005a86:	b25b      	sxtb	r3, r3
 8005a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8c:	d103      	bne.n	8005a96 <vQueueWaitForMessageRestricted+0x2a>
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2200      	movs	r2, #0
 8005a92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005a9c:	b25b      	sxtb	r3, r3
 8005a9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa2:	d103      	bne.n	8005aac <vQueueWaitForMessageRestricted+0x40>
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005aac:	f001 fd86 	bl	80075bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d106      	bne.n	8005ac6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	3324      	adds	r3, #36	@ 0x24
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	68b9      	ldr	r1, [r7, #8]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f000 fced 	bl	80064a0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005ac6:	6978      	ldr	r0, [r7, #20]
 8005ac8:	f7ff ff26 	bl	8005918 <prvUnlockQueue>
	}
 8005acc:	bf00      	nop
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b08e      	sub	sp, #56	@ 0x38
 8005ad8:	af04      	add	r7, sp, #16
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
 8005ae0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10b      	bne.n	8005b00 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	623b      	str	r3, [r7, #32]
}
 8005afa:	bf00      	nop
 8005afc:	bf00      	nop
 8005afe:	e7fd      	b.n	8005afc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d10b      	bne.n	8005b1e <xTaskCreateStatic+0x4a>
	__asm volatile
 8005b06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b0a:	f383 8811 	msr	BASEPRI, r3
 8005b0e:	f3bf 8f6f 	isb	sy
 8005b12:	f3bf 8f4f 	dsb	sy
 8005b16:	61fb      	str	r3, [r7, #28]
}
 8005b18:	bf00      	nop
 8005b1a:	bf00      	nop
 8005b1c:	e7fd      	b.n	8005b1a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b1e:	23a8      	movs	r3, #168	@ 0xa8
 8005b20:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2ba8      	cmp	r3, #168	@ 0xa8
 8005b26:	d00b      	beq.n	8005b40 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2c:	f383 8811 	msr	BASEPRI, r3
 8005b30:	f3bf 8f6f 	isb	sy
 8005b34:	f3bf 8f4f 	dsb	sy
 8005b38:	61bb      	str	r3, [r7, #24]
}
 8005b3a:	bf00      	nop
 8005b3c:	bf00      	nop
 8005b3e:	e7fd      	b.n	8005b3c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b40:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d01e      	beq.n	8005b86 <xTaskCreateStatic+0xb2>
 8005b48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d01b      	beq.n	8005b86 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b50:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005b56:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b60:	2300      	movs	r3, #0
 8005b62:	9303      	str	r3, [sp, #12]
 8005b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b66:	9302      	str	r3, [sp, #8]
 8005b68:	f107 0314 	add.w	r3, r7, #20
 8005b6c:	9301      	str	r3, [sp, #4]
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	68b9      	ldr	r1, [r7, #8]
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f851 	bl	8005c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b80:	f000 f8f6 	bl	8005d70 <prvAddNewTaskToReadyList>
 8005b84:	e001      	b.n	8005b8a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005b86:	2300      	movs	r3, #0
 8005b88:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b8a:	697b      	ldr	r3, [r7, #20]
	}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3728      	adds	r7, #40	@ 0x28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08c      	sub	sp, #48	@ 0x30
 8005b98:	af04      	add	r7, sp, #16
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ba4:	88fb      	ldrh	r3, [r7, #6]
 8005ba6:	009b      	lsls	r3, r3, #2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f001 fdf7 	bl	800779c <pvPortMalloc>
 8005bae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00e      	beq.n	8005bd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005bb6:	20a8      	movs	r0, #168	@ 0xa8
 8005bb8:	f001 fdf0 	bl	800779c <pvPortMalloc>
 8005bbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005bca:	e005      	b.n	8005bd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005bcc:	6978      	ldr	r0, [r7, #20]
 8005bce:	f001 feb3 	bl	8007938 <vPortFree>
 8005bd2:	e001      	b.n	8005bd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d017      	beq.n	8005c0e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005be6:	88fa      	ldrh	r2, [r7, #6]
 8005be8:	2300      	movs	r3, #0
 8005bea:	9303      	str	r3, [sp, #12]
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	9302      	str	r3, [sp, #8]
 8005bf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bf2:	9301      	str	r3, [sp, #4]
 8005bf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f80f 	bl	8005c20 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c02:	69f8      	ldr	r0, [r7, #28]
 8005c04:	f000 f8b4 	bl	8005d70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	61bb      	str	r3, [r7, #24]
 8005c0c:	e002      	b.n	8005c14 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c12:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c14:	69bb      	ldr	r3, [r7, #24]
	}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3720      	adds	r7, #32
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
	...

08005c20 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b088      	sub	sp, #32
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c30:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	461a      	mov	r2, r3
 8005c38:	21a5      	movs	r1, #165	@ 0xa5
 8005c3a:	f001 ff9d 	bl	8007b78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	4413      	add	r3, r2
 8005c4e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c50:	69bb      	ldr	r3, [r7, #24]
 8005c52:	f023 0307 	bic.w	r3, r3, #7
 8005c56:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c58:	69bb      	ldr	r3, [r7, #24]
 8005c5a:	f003 0307 	and.w	r3, r3, #7
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00b      	beq.n	8005c7a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	617b      	str	r3, [r7, #20]
}
 8005c74:	bf00      	nop
 8005c76:	bf00      	nop
 8005c78:	e7fd      	b.n	8005c76 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d01f      	beq.n	8005cc0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c80:	2300      	movs	r3, #0
 8005c82:	61fb      	str	r3, [r7, #28]
 8005c84:	e012      	b.n	8005cac <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c86:	68ba      	ldr	r2, [r7, #8]
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	7819      	ldrb	r1, [r3, #0]
 8005c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	4413      	add	r3, r2
 8005c94:	3334      	adds	r3, #52	@ 0x34
 8005c96:	460a      	mov	r2, r1
 8005c98:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	69fb      	ldr	r3, [r7, #28]
 8005c9e:	4413      	add	r3, r2
 8005ca0:	781b      	ldrb	r3, [r3, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d006      	beq.n	8005cb4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	61fb      	str	r3, [r7, #28]
 8005cac:	69fb      	ldr	r3, [r7, #28]
 8005cae:	2b0f      	cmp	r3, #15
 8005cb0:	d9e9      	bls.n	8005c86 <prvInitialiseNewTask+0x66>
 8005cb2:	e000      	b.n	8005cb6 <prvInitialiseNewTask+0x96>
			{
				break;
 8005cb4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005cbe:	e003      	b.n	8005cc8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005cc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005cc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cca:	2b37      	cmp	r3, #55	@ 0x37
 8005ccc:	d901      	bls.n	8005cd2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005cce:	2337      	movs	r3, #55	@ 0x37
 8005cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005cdc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fe ff71 	bl	8004bd0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf0:	3318      	adds	r3, #24
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7fe ff6c 	bl	8004bd0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cfc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d00:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d06:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d0c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d18:	2200      	movs	r2, #0
 8005d1a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d20:	3354      	adds	r3, #84	@ 0x54
 8005d22:	224c      	movs	r2, #76	@ 0x4c
 8005d24:	2100      	movs	r1, #0
 8005d26:	4618      	mov	r0, r3
 8005d28:	f001 ff26 	bl	8007b78 <memset>
 8005d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8005d64 <prvInitialiseNewTask+0x144>)
 8005d30:	659a      	str	r2, [r3, #88]	@ 0x58
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	4a0c      	ldr	r2, [pc, #48]	@ (8005d68 <prvInitialiseNewTask+0x148>)
 8005d36:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3a:	4a0c      	ldr	r2, [pc, #48]	@ (8005d6c <prvInitialiseNewTask+0x14c>)
 8005d3c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d3e:	683a      	ldr	r2, [r7, #0]
 8005d40:	68f9      	ldr	r1, [r7, #12]
 8005d42:	69b8      	ldr	r0, [r7, #24]
 8005d44:	f001 fada 	bl	80072fc <pxPortInitialiseStack>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d4c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d002      	beq.n	8005d5a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d58:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d5a:	bf00      	nop
 8005d5c:	3720      	adds	r7, #32
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	20004c00 	.word	0x20004c00
 8005d68:	20004c68 	.word	0x20004c68
 8005d6c:	20004cd0 	.word	0x20004cd0

08005d70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d78:	f001 fbee 	bl	8007558 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d7c:	4b2d      	ldr	r3, [pc, #180]	@ (8005e34 <prvAddNewTaskToReadyList+0xc4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3301      	adds	r3, #1
 8005d82:	4a2c      	ldr	r2, [pc, #176]	@ (8005e34 <prvAddNewTaskToReadyList+0xc4>)
 8005d84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d86:	4b2c      	ldr	r3, [pc, #176]	@ (8005e38 <prvAddNewTaskToReadyList+0xc8>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d109      	bne.n	8005da2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d8e:	4a2a      	ldr	r2, [pc, #168]	@ (8005e38 <prvAddNewTaskToReadyList+0xc8>)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d94:	4b27      	ldr	r3, [pc, #156]	@ (8005e34 <prvAddNewTaskToReadyList+0xc4>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d110      	bne.n	8005dbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d9c:	f000 fcae 	bl	80066fc <prvInitialiseTaskLists>
 8005da0:	e00d      	b.n	8005dbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005da2:	4b26      	ldr	r3, [pc, #152]	@ (8005e3c <prvAddNewTaskToReadyList+0xcc>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d109      	bne.n	8005dbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005daa:	4b23      	ldr	r3, [pc, #140]	@ (8005e38 <prvAddNewTaskToReadyList+0xc8>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d802      	bhi.n	8005dbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005db8:	4a1f      	ldr	r2, [pc, #124]	@ (8005e38 <prvAddNewTaskToReadyList+0xc8>)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005dbe:	4b20      	ldr	r3, [pc, #128]	@ (8005e40 <prvAddNewTaskToReadyList+0xd0>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8005e40 <prvAddNewTaskToReadyList+0xd0>)
 8005dc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8005e40 <prvAddNewTaskToReadyList+0xd0>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e44 <prvAddNewTaskToReadyList+0xd4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d903      	bls.n	8005de4 <prvAddNewTaskToReadyList+0x74>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de0:	4a18      	ldr	r2, [pc, #96]	@ (8005e44 <prvAddNewTaskToReadyList+0xd4>)
 8005de2:	6013      	str	r3, [r2, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4a15      	ldr	r2, [pc, #84]	@ (8005e48 <prvAddNewTaskToReadyList+0xd8>)
 8005df2:	441a      	add	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	3304      	adds	r3, #4
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4610      	mov	r0, r2
 8005dfc:	f7fe fef5 	bl	8004bea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e00:	f001 fbdc 	bl	80075bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e04:	4b0d      	ldr	r3, [pc, #52]	@ (8005e3c <prvAddNewTaskToReadyList+0xcc>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00e      	beq.n	8005e2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e38 <prvAddNewTaskToReadyList+0xc8>)
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e16:	429a      	cmp	r2, r3
 8005e18:	d207      	bcs.n	8005e2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8005e4c <prvAddNewTaskToReadyList+0xdc>)
 8005e1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e20:	601a      	str	r2, [r3, #0]
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e2a:	bf00      	nop
 8005e2c:	3708      	adds	r7, #8
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000e80 	.word	0x20000e80
 8005e38:	200009ac 	.word	0x200009ac
 8005e3c:	20000e8c 	.word	0x20000e8c
 8005e40:	20000e9c 	.word	0x20000e9c
 8005e44:	20000e88 	.word	0x20000e88
 8005e48:	200009b0 	.word	0x200009b0
 8005e4c:	e000ed04 	.word	0xe000ed04

08005e50 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08a      	sub	sp, #40	@ 0x28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d10b      	bne.n	8005e7c <vTaskDelayUntil+0x2c>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e68:	f383 8811 	msr	BASEPRI, r3
 8005e6c:	f3bf 8f6f 	isb	sy
 8005e70:	f3bf 8f4f 	dsb	sy
 8005e74:	617b      	str	r3, [r7, #20]
}
 8005e76:	bf00      	nop
 8005e78:	bf00      	nop
 8005e7a:	e7fd      	b.n	8005e78 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d10b      	bne.n	8005e9a <vTaskDelayUntil+0x4a>
	__asm volatile
 8005e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e86:	f383 8811 	msr	BASEPRI, r3
 8005e8a:	f3bf 8f6f 	isb	sy
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	613b      	str	r3, [r7, #16]
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop
 8005e98:	e7fd      	b.n	8005e96 <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8005e9a:	4b2a      	ldr	r3, [pc, #168]	@ (8005f44 <vTaskDelayUntil+0xf4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00b      	beq.n	8005eba <vTaskDelayUntil+0x6a>
	__asm volatile
 8005ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ea6:	f383 8811 	msr	BASEPRI, r3
 8005eaa:	f3bf 8f6f 	isb	sy
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	60fb      	str	r3, [r7, #12]
}
 8005eb4:	bf00      	nop
 8005eb6:	bf00      	nop
 8005eb8:	e7fd      	b.n	8005eb6 <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8005eba:	f000 f8ef 	bl	800609c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8005ebe:	4b22      	ldr	r3, [pc, #136]	@ (8005f48 <vTaskDelayUntil+0xf8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	683a      	ldr	r2, [r7, #0]
 8005eca:	4413      	add	r3, r2
 8005ecc:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6a3a      	ldr	r2, [r7, #32]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d20b      	bcs.n	8005ef0 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69fa      	ldr	r2, [r7, #28]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	d211      	bcs.n	8005f06 <vTaskDelayUntil+0xb6>
 8005ee2:	69fa      	ldr	r2, [r7, #28]
 8005ee4:	6a3b      	ldr	r3, [r7, #32]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d90d      	bls.n	8005f06 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8005eea:	2301      	movs	r3, #1
 8005eec:	627b      	str	r3, [r7, #36]	@ 0x24
 8005eee:	e00a      	b.n	8005f06 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	69fa      	ldr	r2, [r7, #28]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d303      	bcc.n	8005f02 <vTaskDelayUntil+0xb2>
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	6a3b      	ldr	r3, [r7, #32]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d901      	bls.n	8005f06 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8005f02:	2301      	movs	r3, #1
 8005f04:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69fa      	ldr	r2, [r7, #28]
 8005f0a:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d006      	beq.n	8005f20 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8005f12:	69fa      	ldr	r2, [r7, #28]
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	2100      	movs	r1, #0
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f000 fe40 	bl	8006ba0 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8005f20:	f000 f8ca 	bl	80060b8 <xTaskResumeAll>
 8005f24:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f26:	69bb      	ldr	r3, [r7, #24]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d107      	bne.n	8005f3c <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8005f2c:	4b07      	ldr	r3, [pc, #28]	@ (8005f4c <vTaskDelayUntil+0xfc>)
 8005f2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f3c:	bf00      	nop
 8005f3e:	3728      	adds	r7, #40	@ 0x28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}
 8005f44:	20000ea8 	.word	0x20000ea8
 8005f48:	20000e84 	.word	0x20000e84
 8005f4c:	e000ed04 	.word	0xe000ed04

08005f50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b084      	sub	sp, #16
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d018      	beq.n	8005f94 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f62:	4b14      	ldr	r3, [pc, #80]	@ (8005fb4 <vTaskDelay+0x64>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d00b      	beq.n	8005f82 <vTaskDelay+0x32>
	__asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	60bb      	str	r3, [r7, #8]
}
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	e7fd      	b.n	8005f7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005f82:	f000 f88b 	bl	800609c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005f86:	2100      	movs	r1, #0
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f000 fe09 	bl	8006ba0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005f8e:	f000 f893 	bl	80060b8 <xTaskResumeAll>
 8005f92:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d107      	bne.n	8005faa <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005f9a:	4b07      	ldr	r3, [pc, #28]	@ (8005fb8 <vTaskDelay+0x68>)
 8005f9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fa0:	601a      	str	r2, [r3, #0]
 8005fa2:	f3bf 8f4f 	dsb	sy
 8005fa6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005faa:	bf00      	nop
 8005fac:	3710      	adds	r7, #16
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000ea8 	.word	0x20000ea8
 8005fb8:	e000ed04 	.word	0xe000ed04

08005fbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b08a      	sub	sp, #40	@ 0x28
 8005fc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fca:	463a      	mov	r2, r7
 8005fcc:	1d39      	adds	r1, r7, #4
 8005fce:	f107 0308 	add.w	r3, r7, #8
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	f7fe fda8 	bl	8004b28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005fd8:	6839      	ldr	r1, [r7, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	9202      	str	r2, [sp, #8]
 8005fe0:	9301      	str	r3, [sp, #4]
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	460a      	mov	r2, r1
 8005fea:	4924      	ldr	r1, [pc, #144]	@ (800607c <vTaskStartScheduler+0xc0>)
 8005fec:	4824      	ldr	r0, [pc, #144]	@ (8006080 <vTaskStartScheduler+0xc4>)
 8005fee:	f7ff fd71 	bl	8005ad4 <xTaskCreateStatic>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4a23      	ldr	r2, [pc, #140]	@ (8006084 <vTaskStartScheduler+0xc8>)
 8005ff6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ff8:	4b22      	ldr	r3, [pc, #136]	@ (8006084 <vTaskStartScheduler+0xc8>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006000:	2301      	movs	r3, #1
 8006002:	617b      	str	r3, [r7, #20]
 8006004:	e001      	b.n	800600a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006006:	2300      	movs	r3, #0
 8006008:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d102      	bne.n	8006016 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006010:	f000 fe1a 	bl	8006c48 <xTimerCreateTimerTask>
 8006014:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	2b01      	cmp	r3, #1
 800601a:	d11b      	bne.n	8006054 <vTaskStartScheduler+0x98>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	613b      	str	r3, [r7, #16]
}
 800602e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006030:	4b15      	ldr	r3, [pc, #84]	@ (8006088 <vTaskStartScheduler+0xcc>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3354      	adds	r3, #84	@ 0x54
 8006036:	4a15      	ldr	r2, [pc, #84]	@ (800608c <vTaskStartScheduler+0xd0>)
 8006038:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800603a:	4b15      	ldr	r3, [pc, #84]	@ (8006090 <vTaskStartScheduler+0xd4>)
 800603c:	f04f 32ff 	mov.w	r2, #4294967295
 8006040:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006042:	4b14      	ldr	r3, [pc, #80]	@ (8006094 <vTaskStartScheduler+0xd8>)
 8006044:	2201      	movs	r2, #1
 8006046:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006048:	4b13      	ldr	r3, [pc, #76]	@ (8006098 <vTaskStartScheduler+0xdc>)
 800604a:	2200      	movs	r2, #0
 800604c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800604e:	f001 f9df 	bl	8007410 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006052:	e00f      	b.n	8006074 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800605a:	d10b      	bne.n	8006074 <vTaskStartScheduler+0xb8>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	60fb      	str	r3, [r7, #12]
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <vTaskStartScheduler+0xb4>
}
 8006074:	bf00      	nop
 8006076:	3718      	adds	r7, #24
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}
 800607c:	080080d4 	.word	0x080080d4
 8006080:	080066cd 	.word	0x080066cd
 8006084:	20000ea4 	.word	0x20000ea4
 8006088:	200009ac 	.word	0x200009ac
 800608c:	20000010 	.word	0x20000010
 8006090:	20000ea0 	.word	0x20000ea0
 8006094:	20000e8c 	.word	0x20000e8c
 8006098:	20000e84 	.word	0x20000e84

0800609c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80060a0:	4b04      	ldr	r3, [pc, #16]	@ (80060b4 <vTaskSuspendAll+0x18>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	3301      	adds	r3, #1
 80060a6:	4a03      	ldr	r2, [pc, #12]	@ (80060b4 <vTaskSuspendAll+0x18>)
 80060a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060aa:	bf00      	nop
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	20000ea8 	.word	0x20000ea8

080060b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060c2:	2300      	movs	r3, #0
 80060c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060c6:	4b42      	ldr	r3, [pc, #264]	@ (80061d0 <xTaskResumeAll+0x118>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d10b      	bne.n	80060e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80060ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d2:	f383 8811 	msr	BASEPRI, r3
 80060d6:	f3bf 8f6f 	isb	sy
 80060da:	f3bf 8f4f 	dsb	sy
 80060de:	603b      	str	r3, [r7, #0]
}
 80060e0:	bf00      	nop
 80060e2:	bf00      	nop
 80060e4:	e7fd      	b.n	80060e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80060e6:	f001 fa37 	bl	8007558 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80060ea:	4b39      	ldr	r3, [pc, #228]	@ (80061d0 <xTaskResumeAll+0x118>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	3b01      	subs	r3, #1
 80060f0:	4a37      	ldr	r2, [pc, #220]	@ (80061d0 <xTaskResumeAll+0x118>)
 80060f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060f4:	4b36      	ldr	r3, [pc, #216]	@ (80061d0 <xTaskResumeAll+0x118>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d162      	bne.n	80061c2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80060fc:	4b35      	ldr	r3, [pc, #212]	@ (80061d4 <xTaskResumeAll+0x11c>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d05e      	beq.n	80061c2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006104:	e02f      	b.n	8006166 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006106:	4b34      	ldr	r3, [pc, #208]	@ (80061d8 <xTaskResumeAll+0x120>)
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3318      	adds	r3, #24
 8006112:	4618      	mov	r0, r3
 8006114:	f7fe fdc6 	bl	8004ca4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3304      	adds	r3, #4
 800611c:	4618      	mov	r0, r3
 800611e:	f7fe fdc1 	bl	8004ca4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006126:	4b2d      	ldr	r3, [pc, #180]	@ (80061dc <xTaskResumeAll+0x124>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	d903      	bls.n	8006136 <xTaskResumeAll+0x7e>
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006132:	4a2a      	ldr	r2, [pc, #168]	@ (80061dc <xTaskResumeAll+0x124>)
 8006134:	6013      	str	r3, [r2, #0]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800613a:	4613      	mov	r3, r2
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	4413      	add	r3, r2
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4a27      	ldr	r2, [pc, #156]	@ (80061e0 <xTaskResumeAll+0x128>)
 8006144:	441a      	add	r2, r3
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3304      	adds	r3, #4
 800614a:	4619      	mov	r1, r3
 800614c:	4610      	mov	r0, r2
 800614e:	f7fe fd4c 	bl	8004bea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006156:	4b23      	ldr	r3, [pc, #140]	@ (80061e4 <xTaskResumeAll+0x12c>)
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615c:	429a      	cmp	r2, r3
 800615e:	d302      	bcc.n	8006166 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006160:	4b21      	ldr	r3, [pc, #132]	@ (80061e8 <xTaskResumeAll+0x130>)
 8006162:	2201      	movs	r2, #1
 8006164:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006166:	4b1c      	ldr	r3, [pc, #112]	@ (80061d8 <xTaskResumeAll+0x120>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1cb      	bne.n	8006106 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006174:	f000 fb66 	bl	8006844 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006178:	4b1c      	ldr	r3, [pc, #112]	@ (80061ec <xTaskResumeAll+0x134>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d010      	beq.n	80061a6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006184:	f000 f846 	bl	8006214 <xTaskIncrementTick>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800618e:	4b16      	ldr	r3, [pc, #88]	@ (80061e8 <xTaskResumeAll+0x130>)
 8006190:	2201      	movs	r2, #1
 8006192:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	3b01      	subs	r3, #1
 8006198:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d1f1      	bne.n	8006184 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80061a0:	4b12      	ldr	r3, [pc, #72]	@ (80061ec <xTaskResumeAll+0x134>)
 80061a2:	2200      	movs	r2, #0
 80061a4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061a6:	4b10      	ldr	r3, [pc, #64]	@ (80061e8 <xTaskResumeAll+0x130>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d009      	beq.n	80061c2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061ae:	2301      	movs	r3, #1
 80061b0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061b2:	4b0f      	ldr	r3, [pc, #60]	@ (80061f0 <xTaskResumeAll+0x138>)
 80061b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061b8:	601a      	str	r2, [r3, #0]
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061c2:	f001 f9fb 	bl	80075bc <vPortExitCritical>

	return xAlreadyYielded;
 80061c6:	68bb      	ldr	r3, [r7, #8]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000ea8 	.word	0x20000ea8
 80061d4:	20000e80 	.word	0x20000e80
 80061d8:	20000e40 	.word	0x20000e40
 80061dc:	20000e88 	.word	0x20000e88
 80061e0:	200009b0 	.word	0x200009b0
 80061e4:	200009ac 	.word	0x200009ac
 80061e8:	20000e94 	.word	0x20000e94
 80061ec:	20000e90 	.word	0x20000e90
 80061f0:	e000ed04 	.word	0xe000ed04

080061f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80061fa:	4b05      	ldr	r3, [pc, #20]	@ (8006210 <xTaskGetTickCount+0x1c>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006200:	687b      	ldr	r3, [r7, #4]
}
 8006202:	4618      	mov	r0, r3
 8006204:	370c      	adds	r7, #12
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	20000e84 	.word	0x20000e84

08006214 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006214:	b580      	push	{r7, lr}
 8006216:	b086      	sub	sp, #24
 8006218:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800621a:	2300      	movs	r3, #0
 800621c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800621e:	4b4f      	ldr	r3, [pc, #316]	@ (800635c <xTaskIncrementTick+0x148>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	2b00      	cmp	r3, #0
 8006224:	f040 8090 	bne.w	8006348 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006228:	4b4d      	ldr	r3, [pc, #308]	@ (8006360 <xTaskIncrementTick+0x14c>)
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3301      	adds	r3, #1
 800622e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006230:	4a4b      	ldr	r2, [pc, #300]	@ (8006360 <xTaskIncrementTick+0x14c>)
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d121      	bne.n	8006280 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800623c:	4b49      	ldr	r3, [pc, #292]	@ (8006364 <xTaskIncrementTick+0x150>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00b      	beq.n	800625e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	603b      	str	r3, [r7, #0]
}
 8006258:	bf00      	nop
 800625a:	bf00      	nop
 800625c:	e7fd      	b.n	800625a <xTaskIncrementTick+0x46>
 800625e:	4b41      	ldr	r3, [pc, #260]	@ (8006364 <xTaskIncrementTick+0x150>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	4b40      	ldr	r3, [pc, #256]	@ (8006368 <xTaskIncrementTick+0x154>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a3e      	ldr	r2, [pc, #248]	@ (8006364 <xTaskIncrementTick+0x150>)
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	4a3e      	ldr	r2, [pc, #248]	@ (8006368 <xTaskIncrementTick+0x154>)
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6013      	str	r3, [r2, #0]
 8006272:	4b3e      	ldr	r3, [pc, #248]	@ (800636c <xTaskIncrementTick+0x158>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	3301      	adds	r3, #1
 8006278:	4a3c      	ldr	r2, [pc, #240]	@ (800636c <xTaskIncrementTick+0x158>)
 800627a:	6013      	str	r3, [r2, #0]
 800627c:	f000 fae2 	bl	8006844 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006280:	4b3b      	ldr	r3, [pc, #236]	@ (8006370 <xTaskIncrementTick+0x15c>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	429a      	cmp	r2, r3
 8006288:	d349      	bcc.n	800631e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800628a:	4b36      	ldr	r3, [pc, #216]	@ (8006364 <xTaskIncrementTick+0x150>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d104      	bne.n	800629e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006294:	4b36      	ldr	r3, [pc, #216]	@ (8006370 <xTaskIncrementTick+0x15c>)
 8006296:	f04f 32ff 	mov.w	r2, #4294967295
 800629a:	601a      	str	r2, [r3, #0]
					break;
 800629c:	e03f      	b.n	800631e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800629e:	4b31      	ldr	r3, [pc, #196]	@ (8006364 <xTaskIncrementTick+0x150>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d203      	bcs.n	80062be <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062b6:	4a2e      	ldr	r2, [pc, #184]	@ (8006370 <xTaskIncrementTick+0x15c>)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062bc:	e02f      	b.n	800631e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe fcee 	bl	8004ca4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d004      	beq.n	80062da <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	3318      	adds	r3, #24
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fe fce5 	bl	8004ca4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062de:	4b25      	ldr	r3, [pc, #148]	@ (8006374 <xTaskIncrementTick+0x160>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d903      	bls.n	80062ee <xTaskIncrementTick+0xda>
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ea:	4a22      	ldr	r2, [pc, #136]	@ (8006374 <xTaskIncrementTick+0x160>)
 80062ec:	6013      	str	r3, [r2, #0]
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f2:	4613      	mov	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	4413      	add	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006378 <xTaskIncrementTick+0x164>)
 80062fc:	441a      	add	r2, r3
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	3304      	adds	r3, #4
 8006302:	4619      	mov	r1, r3
 8006304:	4610      	mov	r0, r2
 8006306:	f7fe fc70 	bl	8004bea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800630e:	4b1b      	ldr	r3, [pc, #108]	@ (800637c <xTaskIncrementTick+0x168>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006314:	429a      	cmp	r2, r3
 8006316:	d3b8      	bcc.n	800628a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006318:	2301      	movs	r3, #1
 800631a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800631c:	e7b5      	b.n	800628a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800631e:	4b17      	ldr	r3, [pc, #92]	@ (800637c <xTaskIncrementTick+0x168>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006324:	4914      	ldr	r1, [pc, #80]	@ (8006378 <xTaskIncrementTick+0x164>)
 8006326:	4613      	mov	r3, r2
 8006328:	009b      	lsls	r3, r3, #2
 800632a:	4413      	add	r3, r2
 800632c:	009b      	lsls	r3, r3, #2
 800632e:	440b      	add	r3, r1
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d901      	bls.n	800633a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006336:	2301      	movs	r3, #1
 8006338:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800633a:	4b11      	ldr	r3, [pc, #68]	@ (8006380 <xTaskIncrementTick+0x16c>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d007      	beq.n	8006352 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006342:	2301      	movs	r3, #1
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	e004      	b.n	8006352 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006348:	4b0e      	ldr	r3, [pc, #56]	@ (8006384 <xTaskIncrementTick+0x170>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3301      	adds	r3, #1
 800634e:	4a0d      	ldr	r2, [pc, #52]	@ (8006384 <xTaskIncrementTick+0x170>)
 8006350:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006352:	697b      	ldr	r3, [r7, #20]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3718      	adds	r7, #24
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000ea8 	.word	0x20000ea8
 8006360:	20000e84 	.word	0x20000e84
 8006364:	20000e38 	.word	0x20000e38
 8006368:	20000e3c 	.word	0x20000e3c
 800636c:	20000e98 	.word	0x20000e98
 8006370:	20000ea0 	.word	0x20000ea0
 8006374:	20000e88 	.word	0x20000e88
 8006378:	200009b0 	.word	0x200009b0
 800637c:	200009ac 	.word	0x200009ac
 8006380:	20000e94 	.word	0x20000e94
 8006384:	20000e90 	.word	0x20000e90

08006388 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800638e:	4b2b      	ldr	r3, [pc, #172]	@ (800643c <vTaskSwitchContext+0xb4>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d003      	beq.n	800639e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006396:	4b2a      	ldr	r3, [pc, #168]	@ (8006440 <vTaskSwitchContext+0xb8>)
 8006398:	2201      	movs	r2, #1
 800639a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800639c:	e047      	b.n	800642e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800639e:	4b28      	ldr	r3, [pc, #160]	@ (8006440 <vTaskSwitchContext+0xb8>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a4:	4b27      	ldr	r3, [pc, #156]	@ (8006444 <vTaskSwitchContext+0xbc>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	60fb      	str	r3, [r7, #12]
 80063aa:	e011      	b.n	80063d0 <vTaskSwitchContext+0x48>
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d10b      	bne.n	80063ca <vTaskSwitchContext+0x42>
	__asm volatile
 80063b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	607b      	str	r3, [r7, #4]
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop
 80063c8:	e7fd      	b.n	80063c6 <vTaskSwitchContext+0x3e>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	491d      	ldr	r1, [pc, #116]	@ (8006448 <vTaskSwitchContext+0xc0>)
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	4613      	mov	r3, r2
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	4413      	add	r3, r2
 80063da:	009b      	lsls	r3, r3, #2
 80063dc:	440b      	add	r3, r1
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0e3      	beq.n	80063ac <vTaskSwitchContext+0x24>
 80063e4:	68fa      	ldr	r2, [r7, #12]
 80063e6:	4613      	mov	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	4a16      	ldr	r2, [pc, #88]	@ (8006448 <vTaskSwitchContext+0xc0>)
 80063f0:	4413      	add	r3, r2
 80063f2:	60bb      	str	r3, [r7, #8]
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	685a      	ldr	r2, [r3, #4]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	605a      	str	r2, [r3, #4]
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	685a      	ldr	r2, [r3, #4]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	3308      	adds	r3, #8
 8006406:	429a      	cmp	r2, r3
 8006408:	d104      	bne.n	8006414 <vTaskSwitchContext+0x8c>
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	685a      	ldr	r2, [r3, #4]
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	605a      	str	r2, [r3, #4]
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	68db      	ldr	r3, [r3, #12]
 800641a:	4a0c      	ldr	r2, [pc, #48]	@ (800644c <vTaskSwitchContext+0xc4>)
 800641c:	6013      	str	r3, [r2, #0]
 800641e:	4a09      	ldr	r2, [pc, #36]	@ (8006444 <vTaskSwitchContext+0xbc>)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006424:	4b09      	ldr	r3, [pc, #36]	@ (800644c <vTaskSwitchContext+0xc4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	3354      	adds	r3, #84	@ 0x54
 800642a:	4a09      	ldr	r2, [pc, #36]	@ (8006450 <vTaskSwitchContext+0xc8>)
 800642c:	6013      	str	r3, [r2, #0]
}
 800642e:	bf00      	nop
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
 800643a:	bf00      	nop
 800643c:	20000ea8 	.word	0x20000ea8
 8006440:	20000e94 	.word	0x20000e94
 8006444:	20000e88 	.word	0x20000e88
 8006448:	200009b0 	.word	0x200009b0
 800644c:	200009ac 	.word	0x200009ac
 8006450:	20000010 	.word	0x20000010

08006454 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b084      	sub	sp, #16
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d10b      	bne.n	800647c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	60fb      	str	r3, [r7, #12]
}
 8006476:	bf00      	nop
 8006478:	bf00      	nop
 800647a:	e7fd      	b.n	8006478 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800647c:	4b07      	ldr	r3, [pc, #28]	@ (800649c <vTaskPlaceOnEventList+0x48>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	3318      	adds	r3, #24
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f7fe fbd4 	bl	8004c32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800648a:	2101      	movs	r1, #1
 800648c:	6838      	ldr	r0, [r7, #0]
 800648e:	f000 fb87 	bl	8006ba0 <prvAddCurrentTaskToDelayedList>
}
 8006492:	bf00      	nop
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	200009ac 	.word	0x200009ac

080064a0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b086      	sub	sp, #24
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	60f8      	str	r0, [r7, #12]
 80064a8:	60b9      	str	r1, [r7, #8]
 80064aa:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10b      	bne.n	80064ca <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80064b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064b6:	f383 8811 	msr	BASEPRI, r3
 80064ba:	f3bf 8f6f 	isb	sy
 80064be:	f3bf 8f4f 	dsb	sy
 80064c2:	617b      	str	r3, [r7, #20]
}
 80064c4:	bf00      	nop
 80064c6:	bf00      	nop
 80064c8:	e7fd      	b.n	80064c6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064ca:	4b0a      	ldr	r3, [pc, #40]	@ (80064f4 <vTaskPlaceOnEventListRestricted+0x54>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	3318      	adds	r3, #24
 80064d0:	4619      	mov	r1, r3
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f7fe fb89 	bl	8004bea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80064de:	f04f 33ff 	mov.w	r3, #4294967295
 80064e2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064e4:	6879      	ldr	r1, [r7, #4]
 80064e6:	68b8      	ldr	r0, [r7, #8]
 80064e8:	f000 fb5a 	bl	8006ba0 <prvAddCurrentTaskToDelayedList>
	}
 80064ec:	bf00      	nop
 80064ee:	3718      	adds	r7, #24
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	200009ac 	.word	0x200009ac

080064f8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b086      	sub	sp, #24
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10b      	bne.n	8006526 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800650e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	60fb      	str	r3, [r7, #12]
}
 8006520:	bf00      	nop
 8006522:	bf00      	nop
 8006524:	e7fd      	b.n	8006522 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	3318      	adds	r3, #24
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe fbba 	bl	8004ca4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006530:	4b1d      	ldr	r3, [pc, #116]	@ (80065a8 <xTaskRemoveFromEventList+0xb0>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d11d      	bne.n	8006574 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	3304      	adds	r3, #4
 800653c:	4618      	mov	r0, r3
 800653e:	f7fe fbb1 	bl	8004ca4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006546:	4b19      	ldr	r3, [pc, #100]	@ (80065ac <xTaskRemoveFromEventList+0xb4>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	d903      	bls.n	8006556 <xTaskRemoveFromEventList+0x5e>
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006552:	4a16      	ldr	r2, [pc, #88]	@ (80065ac <xTaskRemoveFromEventList+0xb4>)
 8006554:	6013      	str	r3, [r2, #0]
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800655a:	4613      	mov	r3, r2
 800655c:	009b      	lsls	r3, r3, #2
 800655e:	4413      	add	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	4a13      	ldr	r2, [pc, #76]	@ (80065b0 <xTaskRemoveFromEventList+0xb8>)
 8006564:	441a      	add	r2, r3
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	3304      	adds	r3, #4
 800656a:	4619      	mov	r1, r3
 800656c:	4610      	mov	r0, r2
 800656e:	f7fe fb3c 	bl	8004bea <vListInsertEnd>
 8006572:	e005      	b.n	8006580 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	3318      	adds	r3, #24
 8006578:	4619      	mov	r1, r3
 800657a:	480e      	ldr	r0, [pc, #56]	@ (80065b4 <xTaskRemoveFromEventList+0xbc>)
 800657c:	f7fe fb35 	bl	8004bea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006584:	4b0c      	ldr	r3, [pc, #48]	@ (80065b8 <xTaskRemoveFromEventList+0xc0>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800658a:	429a      	cmp	r2, r3
 800658c:	d905      	bls.n	800659a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800658e:	2301      	movs	r3, #1
 8006590:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006592:	4b0a      	ldr	r3, [pc, #40]	@ (80065bc <xTaskRemoveFromEventList+0xc4>)
 8006594:	2201      	movs	r2, #1
 8006596:	601a      	str	r2, [r3, #0]
 8006598:	e001      	b.n	800659e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800659a:	2300      	movs	r3, #0
 800659c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800659e:	697b      	ldr	r3, [r7, #20]
}
 80065a0:	4618      	mov	r0, r3
 80065a2:	3718      	adds	r7, #24
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}
 80065a8:	20000ea8 	.word	0x20000ea8
 80065ac:	20000e88 	.word	0x20000e88
 80065b0:	200009b0 	.word	0x200009b0
 80065b4:	20000e40 	.word	0x20000e40
 80065b8:	200009ac 	.word	0x200009ac
 80065bc:	20000e94 	.word	0x20000e94

080065c0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065c8:	4b06      	ldr	r3, [pc, #24]	@ (80065e4 <vTaskInternalSetTimeOutState+0x24>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065d0:	4b05      	ldr	r3, [pc, #20]	@ (80065e8 <vTaskInternalSetTimeOutState+0x28>)
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	605a      	str	r2, [r3, #4]
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr
 80065e4:	20000e98 	.word	0x20000e98
 80065e8:	20000e84 	.word	0x20000e84

080065ec <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b088      	sub	sp, #32
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
 80065f4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10b      	bne.n	8006614 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	613b      	str	r3, [r7, #16]
}
 800660e:	bf00      	nop
 8006610:	bf00      	nop
 8006612:	e7fd      	b.n	8006610 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10b      	bne.n	8006632 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	60fb      	str	r3, [r7, #12]
}
 800662c:	bf00      	nop
 800662e:	bf00      	nop
 8006630:	e7fd      	b.n	800662e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006632:	f000 ff91 	bl	8007558 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006636:	4b1d      	ldr	r3, [pc, #116]	@ (80066ac <xTaskCheckForTimeOut+0xc0>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	1ad3      	subs	r3, r2, r3
 8006644:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800664e:	d102      	bne.n	8006656 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006650:	2300      	movs	r3, #0
 8006652:	61fb      	str	r3, [r7, #28]
 8006654:	e023      	b.n	800669e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	4b15      	ldr	r3, [pc, #84]	@ (80066b0 <xTaskCheckForTimeOut+0xc4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d007      	beq.n	8006672 <xTaskCheckForTimeOut+0x86>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	69ba      	ldr	r2, [r7, #24]
 8006668:	429a      	cmp	r2, r3
 800666a:	d302      	bcc.n	8006672 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800666c:	2301      	movs	r3, #1
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	e015      	b.n	800669e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	429a      	cmp	r2, r3
 800667a:	d20b      	bcs.n	8006694 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	1ad2      	subs	r2, r2, r3
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7ff ff99 	bl	80065c0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800668e:	2300      	movs	r3, #0
 8006690:	61fb      	str	r3, [r7, #28]
 8006692:	e004      	b.n	800669e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800669a:	2301      	movs	r3, #1
 800669c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800669e:	f000 ff8d 	bl	80075bc <vPortExitCritical>

	return xReturn;
 80066a2:	69fb      	ldr	r3, [r7, #28]
}
 80066a4:	4618      	mov	r0, r3
 80066a6:	3720      	adds	r7, #32
 80066a8:	46bd      	mov	sp, r7
 80066aa:	bd80      	pop	{r7, pc}
 80066ac:	20000e84 	.word	0x20000e84
 80066b0:	20000e98 	.word	0x20000e98

080066b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066b4:	b480      	push	{r7}
 80066b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066b8:	4b03      	ldr	r3, [pc, #12]	@ (80066c8 <vTaskMissedYield+0x14>)
 80066ba:	2201      	movs	r2, #1
 80066bc:	601a      	str	r2, [r3, #0]
}
 80066be:	bf00      	nop
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	20000e94 	.word	0x20000e94

080066cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066d4:	f000 f852 	bl	800677c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066d8:	4b06      	ldr	r3, [pc, #24]	@ (80066f4 <prvIdleTask+0x28>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d9f9      	bls.n	80066d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066e0:	4b05      	ldr	r3, [pc, #20]	@ (80066f8 <prvIdleTask+0x2c>)
 80066e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066f0:	e7f0      	b.n	80066d4 <prvIdleTask+0x8>
 80066f2:	bf00      	nop
 80066f4:	200009b0 	.word	0x200009b0
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006702:	2300      	movs	r3, #0
 8006704:	607b      	str	r3, [r7, #4]
 8006706:	e00c      	b.n	8006722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4a12      	ldr	r2, [pc, #72]	@ (800675c <prvInitialiseTaskLists+0x60>)
 8006714:	4413      	add	r3, r2
 8006716:	4618      	mov	r0, r3
 8006718:	f7fe fa3a 	bl	8004b90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3301      	adds	r3, #1
 8006720:	607b      	str	r3, [r7, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b37      	cmp	r3, #55	@ 0x37
 8006726:	d9ef      	bls.n	8006708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006728:	480d      	ldr	r0, [pc, #52]	@ (8006760 <prvInitialiseTaskLists+0x64>)
 800672a:	f7fe fa31 	bl	8004b90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800672e:	480d      	ldr	r0, [pc, #52]	@ (8006764 <prvInitialiseTaskLists+0x68>)
 8006730:	f7fe fa2e 	bl	8004b90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006734:	480c      	ldr	r0, [pc, #48]	@ (8006768 <prvInitialiseTaskLists+0x6c>)
 8006736:	f7fe fa2b 	bl	8004b90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800673a:	480c      	ldr	r0, [pc, #48]	@ (800676c <prvInitialiseTaskLists+0x70>)
 800673c:	f7fe fa28 	bl	8004b90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006740:	480b      	ldr	r0, [pc, #44]	@ (8006770 <prvInitialiseTaskLists+0x74>)
 8006742:	f7fe fa25 	bl	8004b90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006746:	4b0b      	ldr	r3, [pc, #44]	@ (8006774 <prvInitialiseTaskLists+0x78>)
 8006748:	4a05      	ldr	r2, [pc, #20]	@ (8006760 <prvInitialiseTaskLists+0x64>)
 800674a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800674c:	4b0a      	ldr	r3, [pc, #40]	@ (8006778 <prvInitialiseTaskLists+0x7c>)
 800674e:	4a05      	ldr	r2, [pc, #20]	@ (8006764 <prvInitialiseTaskLists+0x68>)
 8006750:	601a      	str	r2, [r3, #0]
}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	200009b0 	.word	0x200009b0
 8006760:	20000e10 	.word	0x20000e10
 8006764:	20000e24 	.word	0x20000e24
 8006768:	20000e40 	.word	0x20000e40
 800676c:	20000e54 	.word	0x20000e54
 8006770:	20000e6c 	.word	0x20000e6c
 8006774:	20000e38 	.word	0x20000e38
 8006778:	20000e3c 	.word	0x20000e3c

0800677c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006782:	e019      	b.n	80067b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006784:	f000 fee8 	bl	8007558 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006788:	4b10      	ldr	r3, [pc, #64]	@ (80067cc <prvCheckTasksWaitingTermination+0x50>)
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3304      	adds	r3, #4
 8006794:	4618      	mov	r0, r3
 8006796:	f7fe fa85 	bl	8004ca4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800679a:	4b0d      	ldr	r3, [pc, #52]	@ (80067d0 <prvCheckTasksWaitingTermination+0x54>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3b01      	subs	r3, #1
 80067a0:	4a0b      	ldr	r2, [pc, #44]	@ (80067d0 <prvCheckTasksWaitingTermination+0x54>)
 80067a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067a4:	4b0b      	ldr	r3, [pc, #44]	@ (80067d4 <prvCheckTasksWaitingTermination+0x58>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	4a0a      	ldr	r2, [pc, #40]	@ (80067d4 <prvCheckTasksWaitingTermination+0x58>)
 80067ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067ae:	f000 ff05 	bl	80075bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f810 	bl	80067d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067b8:	4b06      	ldr	r3, [pc, #24]	@ (80067d4 <prvCheckTasksWaitingTermination+0x58>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e1      	bne.n	8006784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000e54 	.word	0x20000e54
 80067d0:	20000e80 	.word	0x20000e80
 80067d4:	20000e68 	.word	0x20000e68

080067d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3354      	adds	r3, #84	@ 0x54
 80067e4:	4618      	mov	r0, r3
 80067e6:	f001 f9cf 	bl	8007b88 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d108      	bne.n	8006806 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067f8:	4618      	mov	r0, r3
 80067fa:	f001 f89d 	bl	8007938 <vPortFree>
				vPortFree( pxTCB );
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f001 f89a 	bl	8007938 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006804:	e019      	b.n	800683a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800680c:	2b01      	cmp	r3, #1
 800680e:	d103      	bne.n	8006818 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 f891 	bl	8007938 <vPortFree>
	}
 8006816:	e010      	b.n	800683a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800681e:	2b02      	cmp	r3, #2
 8006820:	d00b      	beq.n	800683a <prvDeleteTCB+0x62>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	60fb      	str	r3, [r7, #12]
}
 8006834:	bf00      	nop
 8006836:	bf00      	nop
 8006838:	e7fd      	b.n	8006836 <prvDeleteTCB+0x5e>
	}
 800683a:	bf00      	nop
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006844:	b480      	push	{r7}
 8006846:	b083      	sub	sp, #12
 8006848:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800684a:	4b0c      	ldr	r3, [pc, #48]	@ (800687c <prvResetNextTaskUnblockTime+0x38>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d104      	bne.n	800685e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006854:	4b0a      	ldr	r3, [pc, #40]	@ (8006880 <prvResetNextTaskUnblockTime+0x3c>)
 8006856:	f04f 32ff 	mov.w	r2, #4294967295
 800685a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800685c:	e008      	b.n	8006870 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800685e:	4b07      	ldr	r3, [pc, #28]	@ (800687c <prvResetNextTaskUnblockTime+0x38>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	68db      	ldr	r3, [r3, #12]
 8006864:	68db      	ldr	r3, [r3, #12]
 8006866:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	4a04      	ldr	r2, [pc, #16]	@ (8006880 <prvResetNextTaskUnblockTime+0x3c>)
 800686e:	6013      	str	r3, [r2, #0]
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	20000e38 	.word	0x20000e38
 8006880:	20000ea0 	.word	0x20000ea0

08006884 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800688a:	4b0b      	ldr	r3, [pc, #44]	@ (80068b8 <xTaskGetSchedulerState+0x34>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d102      	bne.n	8006898 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006892:	2301      	movs	r3, #1
 8006894:	607b      	str	r3, [r7, #4]
 8006896:	e008      	b.n	80068aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006898:	4b08      	ldr	r3, [pc, #32]	@ (80068bc <xTaskGetSchedulerState+0x38>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d102      	bne.n	80068a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068a0:	2302      	movs	r3, #2
 80068a2:	607b      	str	r3, [r7, #4]
 80068a4:	e001      	b.n	80068aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068a6:	2300      	movs	r3, #0
 80068a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068aa:	687b      	ldr	r3, [r7, #4]
	}
 80068ac:	4618      	mov	r0, r3
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr
 80068b8:	20000e8c 	.word	0x20000e8c
 80068bc:	20000ea8 	.word	0x20000ea8

080068c0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b084      	sub	sp, #16
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80068cc:	2300      	movs	r3, #0
 80068ce:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d051      	beq.n	800697a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068da:	4b2a      	ldr	r3, [pc, #168]	@ (8006984 <xTaskPriorityInherit+0xc4>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d241      	bcs.n	8006968 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	699b      	ldr	r3, [r3, #24]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	db06      	blt.n	80068fa <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068ec:	4b25      	ldr	r3, [pc, #148]	@ (8006984 <xTaskPriorityInherit+0xc4>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	6959      	ldr	r1, [r3, #20]
 80068fe:	68bb      	ldr	r3, [r7, #8]
 8006900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006902:	4613      	mov	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	4413      	add	r3, r2
 8006908:	009b      	lsls	r3, r3, #2
 800690a:	4a1f      	ldr	r2, [pc, #124]	@ (8006988 <xTaskPriorityInherit+0xc8>)
 800690c:	4413      	add	r3, r2
 800690e:	4299      	cmp	r1, r3
 8006910:	d122      	bne.n	8006958 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	3304      	adds	r3, #4
 8006916:	4618      	mov	r0, r3
 8006918:	f7fe f9c4 	bl	8004ca4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800691c:	4b19      	ldr	r3, [pc, #100]	@ (8006984 <xTaskPriorityInherit+0xc4>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006926:	68bb      	ldr	r3, [r7, #8]
 8006928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800692a:	4b18      	ldr	r3, [pc, #96]	@ (800698c <xTaskPriorityInherit+0xcc>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	429a      	cmp	r2, r3
 8006930:	d903      	bls.n	800693a <xTaskPriorityInherit+0x7a>
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006936:	4a15      	ldr	r2, [pc, #84]	@ (800698c <xTaskPriorityInherit+0xcc>)
 8006938:	6013      	str	r3, [r2, #0]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693e:	4613      	mov	r3, r2
 8006940:	009b      	lsls	r3, r3, #2
 8006942:	4413      	add	r3, r2
 8006944:	009b      	lsls	r3, r3, #2
 8006946:	4a10      	ldr	r2, [pc, #64]	@ (8006988 <xTaskPriorityInherit+0xc8>)
 8006948:	441a      	add	r2, r3
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	3304      	adds	r3, #4
 800694e:	4619      	mov	r1, r3
 8006950:	4610      	mov	r0, r2
 8006952:	f7fe f94a 	bl	8004bea <vListInsertEnd>
 8006956:	e004      	b.n	8006962 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006958:	4b0a      	ldr	r3, [pc, #40]	@ (8006984 <xTaskPriorityInherit+0xc4>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006962:	2301      	movs	r3, #1
 8006964:	60fb      	str	r3, [r7, #12]
 8006966:	e008      	b.n	800697a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800696c:	4b05      	ldr	r3, [pc, #20]	@ (8006984 <xTaskPriorityInherit+0xc4>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006972:	429a      	cmp	r2, r3
 8006974:	d201      	bcs.n	800697a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006976:	2301      	movs	r3, #1
 8006978:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800697a:	68fb      	ldr	r3, [r7, #12]
	}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	200009ac 	.word	0x200009ac
 8006988:	200009b0 	.word	0x200009b0
 800698c:	20000e88 	.word	0x20000e88

08006990 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800699c:	2300      	movs	r3, #0
 800699e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d058      	beq.n	8006a58 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80069a6:	4b2f      	ldr	r3, [pc, #188]	@ (8006a64 <xTaskPriorityDisinherit+0xd4>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	693a      	ldr	r2, [r7, #16]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d00b      	beq.n	80069c8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	60fb      	str	r3, [r7, #12]
}
 80069c2:	bf00      	nop
 80069c4:	bf00      	nop
 80069c6:	e7fd      	b.n	80069c4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069c8:	693b      	ldr	r3, [r7, #16]
 80069ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10b      	bne.n	80069e8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	60bb      	str	r3, [r7, #8]
}
 80069e2:	bf00      	nop
 80069e4:	bf00      	nop
 80069e6:	e7fd      	b.n	80069e4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ec:	1e5a      	subs	r2, r3, #1
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d02c      	beq.n	8006a58 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069fe:	693b      	ldr	r3, [r7, #16]
 8006a00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d128      	bne.n	8006a58 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	3304      	adds	r3, #4
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe f94a 	bl	8004ca4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a28:	4b0f      	ldr	r3, [pc, #60]	@ (8006a68 <xTaskPriorityDisinherit+0xd8>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d903      	bls.n	8006a38 <xTaskPriorityDisinherit+0xa8>
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a34:	4a0c      	ldr	r2, [pc, #48]	@ (8006a68 <xTaskPriorityDisinherit+0xd8>)
 8006a36:	6013      	str	r3, [r2, #0]
 8006a38:	693b      	ldr	r3, [r7, #16]
 8006a3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4a09      	ldr	r2, [pc, #36]	@ (8006a6c <xTaskPriorityDisinherit+0xdc>)
 8006a46:	441a      	add	r2, r3
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	3304      	adds	r3, #4
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4610      	mov	r0, r2
 8006a50:	f7fe f8cb 	bl	8004bea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a54:	2301      	movs	r3, #1
 8006a56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a58:	697b      	ldr	r3, [r7, #20]
	}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3718      	adds	r7, #24
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	200009ac 	.word	0x200009ac
 8006a68:	20000e88 	.word	0x20000e88
 8006a6c:	200009b0 	.word	0x200009b0

08006a70 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b088      	sub	sp, #32
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d06c      	beq.n	8006b62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d10b      	bne.n	8006aa8 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8006a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a94:	f383 8811 	msr	BASEPRI, r3
 8006a98:	f3bf 8f6f 	isb	sy
 8006a9c:	f3bf 8f4f 	dsb	sy
 8006aa0:	60fb      	str	r3, [r7, #12]
}
 8006aa2:	bf00      	nop
 8006aa4:	bf00      	nop
 8006aa6:	e7fd      	b.n	8006aa4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d902      	bls.n	8006ab8 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	61fb      	str	r3, [r7, #28]
 8006ab6:	e002      	b.n	8006abe <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006ab8:	69bb      	ldr	r3, [r7, #24]
 8006aba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006abc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ac2:	69fa      	ldr	r2, [r7, #28]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d04c      	beq.n	8006b62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d147      	bne.n	8006b62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006ad2:	4b26      	ldr	r3, [pc, #152]	@ (8006b6c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	69ba      	ldr	r2, [r7, #24]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d10b      	bne.n	8006af4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	60bb      	str	r3, [r7, #8]
}
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	e7fd      	b.n	8006af0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006af8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	69fa      	ldr	r2, [r7, #28]
 8006afe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b00:	69bb      	ldr	r3, [r7, #24]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	db04      	blt.n	8006b12 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b08:	69fb      	ldr	r3, [r7, #28]
 8006b0a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006b0e:	69bb      	ldr	r3, [r7, #24]
 8006b10:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006b12:	69bb      	ldr	r3, [r7, #24]
 8006b14:	6959      	ldr	r1, [r3, #20]
 8006b16:	693a      	ldr	r2, [r7, #16]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	009b      	lsls	r3, r3, #2
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	4a13      	ldr	r2, [pc, #76]	@ (8006b70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006b22:	4413      	add	r3, r2
 8006b24:	4299      	cmp	r1, r3
 8006b26:	d11c      	bne.n	8006b62 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	3304      	adds	r3, #4
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fe f8b9 	bl	8004ca4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006b32:	69bb      	ldr	r3, [r7, #24]
 8006b34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b36:	4b0f      	ldr	r3, [pc, #60]	@ (8006b74 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d903      	bls.n	8006b46 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b42:	4a0c      	ldr	r2, [pc, #48]	@ (8006b74 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8006b44:	6013      	str	r3, [r2, #0]
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b4a:	4613      	mov	r3, r2
 8006b4c:	009b      	lsls	r3, r3, #2
 8006b4e:	4413      	add	r3, r2
 8006b50:	009b      	lsls	r3, r3, #2
 8006b52:	4a07      	ldr	r2, [pc, #28]	@ (8006b70 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006b54:	441a      	add	r2, r3
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	f7fe f844 	bl	8004bea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006b62:	bf00      	nop
 8006b64:	3720      	adds	r7, #32
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	200009ac 	.word	0x200009ac
 8006b70:	200009b0 	.word	0x200009b0
 8006b74:	20000e88 	.word	0x20000e88

08006b78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006b78:	b480      	push	{r7}
 8006b7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006b7c:	4b07      	ldr	r3, [pc, #28]	@ (8006b9c <pvTaskIncrementMutexHeldCount+0x24>)
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d004      	beq.n	8006b8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006b84:	4b05      	ldr	r3, [pc, #20]	@ (8006b9c <pvTaskIncrementMutexHeldCount+0x24>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006b8a:	3201      	adds	r2, #1
 8006b8c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8006b8e:	4b03      	ldr	r3, [pc, #12]	@ (8006b9c <pvTaskIncrementMutexHeldCount+0x24>)
 8006b90:	681b      	ldr	r3, [r3, #0]
	}
 8006b92:	4618      	mov	r0, r3
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	200009ac 	.word	0x200009ac

08006ba0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b084      	sub	sp, #16
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006baa:	4b21      	ldr	r3, [pc, #132]	@ (8006c30 <prvAddCurrentTaskToDelayedList+0x90>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bb0:	4b20      	ldr	r3, [pc, #128]	@ (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3304      	adds	r3, #4
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7fe f874 	bl	8004ca4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc2:	d10a      	bne.n	8006bda <prvAddCurrentTaskToDelayedList+0x3a>
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bca:	4b1a      	ldr	r3, [pc, #104]	@ (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	3304      	adds	r3, #4
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	4819      	ldr	r0, [pc, #100]	@ (8006c38 <prvAddCurrentTaskToDelayedList+0x98>)
 8006bd4:	f7fe f809 	bl	8004bea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006bd8:	e026      	b.n	8006c28 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006bda:	68fa      	ldr	r2, [r7, #12]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4413      	add	r3, r2
 8006be0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006be2:	4b14      	ldr	r3, [pc, #80]	@ (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68ba      	ldr	r2, [r7, #8]
 8006be8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006bea:	68ba      	ldr	r2, [r7, #8]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	429a      	cmp	r2, r3
 8006bf0:	d209      	bcs.n	8006c06 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bf2:	4b12      	ldr	r3, [pc, #72]	@ (8006c3c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	4619      	mov	r1, r3
 8006bfe:	4610      	mov	r0, r2
 8006c00:	f7fe f817 	bl	8004c32 <vListInsert>
}
 8006c04:	e010      	b.n	8006c28 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c06:	4b0e      	ldr	r3, [pc, #56]	@ (8006c40 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006c34 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	3304      	adds	r3, #4
 8006c10:	4619      	mov	r1, r3
 8006c12:	4610      	mov	r0, r2
 8006c14:	f7fe f80d 	bl	8004c32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006c18:	4b0a      	ldr	r3, [pc, #40]	@ (8006c44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d202      	bcs.n	8006c28 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006c22:	4a08      	ldr	r2, [pc, #32]	@ (8006c44 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	6013      	str	r3, [r2, #0]
}
 8006c28:	bf00      	nop
 8006c2a:	3710      	adds	r7, #16
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000e84 	.word	0x20000e84
 8006c34:	200009ac 	.word	0x200009ac
 8006c38:	20000e6c 	.word	0x20000e6c
 8006c3c:	20000e3c 	.word	0x20000e3c
 8006c40:	20000e38 	.word	0x20000e38
 8006c44:	20000ea0 	.word	0x20000ea0

08006c48 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	@ 0x28
 8006c4c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006c52:	f000 fb13 	bl	800727c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006c56:	4b1d      	ldr	r3, [pc, #116]	@ (8006ccc <xTimerCreateTimerTask+0x84>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d021      	beq.n	8006ca2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006c62:	2300      	movs	r3, #0
 8006c64:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006c66:	1d3a      	adds	r2, r7, #4
 8006c68:	f107 0108 	add.w	r1, r7, #8
 8006c6c:	f107 030c 	add.w	r3, r7, #12
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fd ff73 	bl	8004b5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	9202      	str	r2, [sp, #8]
 8006c7e:	9301      	str	r3, [sp, #4]
 8006c80:	2302      	movs	r3, #2
 8006c82:	9300      	str	r3, [sp, #0]
 8006c84:	2300      	movs	r3, #0
 8006c86:	460a      	mov	r2, r1
 8006c88:	4911      	ldr	r1, [pc, #68]	@ (8006cd0 <xTimerCreateTimerTask+0x88>)
 8006c8a:	4812      	ldr	r0, [pc, #72]	@ (8006cd4 <xTimerCreateTimerTask+0x8c>)
 8006c8c:	f7fe ff22 	bl	8005ad4 <xTaskCreateStatic>
 8006c90:	4603      	mov	r3, r0
 8006c92:	4a11      	ldr	r2, [pc, #68]	@ (8006cd8 <xTimerCreateTimerTask+0x90>)
 8006c94:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c96:	4b10      	ldr	r3, [pc, #64]	@ (8006cd8 <xTimerCreateTimerTask+0x90>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d001      	beq.n	8006ca2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10b      	bne.n	8006cc0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006ca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cac:	f383 8811 	msr	BASEPRI, r3
 8006cb0:	f3bf 8f6f 	isb	sy
 8006cb4:	f3bf 8f4f 	dsb	sy
 8006cb8:	613b      	str	r3, [r7, #16]
}
 8006cba:	bf00      	nop
 8006cbc:	bf00      	nop
 8006cbe:	e7fd      	b.n	8006cbc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006cc0:	697b      	ldr	r3, [r7, #20]
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000edc 	.word	0x20000edc
 8006cd0:	080080dc 	.word	0x080080dc
 8006cd4:	08006e15 	.word	0x08006e15
 8006cd8:	20000ee0 	.word	0x20000ee0

08006cdc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b08a      	sub	sp, #40	@ 0x28
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
 8006ce8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d10b      	bne.n	8006d0c <xTimerGenericCommand+0x30>
	__asm volatile
 8006cf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf8:	f383 8811 	msr	BASEPRI, r3
 8006cfc:	f3bf 8f6f 	isb	sy
 8006d00:	f3bf 8f4f 	dsb	sy
 8006d04:	623b      	str	r3, [r7, #32]
}
 8006d06:	bf00      	nop
 8006d08:	bf00      	nop
 8006d0a:	e7fd      	b.n	8006d08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006d0c:	4b19      	ldr	r3, [pc, #100]	@ (8006d74 <xTimerGenericCommand+0x98>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d02a      	beq.n	8006d6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	2b05      	cmp	r3, #5
 8006d24:	dc18      	bgt.n	8006d58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d26:	f7ff fdad 	bl	8006884 <xTaskGetSchedulerState>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b02      	cmp	r3, #2
 8006d2e:	d109      	bne.n	8006d44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d30:	4b10      	ldr	r3, [pc, #64]	@ (8006d74 <xTimerGenericCommand+0x98>)
 8006d32:	6818      	ldr	r0, [r3, #0]
 8006d34:	f107 0110 	add.w	r1, r7, #16
 8006d38:	2300      	movs	r3, #0
 8006d3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d3c:	f7fe f922 	bl	8004f84 <xQueueGenericSend>
 8006d40:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d42:	e012      	b.n	8006d6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d44:	4b0b      	ldr	r3, [pc, #44]	@ (8006d74 <xTimerGenericCommand+0x98>)
 8006d46:	6818      	ldr	r0, [r3, #0]
 8006d48:	f107 0110 	add.w	r1, r7, #16
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f7fe f918 	bl	8004f84 <xQueueGenericSend>
 8006d54:	6278      	str	r0, [r7, #36]	@ 0x24
 8006d56:	e008      	b.n	8006d6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d58:	4b06      	ldr	r3, [pc, #24]	@ (8006d74 <xTimerGenericCommand+0x98>)
 8006d5a:	6818      	ldr	r0, [r3, #0]
 8006d5c:	f107 0110 	add.w	r1, r7, #16
 8006d60:	2300      	movs	r3, #0
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	f7fe fa10 	bl	8005188 <xQueueGenericSendFromISR>
 8006d68:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3728      	adds	r7, #40	@ 0x28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}
 8006d74:	20000edc 	.word	0x20000edc

08006d78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b088      	sub	sp, #32
 8006d7c:	af02      	add	r7, sp, #8
 8006d7e:	6078      	str	r0, [r7, #4]
 8006d80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d82:	4b23      	ldr	r3, [pc, #140]	@ (8006e10 <prvProcessExpiredTimer+0x98>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	4618      	mov	r0, r3
 8006d92:	f7fd ff87 	bl	8004ca4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d023      	beq.n	8006dec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	699a      	ldr	r2, [r3, #24]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	18d1      	adds	r1, r2, r3
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	683a      	ldr	r2, [r7, #0]
 8006db0:	6978      	ldr	r0, [r7, #20]
 8006db2:	f000 f8d5 	bl	8006f60 <prvInsertTimerInActiveList>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d020      	beq.n	8006dfe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	9300      	str	r3, [sp, #0]
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	2100      	movs	r1, #0
 8006dc6:	6978      	ldr	r0, [r7, #20]
 8006dc8:	f7ff ff88 	bl	8006cdc <xTimerGenericCommand>
 8006dcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d114      	bne.n	8006dfe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd8:	f383 8811 	msr	BASEPRI, r3
 8006ddc:	f3bf 8f6f 	isb	sy
 8006de0:	f3bf 8f4f 	dsb	sy
 8006de4:	60fb      	str	r3, [r7, #12]
}
 8006de6:	bf00      	nop
 8006de8:	bf00      	nop
 8006dea:	e7fd      	b.n	8006de8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dec:	697b      	ldr	r3, [r7, #20]
 8006dee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006df2:	f023 0301 	bic.w	r3, r3, #1
 8006df6:	b2da      	uxtb	r2, r3
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	6978      	ldr	r0, [r7, #20]
 8006e04:	4798      	blx	r3
}
 8006e06:	bf00      	nop
 8006e08:	3718      	adds	r7, #24
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20000ed4 	.word	0x20000ed4

08006e14 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e1c:	f107 0308 	add.w	r3, r7, #8
 8006e20:	4618      	mov	r0, r3
 8006e22:	f000 f859 	bl	8006ed8 <prvGetNextExpireTime>
 8006e26:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4619      	mov	r1, r3
 8006e2c:	68f8      	ldr	r0, [r7, #12]
 8006e2e:	f000 f805 	bl	8006e3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e32:	f000 f8d7 	bl	8006fe4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e36:	bf00      	nop
 8006e38:	e7f0      	b.n	8006e1c <prvTimerTask+0x8>
	...

08006e3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e46:	f7ff f929 	bl	800609c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e4a:	f107 0308 	add.w	r3, r7, #8
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 f866 	bl	8006f20 <prvSampleTimeNow>
 8006e54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d130      	bne.n	8006ebe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <prvProcessTimerOrBlockTask+0x3c>
 8006e62:	687a      	ldr	r2, [r7, #4]
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d806      	bhi.n	8006e78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e6a:	f7ff f925 	bl	80060b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e6e:	68f9      	ldr	r1, [r7, #12]
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f7ff ff81 	bl	8006d78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e76:	e024      	b.n	8006ec2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d008      	beq.n	8006e90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e7e:	4b13      	ldr	r3, [pc, #76]	@ (8006ecc <prvProcessTimerOrBlockTask+0x90>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <prvProcessTimerOrBlockTask+0x50>
 8006e88:	2301      	movs	r3, #1
 8006e8a:	e000      	b.n	8006e8e <prvProcessTimerOrBlockTask+0x52>
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e90:	4b0f      	ldr	r3, [pc, #60]	@ (8006ed0 <prvProcessTimerOrBlockTask+0x94>)
 8006e92:	6818      	ldr	r0, [r3, #0]
 8006e94:	687a      	ldr	r2, [r7, #4]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	f7fe fde5 	bl	8005a6c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ea2:	f7ff f909 	bl	80060b8 <xTaskResumeAll>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d10a      	bne.n	8006ec2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006eac:	4b09      	ldr	r3, [pc, #36]	@ (8006ed4 <prvProcessTimerOrBlockTask+0x98>)
 8006eae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	f3bf 8f6f 	isb	sy
}
 8006ebc:	e001      	b.n	8006ec2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ebe:	f7ff f8fb 	bl	80060b8 <xTaskResumeAll>
}
 8006ec2:	bf00      	nop
 8006ec4:	3710      	adds	r7, #16
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000ed8 	.word	0x20000ed8
 8006ed0:	20000edc 	.word	0x20000edc
 8006ed4:	e000ed04 	.word	0xe000ed04

08006ed8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8006f1c <prvGetNextExpireTime+0x44>)
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <prvGetNextExpireTime+0x16>
 8006eea:	2201      	movs	r2, #1
 8006eec:	e000      	b.n	8006ef0 <prvGetNextExpireTime+0x18>
 8006eee:	2200      	movs	r2, #0
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d105      	bne.n	8006f08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006efc:	4b07      	ldr	r3, [pc, #28]	@ (8006f1c <prvGetNextExpireTime+0x44>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	e001      	b.n	8006f0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3714      	adds	r7, #20
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr
 8006f1a:	bf00      	nop
 8006f1c:	20000ed4 	.word	0x20000ed4

08006f20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b084      	sub	sp, #16
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006f28:	f7ff f964 	bl	80061f4 <xTaskGetTickCount>
 8006f2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006f5c <prvSampleTimeNow+0x3c>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d205      	bcs.n	8006f44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f38:	f000 f93a 	bl	80071b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	e002      	b.n	8006f4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2200      	movs	r2, #0
 8006f48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f4a:	4a04      	ldr	r2, [pc, #16]	@ (8006f5c <prvSampleTimeNow+0x3c>)
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f50:	68fb      	ldr	r3, [r7, #12]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000ee4 	.word	0x20000ee4

08006f60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	60b9      	str	r1, [r7, #8]
 8006f6a:	607a      	str	r2, [r7, #4]
 8006f6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d812      	bhi.n	8006fac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	1ad2      	subs	r2, r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	699b      	ldr	r3, [r3, #24]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d302      	bcc.n	8006f9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f94:	2301      	movs	r3, #1
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	e01b      	b.n	8006fd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f9a:	4b10      	ldr	r3, [pc, #64]	@ (8006fdc <prvInsertTimerInActiveList+0x7c>)
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	3304      	adds	r3, #4
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4610      	mov	r0, r2
 8006fa6:	f7fd fe44 	bl	8004c32 <vListInsert>
 8006faa:	e012      	b.n	8006fd2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d206      	bcs.n	8006fc2 <prvInsertTimerInActiveList+0x62>
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d302      	bcc.n	8006fc2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	617b      	str	r3, [r7, #20]
 8006fc0:	e007      	b.n	8006fd2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006fc2:	4b07      	ldr	r3, [pc, #28]	@ (8006fe0 <prvInsertTimerInActiveList+0x80>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	3304      	adds	r3, #4
 8006fca:	4619      	mov	r1, r3
 8006fcc:	4610      	mov	r0, r2
 8006fce:	f7fd fe30 	bl	8004c32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fd2:	697b      	ldr	r3, [r7, #20]
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	20000ed8 	.word	0x20000ed8
 8006fe0:	20000ed4 	.word	0x20000ed4

08006fe4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b08e      	sub	sp, #56	@ 0x38
 8006fe8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fea:	e0ce      	b.n	800718a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	da19      	bge.n	8007026 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006ff2:	1d3b      	adds	r3, r7, #4
 8006ff4:	3304      	adds	r3, #4
 8006ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ff8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10b      	bne.n	8007016 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006ffe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	61fb      	str	r3, [r7, #28]
}
 8007010:	bf00      	nop
 8007012:	bf00      	nop
 8007014:	e7fd      	b.n	8007012 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007016:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800701c:	6850      	ldr	r0, [r2, #4]
 800701e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007020:	6892      	ldr	r2, [r2, #8]
 8007022:	4611      	mov	r1, r2
 8007024:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2b00      	cmp	r3, #0
 800702a:	f2c0 80ae 	blt.w	800718a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800703a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703c:	3304      	adds	r3, #4
 800703e:	4618      	mov	r0, r3
 8007040:	f7fd fe30 	bl	8004ca4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007044:	463b      	mov	r3, r7
 8007046:	4618      	mov	r0, r3
 8007048:	f7ff ff6a 	bl	8006f20 <prvSampleTimeNow>
 800704c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b09      	cmp	r3, #9
 8007052:	f200 8097 	bhi.w	8007184 <prvProcessReceivedCommands+0x1a0>
 8007056:	a201      	add	r2, pc, #4	@ (adr r2, 800705c <prvProcessReceivedCommands+0x78>)
 8007058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800705c:	08007085 	.word	0x08007085
 8007060:	08007085 	.word	0x08007085
 8007064:	08007085 	.word	0x08007085
 8007068:	080070fb 	.word	0x080070fb
 800706c:	0800710f 	.word	0x0800710f
 8007070:	0800715b 	.word	0x0800715b
 8007074:	08007085 	.word	0x08007085
 8007078:	08007085 	.word	0x08007085
 800707c:	080070fb 	.word	0x080070fb
 8007080:	0800710f 	.word	0x0800710f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007086:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800708a:	f043 0301 	orr.w	r3, r3, #1
 800708e:	b2da      	uxtb	r2, r3
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709a:	699b      	ldr	r3, [r3, #24]
 800709c:	18d1      	adds	r1, r2, r3
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070a4:	f7ff ff5c 	bl	8006f60 <prvInsertTimerInActiveList>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d06c      	beq.n	8007188 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b0:	6a1b      	ldr	r3, [r3, #32]
 80070b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80070b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d061      	beq.n	8007188 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80070c4:	68ba      	ldr	r2, [r7, #8]
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	699b      	ldr	r3, [r3, #24]
 80070ca:	441a      	add	r2, r3
 80070cc:	2300      	movs	r3, #0
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	2300      	movs	r3, #0
 80070d2:	2100      	movs	r1, #0
 80070d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070d6:	f7ff fe01 	bl	8006cdc <xTimerGenericCommand>
 80070da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d152      	bne.n	8007188 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80070e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070e6:	f383 8811 	msr	BASEPRI, r3
 80070ea:	f3bf 8f6f 	isb	sy
 80070ee:	f3bf 8f4f 	dsb	sy
 80070f2:	61bb      	str	r3, [r7, #24]
}
 80070f4:	bf00      	nop
 80070f6:	bf00      	nop
 80070f8:	e7fd      	b.n	80070f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007100:	f023 0301 	bic.w	r3, r3, #1
 8007104:	b2da      	uxtb	r2, r3
 8007106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007108:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800710c:	e03d      	b.n	800718a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800710e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007114:	f043 0301 	orr.w	r3, r3, #1
 8007118:	b2da      	uxtb	r2, r3
 800711a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800711c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007120:	68ba      	ldr	r2, [r7, #8]
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007128:	699b      	ldr	r3, [r3, #24]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10b      	bne.n	8007146 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	617b      	str	r3, [r7, #20]
}
 8007140:	bf00      	nop
 8007142:	bf00      	nop
 8007144:	e7fd      	b.n	8007142 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007148:	699a      	ldr	r2, [r3, #24]
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714c:	18d1      	adds	r1, r2, r3
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007152:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007154:	f7ff ff04 	bl	8006f60 <prvInsertTimerInActiveList>
					break;
 8007158:	e017      	b.n	800718a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800715a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800715c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	2b00      	cmp	r3, #0
 8007166:	d103      	bne.n	8007170 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007168:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800716a:	f000 fbe5 	bl	8007938 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800716e:	e00c      	b.n	800718a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007170:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007172:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007176:	f023 0301 	bic.w	r3, r3, #1
 800717a:	b2da      	uxtb	r2, r3
 800717c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800717e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007182:	e002      	b.n	800718a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007184:	bf00      	nop
 8007186:	e000      	b.n	800718a <prvProcessReceivedCommands+0x1a6>
					break;
 8007188:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800718a:	4b08      	ldr	r3, [pc, #32]	@ (80071ac <prvProcessReceivedCommands+0x1c8>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	1d39      	adds	r1, r7, #4
 8007190:	2200      	movs	r2, #0
 8007192:	4618      	mov	r0, r3
 8007194:	f7fe f926 	bl	80053e4 <xQueueReceive>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	f47f af26 	bne.w	8006fec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80071a0:	bf00      	nop
 80071a2:	bf00      	nop
 80071a4:	3730      	adds	r7, #48	@ 0x30
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	20000edc 	.word	0x20000edc

080071b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b088      	sub	sp, #32
 80071b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071b6:	e049      	b.n	800724c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80071b8:	4b2e      	ldr	r3, [pc, #184]	@ (8007274 <prvSwitchTimerLists+0xc4>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	68db      	ldr	r3, [r3, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c2:	4b2c      	ldr	r3, [pc, #176]	@ (8007274 <prvSwitchTimerLists+0xc4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	68db      	ldr	r3, [r3, #12]
 80071ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	3304      	adds	r3, #4
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7fd fd67 	bl	8004ca4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	68f8      	ldr	r0, [r7, #12]
 80071dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071e4:	f003 0304 	and.w	r3, r3, #4
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d02f      	beq.n	800724c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	693a      	ldr	r2, [r7, #16]
 80071f2:	4413      	add	r3, r2
 80071f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071f6:	68ba      	ldr	r2, [r7, #8]
 80071f8:	693b      	ldr	r3, [r7, #16]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d90e      	bls.n	800721c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	68ba      	ldr	r2, [r7, #8]
 8007202:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	68fa      	ldr	r2, [r7, #12]
 8007208:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800720a:	4b1a      	ldr	r3, [pc, #104]	@ (8007274 <prvSwitchTimerLists+0xc4>)
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	3304      	adds	r3, #4
 8007212:	4619      	mov	r1, r3
 8007214:	4610      	mov	r0, r2
 8007216:	f7fd fd0c 	bl	8004c32 <vListInsert>
 800721a:	e017      	b.n	800724c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800721c:	2300      	movs	r3, #0
 800721e:	9300      	str	r3, [sp, #0]
 8007220:	2300      	movs	r3, #0
 8007222:	693a      	ldr	r2, [r7, #16]
 8007224:	2100      	movs	r1, #0
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f7ff fd58 	bl	8006cdc <xTimerGenericCommand>
 800722c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10b      	bne.n	800724c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	603b      	str	r3, [r7, #0]
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	e7fd      	b.n	8007248 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800724c:	4b09      	ldr	r3, [pc, #36]	@ (8007274 <prvSwitchTimerLists+0xc4>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1b0      	bne.n	80071b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007256:	4b07      	ldr	r3, [pc, #28]	@ (8007274 <prvSwitchTimerLists+0xc4>)
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800725c:	4b06      	ldr	r3, [pc, #24]	@ (8007278 <prvSwitchTimerLists+0xc8>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a04      	ldr	r2, [pc, #16]	@ (8007274 <prvSwitchTimerLists+0xc4>)
 8007262:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007264:	4a04      	ldr	r2, [pc, #16]	@ (8007278 <prvSwitchTimerLists+0xc8>)
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	6013      	str	r3, [r2, #0]
}
 800726a:	bf00      	nop
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}
 8007272:	bf00      	nop
 8007274:	20000ed4 	.word	0x20000ed4
 8007278:	20000ed8 	.word	0x20000ed8

0800727c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b082      	sub	sp, #8
 8007280:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007282:	f000 f969 	bl	8007558 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007286:	4b15      	ldr	r3, [pc, #84]	@ (80072dc <prvCheckForValidListAndQueue+0x60>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d120      	bne.n	80072d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800728e:	4814      	ldr	r0, [pc, #80]	@ (80072e0 <prvCheckForValidListAndQueue+0x64>)
 8007290:	f7fd fc7e 	bl	8004b90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007294:	4813      	ldr	r0, [pc, #76]	@ (80072e4 <prvCheckForValidListAndQueue+0x68>)
 8007296:	f7fd fc7b 	bl	8004b90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800729a:	4b13      	ldr	r3, [pc, #76]	@ (80072e8 <prvCheckForValidListAndQueue+0x6c>)
 800729c:	4a10      	ldr	r2, [pc, #64]	@ (80072e0 <prvCheckForValidListAndQueue+0x64>)
 800729e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80072a0:	4b12      	ldr	r3, [pc, #72]	@ (80072ec <prvCheckForValidListAndQueue+0x70>)
 80072a2:	4a10      	ldr	r2, [pc, #64]	@ (80072e4 <prvCheckForValidListAndQueue+0x68>)
 80072a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80072a6:	2300      	movs	r3, #0
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	4b11      	ldr	r3, [pc, #68]	@ (80072f0 <prvCheckForValidListAndQueue+0x74>)
 80072ac:	4a11      	ldr	r2, [pc, #68]	@ (80072f4 <prvCheckForValidListAndQueue+0x78>)
 80072ae:	2110      	movs	r1, #16
 80072b0:	200a      	movs	r0, #10
 80072b2:	f7fd fd8b 	bl	8004dcc <xQueueGenericCreateStatic>
 80072b6:	4603      	mov	r3, r0
 80072b8:	4a08      	ldr	r2, [pc, #32]	@ (80072dc <prvCheckForValidListAndQueue+0x60>)
 80072ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80072bc:	4b07      	ldr	r3, [pc, #28]	@ (80072dc <prvCheckForValidListAndQueue+0x60>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80072c4:	4b05      	ldr	r3, [pc, #20]	@ (80072dc <prvCheckForValidListAndQueue+0x60>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	490b      	ldr	r1, [pc, #44]	@ (80072f8 <prvCheckForValidListAndQueue+0x7c>)
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fe fba4 	bl	8005a18 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80072d0:	f000 f974 	bl	80075bc <vPortExitCritical>
}
 80072d4:	bf00      	nop
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000edc 	.word	0x20000edc
 80072e0:	20000eac 	.word	0x20000eac
 80072e4:	20000ec0 	.word	0x20000ec0
 80072e8:	20000ed4 	.word	0x20000ed4
 80072ec:	20000ed8 	.word	0x20000ed8
 80072f0:	20000f88 	.word	0x20000f88
 80072f4:	20000ee8 	.word	0x20000ee8
 80072f8:	080080e4 	.word	0x080080e4

080072fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	3b04      	subs	r3, #4
 800730c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007314:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3b04      	subs	r3, #4
 800731a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f023 0201 	bic.w	r2, r3, #1
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	3b04      	subs	r3, #4
 800732a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800732c:	4a0c      	ldr	r2, [pc, #48]	@ (8007360 <pxPortInitialiseStack+0x64>)
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	3b14      	subs	r3, #20
 8007336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	3b04      	subs	r3, #4
 8007342:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f06f 0202 	mvn.w	r2, #2
 800734a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	3b20      	subs	r3, #32
 8007350:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007352:	68fb      	ldr	r3, [r7, #12]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3714      	adds	r7, #20
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr
 8007360:	08007365 	.word	0x08007365

08007364 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800736a:	2300      	movs	r3, #0
 800736c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800736e:	4b13      	ldr	r3, [pc, #76]	@ (80073bc <prvTaskExitError+0x58>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007376:	d00b      	beq.n	8007390 <prvTaskExitError+0x2c>
	__asm volatile
 8007378:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737c:	f383 8811 	msr	BASEPRI, r3
 8007380:	f3bf 8f6f 	isb	sy
 8007384:	f3bf 8f4f 	dsb	sy
 8007388:	60fb      	str	r3, [r7, #12]
}
 800738a:	bf00      	nop
 800738c:	bf00      	nop
 800738e:	e7fd      	b.n	800738c <prvTaskExitError+0x28>
	__asm volatile
 8007390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007394:	f383 8811 	msr	BASEPRI, r3
 8007398:	f3bf 8f6f 	isb	sy
 800739c:	f3bf 8f4f 	dsb	sy
 80073a0:	60bb      	str	r3, [r7, #8]
}
 80073a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073a4:	bf00      	nop
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0fc      	beq.n	80073a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80073ac:	bf00      	nop
 80073ae:	bf00      	nop
 80073b0:	3714      	adds	r7, #20
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	2000000c 	.word	0x2000000c

080073c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80073c0:	4b07      	ldr	r3, [pc, #28]	@ (80073e0 <pxCurrentTCBConst2>)
 80073c2:	6819      	ldr	r1, [r3, #0]
 80073c4:	6808      	ldr	r0, [r1, #0]
 80073c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073ca:	f380 8809 	msr	PSP, r0
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f04f 0000 	mov.w	r0, #0
 80073d6:	f380 8811 	msr	BASEPRI, r0
 80073da:	4770      	bx	lr
 80073dc:	f3af 8000 	nop.w

080073e0 <pxCurrentTCBConst2>:
 80073e0:	200009ac 	.word	0x200009ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073e4:	bf00      	nop
 80073e6:	bf00      	nop

080073e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073e8:	4808      	ldr	r0, [pc, #32]	@ (800740c <prvPortStartFirstTask+0x24>)
 80073ea:	6800      	ldr	r0, [r0, #0]
 80073ec:	6800      	ldr	r0, [r0, #0]
 80073ee:	f380 8808 	msr	MSP, r0
 80073f2:	f04f 0000 	mov.w	r0, #0
 80073f6:	f380 8814 	msr	CONTROL, r0
 80073fa:	b662      	cpsie	i
 80073fc:	b661      	cpsie	f
 80073fe:	f3bf 8f4f 	dsb	sy
 8007402:	f3bf 8f6f 	isb	sy
 8007406:	df00      	svc	0
 8007408:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800740a:	bf00      	nop
 800740c:	e000ed08 	.word	0xe000ed08

08007410 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b086      	sub	sp, #24
 8007414:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007416:	4b47      	ldr	r3, [pc, #284]	@ (8007534 <xPortStartScheduler+0x124>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a47      	ldr	r2, [pc, #284]	@ (8007538 <xPortStartScheduler+0x128>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d10b      	bne.n	8007438 <xPortStartScheduler+0x28>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	60fb      	str	r3, [r7, #12]
}
 8007432:	bf00      	nop
 8007434:	bf00      	nop
 8007436:	e7fd      	b.n	8007434 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007438:	4b3e      	ldr	r3, [pc, #248]	@ (8007534 <xPortStartScheduler+0x124>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a3f      	ldr	r2, [pc, #252]	@ (800753c <xPortStartScheduler+0x12c>)
 800743e:	4293      	cmp	r3, r2
 8007440:	d10b      	bne.n	800745a <xPortStartScheduler+0x4a>
	__asm volatile
 8007442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007446:	f383 8811 	msr	BASEPRI, r3
 800744a:	f3bf 8f6f 	isb	sy
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	613b      	str	r3, [r7, #16]
}
 8007454:	bf00      	nop
 8007456:	bf00      	nop
 8007458:	e7fd      	b.n	8007456 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800745a:	4b39      	ldr	r3, [pc, #228]	@ (8007540 <xPortStartScheduler+0x130>)
 800745c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	b2db      	uxtb	r3, r3
 8007464:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	22ff      	movs	r2, #255	@ 0xff
 800746a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	b2db      	uxtb	r3, r3
 8007472:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007474:	78fb      	ldrb	r3, [r7, #3]
 8007476:	b2db      	uxtb	r3, r3
 8007478:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800747c:	b2da      	uxtb	r2, r3
 800747e:	4b31      	ldr	r3, [pc, #196]	@ (8007544 <xPortStartScheduler+0x134>)
 8007480:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007482:	4b31      	ldr	r3, [pc, #196]	@ (8007548 <xPortStartScheduler+0x138>)
 8007484:	2207      	movs	r2, #7
 8007486:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007488:	e009      	b.n	800749e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800748a:	4b2f      	ldr	r3, [pc, #188]	@ (8007548 <xPortStartScheduler+0x138>)
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	3b01      	subs	r3, #1
 8007490:	4a2d      	ldr	r2, [pc, #180]	@ (8007548 <xPortStartScheduler+0x138>)
 8007492:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007494:	78fb      	ldrb	r3, [r7, #3]
 8007496:	b2db      	uxtb	r3, r3
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	b2db      	uxtb	r3, r3
 800749c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074a6:	2b80      	cmp	r3, #128	@ 0x80
 80074a8:	d0ef      	beq.n	800748a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80074aa:	4b27      	ldr	r3, [pc, #156]	@ (8007548 <xPortStartScheduler+0x138>)
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f1c3 0307 	rsb	r3, r3, #7
 80074b2:	2b04      	cmp	r3, #4
 80074b4:	d00b      	beq.n	80074ce <xPortStartScheduler+0xbe>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	60bb      	str	r3, [r7, #8]
}
 80074c8:	bf00      	nop
 80074ca:	bf00      	nop
 80074cc:	e7fd      	b.n	80074ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80074ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007548 <xPortStartScheduler+0x138>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	021b      	lsls	r3, r3, #8
 80074d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007548 <xPortStartScheduler+0x138>)
 80074d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80074d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007548 <xPortStartScheduler+0x138>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80074e0:	4a19      	ldr	r2, [pc, #100]	@ (8007548 <xPortStartScheduler+0x138>)
 80074e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	b2da      	uxtb	r2, r3
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074ec:	4b17      	ldr	r3, [pc, #92]	@ (800754c <xPortStartScheduler+0x13c>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a16      	ldr	r2, [pc, #88]	@ (800754c <xPortStartScheduler+0x13c>)
 80074f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80074f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074f8:	4b14      	ldr	r3, [pc, #80]	@ (800754c <xPortStartScheduler+0x13c>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a13      	ldr	r2, [pc, #76]	@ (800754c <xPortStartScheduler+0x13c>)
 80074fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007502:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007504:	f000 f8da 	bl	80076bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007508:	4b11      	ldr	r3, [pc, #68]	@ (8007550 <xPortStartScheduler+0x140>)
 800750a:	2200      	movs	r2, #0
 800750c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800750e:	f000 f8f9 	bl	8007704 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007512:	4b10      	ldr	r3, [pc, #64]	@ (8007554 <xPortStartScheduler+0x144>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a0f      	ldr	r2, [pc, #60]	@ (8007554 <xPortStartScheduler+0x144>)
 8007518:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800751c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800751e:	f7ff ff63 	bl	80073e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007522:	f7fe ff31 	bl	8006388 <vTaskSwitchContext>
	prvTaskExitError();
 8007526:	f7ff ff1d 	bl	8007364 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3718      	adds	r7, #24
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	e000ed00 	.word	0xe000ed00
 8007538:	410fc271 	.word	0x410fc271
 800753c:	410fc270 	.word	0x410fc270
 8007540:	e000e400 	.word	0xe000e400
 8007544:	20000fd8 	.word	0x20000fd8
 8007548:	20000fdc 	.word	0x20000fdc
 800754c:	e000ed20 	.word	0xe000ed20
 8007550:	2000000c 	.word	0x2000000c
 8007554:	e000ef34 	.word	0xe000ef34

08007558 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
	__asm volatile
 800755e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007562:	f383 8811 	msr	BASEPRI, r3
 8007566:	f3bf 8f6f 	isb	sy
 800756a:	f3bf 8f4f 	dsb	sy
 800756e:	607b      	str	r3, [r7, #4]
}
 8007570:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007572:	4b10      	ldr	r3, [pc, #64]	@ (80075b4 <vPortEnterCritical+0x5c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3301      	adds	r3, #1
 8007578:	4a0e      	ldr	r2, [pc, #56]	@ (80075b4 <vPortEnterCritical+0x5c>)
 800757a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800757c:	4b0d      	ldr	r3, [pc, #52]	@ (80075b4 <vPortEnterCritical+0x5c>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d110      	bne.n	80075a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007584:	4b0c      	ldr	r3, [pc, #48]	@ (80075b8 <vPortEnterCritical+0x60>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d00b      	beq.n	80075a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	603b      	str	r3, [r7, #0]
}
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	e7fd      	b.n	80075a2 <vPortEnterCritical+0x4a>
	}
}
 80075a6:	bf00      	nop
 80075a8:	370c      	adds	r7, #12
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	2000000c 	.word	0x2000000c
 80075b8:	e000ed04 	.word	0xe000ed04

080075bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80075c2:	4b12      	ldr	r3, [pc, #72]	@ (800760c <vPortExitCritical+0x50>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10b      	bne.n	80075e2 <vPortExitCritical+0x26>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	607b      	str	r3, [r7, #4]
}
 80075dc:	bf00      	nop
 80075de:	bf00      	nop
 80075e0:	e7fd      	b.n	80075de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80075e2:	4b0a      	ldr	r3, [pc, #40]	@ (800760c <vPortExitCritical+0x50>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	4a08      	ldr	r2, [pc, #32]	@ (800760c <vPortExitCritical+0x50>)
 80075ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075ec:	4b07      	ldr	r3, [pc, #28]	@ (800760c <vPortExitCritical+0x50>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d105      	bne.n	8007600 <vPortExitCritical+0x44>
 80075f4:	2300      	movs	r3, #0
 80075f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	f383 8811 	msr	BASEPRI, r3
}
 80075fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	2000000c 	.word	0x2000000c

08007610 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007610:	f3ef 8009 	mrs	r0, PSP
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	4b15      	ldr	r3, [pc, #84]	@ (8007670 <pxCurrentTCBConst>)
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	f01e 0f10 	tst.w	lr, #16
 8007620:	bf08      	it	eq
 8007622:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007626:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800762a:	6010      	str	r0, [r2, #0]
 800762c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007630:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007634:	f380 8811 	msr	BASEPRI, r0
 8007638:	f3bf 8f4f 	dsb	sy
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f7fe fea2 	bl	8006388 <vTaskSwitchContext>
 8007644:	f04f 0000 	mov.w	r0, #0
 8007648:	f380 8811 	msr	BASEPRI, r0
 800764c:	bc09      	pop	{r0, r3}
 800764e:	6819      	ldr	r1, [r3, #0]
 8007650:	6808      	ldr	r0, [r1, #0]
 8007652:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007656:	f01e 0f10 	tst.w	lr, #16
 800765a:	bf08      	it	eq
 800765c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007660:	f380 8809 	msr	PSP, r0
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	f3af 8000 	nop.w

08007670 <pxCurrentTCBConst>:
 8007670:	200009ac 	.word	0x200009ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop

08007678 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af00      	add	r7, sp, #0
	__asm volatile
 800767e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007682:	f383 8811 	msr	BASEPRI, r3
 8007686:	f3bf 8f6f 	isb	sy
 800768a:	f3bf 8f4f 	dsb	sy
 800768e:	607b      	str	r3, [r7, #4]
}
 8007690:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007692:	f7fe fdbf 	bl	8006214 <xTaskIncrementTick>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d003      	beq.n	80076a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800769c:	4b06      	ldr	r3, [pc, #24]	@ (80076b8 <xPortSysTickHandler+0x40>)
 800769e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	2300      	movs	r3, #0
 80076a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	f383 8811 	msr	BASEPRI, r3
}
 80076ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80076b0:	bf00      	nop
 80076b2:	3708      	adds	r7, #8
 80076b4:	46bd      	mov	sp, r7
 80076b6:	bd80      	pop	{r7, pc}
 80076b8:	e000ed04 	.word	0xe000ed04

080076bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80076bc:	b480      	push	{r7}
 80076be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80076c0:	4b0b      	ldr	r3, [pc, #44]	@ (80076f0 <vPortSetupTimerInterrupt+0x34>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80076c6:	4b0b      	ldr	r3, [pc, #44]	@ (80076f4 <vPortSetupTimerInterrupt+0x38>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80076cc:	4b0a      	ldr	r3, [pc, #40]	@ (80076f8 <vPortSetupTimerInterrupt+0x3c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a0a      	ldr	r2, [pc, #40]	@ (80076fc <vPortSetupTimerInterrupt+0x40>)
 80076d2:	fba2 2303 	umull	r2, r3, r2, r3
 80076d6:	099b      	lsrs	r3, r3, #6
 80076d8:	4a09      	ldr	r2, [pc, #36]	@ (8007700 <vPortSetupTimerInterrupt+0x44>)
 80076da:	3b01      	subs	r3, #1
 80076dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80076de:	4b04      	ldr	r3, [pc, #16]	@ (80076f0 <vPortSetupTimerInterrupt+0x34>)
 80076e0:	2207      	movs	r2, #7
 80076e2:	601a      	str	r2, [r3, #0]
}
 80076e4:	bf00      	nop
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	e000e010 	.word	0xe000e010
 80076f4:	e000e018 	.word	0xe000e018
 80076f8:	20000000 	.word	0x20000000
 80076fc:	10624dd3 	.word	0x10624dd3
 8007700:	e000e014 	.word	0xe000e014

08007704 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007704:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007714 <vPortEnableVFP+0x10>
 8007708:	6801      	ldr	r1, [r0, #0]
 800770a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800770e:	6001      	str	r1, [r0, #0]
 8007710:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007712:	bf00      	nop
 8007714:	e000ed88 	.word	0xe000ed88

08007718 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800771e:	f3ef 8305 	mrs	r3, IPSR
 8007722:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2b0f      	cmp	r3, #15
 8007728:	d915      	bls.n	8007756 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800772a:	4a18      	ldr	r2, [pc, #96]	@ (800778c <vPortValidateInterruptPriority+0x74>)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007734:	4b16      	ldr	r3, [pc, #88]	@ (8007790 <vPortValidateInterruptPriority+0x78>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	7afa      	ldrb	r2, [r7, #11]
 800773a:	429a      	cmp	r2, r3
 800773c:	d20b      	bcs.n	8007756 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800773e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007742:	f383 8811 	msr	BASEPRI, r3
 8007746:	f3bf 8f6f 	isb	sy
 800774a:	f3bf 8f4f 	dsb	sy
 800774e:	607b      	str	r3, [r7, #4]
}
 8007750:	bf00      	nop
 8007752:	bf00      	nop
 8007754:	e7fd      	b.n	8007752 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007756:	4b0f      	ldr	r3, [pc, #60]	@ (8007794 <vPortValidateInterruptPriority+0x7c>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800775e:	4b0e      	ldr	r3, [pc, #56]	@ (8007798 <vPortValidateInterruptPriority+0x80>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	429a      	cmp	r2, r3
 8007764:	d90b      	bls.n	800777e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776a:	f383 8811 	msr	BASEPRI, r3
 800776e:	f3bf 8f6f 	isb	sy
 8007772:	f3bf 8f4f 	dsb	sy
 8007776:	603b      	str	r3, [r7, #0]
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	e7fd      	b.n	800777a <vPortValidateInterruptPriority+0x62>
	}
 800777e:	bf00      	nop
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	e000e3f0 	.word	0xe000e3f0
 8007790:	20000fd8 	.word	0x20000fd8
 8007794:	e000ed0c 	.word	0xe000ed0c
 8007798:	20000fdc 	.word	0x20000fdc

0800779c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08a      	sub	sp, #40	@ 0x28
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80077a4:	2300      	movs	r3, #0
 80077a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80077a8:	f7fe fc78 	bl	800609c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80077ac:	4b5c      	ldr	r3, [pc, #368]	@ (8007920 <pvPortMalloc+0x184>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d101      	bne.n	80077b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80077b4:	f000 f924 	bl	8007a00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80077b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007924 <pvPortMalloc+0x188>)
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4013      	ands	r3, r2
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	f040 8095 	bne.w	80078f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d01e      	beq.n	800780a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80077cc:	2208      	movs	r2, #8
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4413      	add	r3, r2
 80077d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f003 0307 	and.w	r3, r3, #7
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d015      	beq.n	800780a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f023 0307 	bic.w	r3, r3, #7
 80077e4:	3308      	adds	r3, #8
 80077e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f003 0307 	and.w	r3, r3, #7
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00b      	beq.n	800780a <pvPortMalloc+0x6e>
	__asm volatile
 80077f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f6:	f383 8811 	msr	BASEPRI, r3
 80077fa:	f3bf 8f6f 	isb	sy
 80077fe:	f3bf 8f4f 	dsb	sy
 8007802:	617b      	str	r3, [r7, #20]
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	e7fd      	b.n	8007806 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d06f      	beq.n	80078f0 <pvPortMalloc+0x154>
 8007810:	4b45      	ldr	r3, [pc, #276]	@ (8007928 <pvPortMalloc+0x18c>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	687a      	ldr	r2, [r7, #4]
 8007816:	429a      	cmp	r2, r3
 8007818:	d86a      	bhi.n	80078f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800781a:	4b44      	ldr	r3, [pc, #272]	@ (800792c <pvPortMalloc+0x190>)
 800781c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800781e:	4b43      	ldr	r3, [pc, #268]	@ (800792c <pvPortMalloc+0x190>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007824:	e004      	b.n	8007830 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007828:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800782a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007830:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	687a      	ldr	r2, [r7, #4]
 8007836:	429a      	cmp	r2, r3
 8007838:	d903      	bls.n	8007842 <pvPortMalloc+0xa6>
 800783a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d1f1      	bne.n	8007826 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007842:	4b37      	ldr	r3, [pc, #220]	@ (8007920 <pvPortMalloc+0x184>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007848:	429a      	cmp	r2, r3
 800784a:	d051      	beq.n	80078f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800784c:	6a3b      	ldr	r3, [r7, #32]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	2208      	movs	r2, #8
 8007852:	4413      	add	r3, r2
 8007854:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007858:	681a      	ldr	r2, [r3, #0]
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800785e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	1ad2      	subs	r2, r2, r3
 8007866:	2308      	movs	r3, #8
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	429a      	cmp	r2, r3
 800786c:	d920      	bls.n	80078b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800786e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	4413      	add	r3, r2
 8007874:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007876:	69bb      	ldr	r3, [r7, #24]
 8007878:	f003 0307 	and.w	r3, r3, #7
 800787c:	2b00      	cmp	r3, #0
 800787e:	d00b      	beq.n	8007898 <pvPortMalloc+0xfc>
	__asm volatile
 8007880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007884:	f383 8811 	msr	BASEPRI, r3
 8007888:	f3bf 8f6f 	isb	sy
 800788c:	f3bf 8f4f 	dsb	sy
 8007890:	613b      	str	r3, [r7, #16]
}
 8007892:	bf00      	nop
 8007894:	bf00      	nop
 8007896:	e7fd      	b.n	8007894 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007898:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	1ad2      	subs	r2, r2, r3
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a6:	687a      	ldr	r2, [r7, #4]
 80078a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80078aa:	69b8      	ldr	r0, [r7, #24]
 80078ac:	f000 f90a 	bl	8007ac4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80078b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007928 <pvPortMalloc+0x18c>)
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	1ad3      	subs	r3, r2, r3
 80078ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007928 <pvPortMalloc+0x18c>)
 80078bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80078be:	4b1a      	ldr	r3, [pc, #104]	@ (8007928 <pvPortMalloc+0x18c>)
 80078c0:	681a      	ldr	r2, [r3, #0]
 80078c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007930 <pvPortMalloc+0x194>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d203      	bcs.n	80078d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80078ca:	4b17      	ldr	r3, [pc, #92]	@ (8007928 <pvPortMalloc+0x18c>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a18      	ldr	r2, [pc, #96]	@ (8007930 <pvPortMalloc+0x194>)
 80078d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80078d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078d4:	685a      	ldr	r2, [r3, #4]
 80078d6:	4b13      	ldr	r3, [pc, #76]	@ (8007924 <pvPortMalloc+0x188>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	431a      	orrs	r2, r3
 80078dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e2:	2200      	movs	r2, #0
 80078e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80078e6:	4b13      	ldr	r3, [pc, #76]	@ (8007934 <pvPortMalloc+0x198>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	3301      	adds	r3, #1
 80078ec:	4a11      	ldr	r2, [pc, #68]	@ (8007934 <pvPortMalloc+0x198>)
 80078ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078f0:	f7fe fbe2 	bl	80060b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078f4:	69fb      	ldr	r3, [r7, #28]
 80078f6:	f003 0307 	and.w	r3, r3, #7
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00b      	beq.n	8007916 <pvPortMalloc+0x17a>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007902:	f383 8811 	msr	BASEPRI, r3
 8007906:	f3bf 8f6f 	isb	sy
 800790a:	f3bf 8f4f 	dsb	sy
 800790e:	60fb      	str	r3, [r7, #12]
}
 8007910:	bf00      	nop
 8007912:	bf00      	nop
 8007914:	e7fd      	b.n	8007912 <pvPortMalloc+0x176>
	return pvReturn;
 8007916:	69fb      	ldr	r3, [r7, #28]
}
 8007918:	4618      	mov	r0, r3
 800791a:	3728      	adds	r7, #40	@ 0x28
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	20004be8 	.word	0x20004be8
 8007924:	20004bfc 	.word	0x20004bfc
 8007928:	20004bec 	.word	0x20004bec
 800792c:	20004be0 	.word	0x20004be0
 8007930:	20004bf0 	.word	0x20004bf0
 8007934:	20004bf4 	.word	0x20004bf4

08007938 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d04f      	beq.n	80079ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800794a:	2308      	movs	r3, #8
 800794c:	425b      	negs	r3, r3
 800794e:	697a      	ldr	r2, [r7, #20]
 8007950:	4413      	add	r3, r2
 8007952:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	685a      	ldr	r2, [r3, #4]
 800795c:	4b25      	ldr	r3, [pc, #148]	@ (80079f4 <vPortFree+0xbc>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	4013      	ands	r3, r2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10b      	bne.n	800797e <vPortFree+0x46>
	__asm volatile
 8007966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	60fb      	str	r3, [r7, #12]
}
 8007978:	bf00      	nop
 800797a:	bf00      	nop
 800797c:	e7fd      	b.n	800797a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d00b      	beq.n	800799e <vPortFree+0x66>
	__asm volatile
 8007986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800798a:	f383 8811 	msr	BASEPRI, r3
 800798e:	f3bf 8f6f 	isb	sy
 8007992:	f3bf 8f4f 	dsb	sy
 8007996:	60bb      	str	r3, [r7, #8]
}
 8007998:	bf00      	nop
 800799a:	bf00      	nop
 800799c:	e7fd      	b.n	800799a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	4b14      	ldr	r3, [pc, #80]	@ (80079f4 <vPortFree+0xbc>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	4013      	ands	r3, r2
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d01e      	beq.n	80079ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d11a      	bne.n	80079ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	4b0e      	ldr	r3, [pc, #56]	@ (80079f4 <vPortFree+0xbc>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	43db      	mvns	r3, r3
 80079be:	401a      	ands	r2, r3
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80079c4:	f7fe fb6a 	bl	800609c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80079c8:	693b      	ldr	r3, [r7, #16]
 80079ca:	685a      	ldr	r2, [r3, #4]
 80079cc:	4b0a      	ldr	r3, [pc, #40]	@ (80079f8 <vPortFree+0xc0>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4413      	add	r3, r2
 80079d2:	4a09      	ldr	r2, [pc, #36]	@ (80079f8 <vPortFree+0xc0>)
 80079d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80079d6:	6938      	ldr	r0, [r7, #16]
 80079d8:	f000 f874 	bl	8007ac4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80079dc:	4b07      	ldr	r3, [pc, #28]	@ (80079fc <vPortFree+0xc4>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3301      	adds	r3, #1
 80079e2:	4a06      	ldr	r2, [pc, #24]	@ (80079fc <vPortFree+0xc4>)
 80079e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80079e6:	f7fe fb67 	bl	80060b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80079ea:	bf00      	nop
 80079ec:	3718      	adds	r7, #24
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	20004bfc 	.word	0x20004bfc
 80079f8:	20004bec 	.word	0x20004bec
 80079fc:	20004bf8 	.word	0x20004bf8

08007a00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a00:	b480      	push	{r7}
 8007a02:	b085      	sub	sp, #20
 8007a04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007a0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a0c:	4b27      	ldr	r3, [pc, #156]	@ (8007aac <prvHeapInit+0xac>)
 8007a0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f003 0307 	and.w	r3, r3, #7
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00c      	beq.n	8007a34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	3307      	adds	r3, #7
 8007a1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	f023 0307 	bic.w	r3, r3, #7
 8007a26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	1ad3      	subs	r3, r2, r3
 8007a2e:	4a1f      	ldr	r2, [pc, #124]	@ (8007aac <prvHeapInit+0xac>)
 8007a30:	4413      	add	r3, r2
 8007a32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a38:	4a1d      	ldr	r2, [pc, #116]	@ (8007ab0 <prvHeapInit+0xb0>)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a3e:	4b1c      	ldr	r3, [pc, #112]	@ (8007ab0 <prvHeapInit+0xb0>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	68ba      	ldr	r2, [r7, #8]
 8007a48:	4413      	add	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a4c:	2208      	movs	r2, #8
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	1a9b      	subs	r3, r3, r2
 8007a52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f023 0307 	bic.w	r3, r3, #7
 8007a5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	4a15      	ldr	r2, [pc, #84]	@ (8007ab4 <prvHeapInit+0xb4>)
 8007a60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a62:	4b14      	ldr	r3, [pc, #80]	@ (8007ab4 <prvHeapInit+0xb4>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2200      	movs	r2, #0
 8007a68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a6a:	4b12      	ldr	r3, [pc, #72]	@ (8007ab4 <prvHeapInit+0xb4>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a76:	683b      	ldr	r3, [r7, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	1ad2      	subs	r2, r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a80:	4b0c      	ldr	r3, [pc, #48]	@ (8007ab4 <prvHeapInit+0xb4>)
 8007a82:	681a      	ldr	r2, [r3, #0]
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	4a0a      	ldr	r2, [pc, #40]	@ (8007ab8 <prvHeapInit+0xb8>)
 8007a8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	4a09      	ldr	r2, [pc, #36]	@ (8007abc <prvHeapInit+0xbc>)
 8007a96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a98:	4b09      	ldr	r3, [pc, #36]	@ (8007ac0 <prvHeapInit+0xc0>)
 8007a9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007a9e:	601a      	str	r2, [r3, #0]
}
 8007aa0:	bf00      	nop
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	20000fe0 	.word	0x20000fe0
 8007ab0:	20004be0 	.word	0x20004be0
 8007ab4:	20004be8 	.word	0x20004be8
 8007ab8:	20004bf0 	.word	0x20004bf0
 8007abc:	20004bec 	.word	0x20004bec
 8007ac0:	20004bfc 	.word	0x20004bfc

08007ac4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b085      	sub	sp, #20
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007acc:	4b28      	ldr	r3, [pc, #160]	@ (8007b70 <prvInsertBlockIntoFreeList+0xac>)
 8007ace:	60fb      	str	r3, [r7, #12]
 8007ad0:	e002      	b.n	8007ad8 <prvInsertBlockIntoFreeList+0x14>
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	60fb      	str	r3, [r7, #12]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	429a      	cmp	r2, r3
 8007ae0:	d8f7      	bhi.n	8007ad2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	4413      	add	r3, r2
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	429a      	cmp	r2, r3
 8007af2:	d108      	bne.n	8007b06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	685a      	ldr	r2, [r3, #4]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	441a      	add	r2, r3
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	68ba      	ldr	r2, [r7, #8]
 8007b10:	441a      	add	r2, r3
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	429a      	cmp	r2, r3
 8007b18:	d118      	bne.n	8007b4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	4b15      	ldr	r3, [pc, #84]	@ (8007b74 <prvInsertBlockIntoFreeList+0xb0>)
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d00d      	beq.n	8007b42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	685a      	ldr	r2, [r3, #4]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	441a      	add	r2, r3
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	601a      	str	r2, [r3, #0]
 8007b40:	e008      	b.n	8007b54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b42:	4b0c      	ldr	r3, [pc, #48]	@ (8007b74 <prvInsertBlockIntoFreeList+0xb0>)
 8007b44:	681a      	ldr	r2, [r3, #0]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	601a      	str	r2, [r3, #0]
 8007b4a:	e003      	b.n	8007b54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681a      	ldr	r2, [r3, #0]
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d002      	beq.n	8007b62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	687a      	ldr	r2, [r7, #4]
 8007b60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b62:	bf00      	nop
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	20004be0 	.word	0x20004be0
 8007b74:	20004be8 	.word	0x20004be8

08007b78 <memset>:
 8007b78:	4402      	add	r2, r0
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d100      	bne.n	8007b82 <memset+0xa>
 8007b80:	4770      	bx	lr
 8007b82:	f803 1b01 	strb.w	r1, [r3], #1
 8007b86:	e7f9      	b.n	8007b7c <memset+0x4>

08007b88 <_reclaim_reent>:
 8007b88:	4b2d      	ldr	r3, [pc, #180]	@ (8007c40 <_reclaim_reent+0xb8>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4283      	cmp	r3, r0
 8007b8e:	b570      	push	{r4, r5, r6, lr}
 8007b90:	4604      	mov	r4, r0
 8007b92:	d053      	beq.n	8007c3c <_reclaim_reent+0xb4>
 8007b94:	69c3      	ldr	r3, [r0, #28]
 8007b96:	b31b      	cbz	r3, 8007be0 <_reclaim_reent+0x58>
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	b163      	cbz	r3, 8007bb6 <_reclaim_reent+0x2e>
 8007b9c:	2500      	movs	r5, #0
 8007b9e:	69e3      	ldr	r3, [r4, #28]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	5959      	ldr	r1, [r3, r5]
 8007ba4:	b9b1      	cbnz	r1, 8007bd4 <_reclaim_reent+0x4c>
 8007ba6:	3504      	adds	r5, #4
 8007ba8:	2d80      	cmp	r5, #128	@ 0x80
 8007baa:	d1f8      	bne.n	8007b9e <_reclaim_reent+0x16>
 8007bac:	69e3      	ldr	r3, [r4, #28]
 8007bae:	4620      	mov	r0, r4
 8007bb0:	68d9      	ldr	r1, [r3, #12]
 8007bb2:	f000 f881 	bl	8007cb8 <_free_r>
 8007bb6:	69e3      	ldr	r3, [r4, #28]
 8007bb8:	6819      	ldr	r1, [r3, #0]
 8007bba:	b111      	cbz	r1, 8007bc2 <_reclaim_reent+0x3a>
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	f000 f87b 	bl	8007cb8 <_free_r>
 8007bc2:	69e3      	ldr	r3, [r4, #28]
 8007bc4:	689d      	ldr	r5, [r3, #8]
 8007bc6:	b15d      	cbz	r5, 8007be0 <_reclaim_reent+0x58>
 8007bc8:	4629      	mov	r1, r5
 8007bca:	4620      	mov	r0, r4
 8007bcc:	682d      	ldr	r5, [r5, #0]
 8007bce:	f000 f873 	bl	8007cb8 <_free_r>
 8007bd2:	e7f8      	b.n	8007bc6 <_reclaim_reent+0x3e>
 8007bd4:	680e      	ldr	r6, [r1, #0]
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	f000 f86e 	bl	8007cb8 <_free_r>
 8007bdc:	4631      	mov	r1, r6
 8007bde:	e7e1      	b.n	8007ba4 <_reclaim_reent+0x1c>
 8007be0:	6961      	ldr	r1, [r4, #20]
 8007be2:	b111      	cbz	r1, 8007bea <_reclaim_reent+0x62>
 8007be4:	4620      	mov	r0, r4
 8007be6:	f000 f867 	bl	8007cb8 <_free_r>
 8007bea:	69e1      	ldr	r1, [r4, #28]
 8007bec:	b111      	cbz	r1, 8007bf4 <_reclaim_reent+0x6c>
 8007bee:	4620      	mov	r0, r4
 8007bf0:	f000 f862 	bl	8007cb8 <_free_r>
 8007bf4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007bf6:	b111      	cbz	r1, 8007bfe <_reclaim_reent+0x76>
 8007bf8:	4620      	mov	r0, r4
 8007bfa:	f000 f85d 	bl	8007cb8 <_free_r>
 8007bfe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007c00:	b111      	cbz	r1, 8007c08 <_reclaim_reent+0x80>
 8007c02:	4620      	mov	r0, r4
 8007c04:	f000 f858 	bl	8007cb8 <_free_r>
 8007c08:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007c0a:	b111      	cbz	r1, 8007c12 <_reclaim_reent+0x8a>
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f000 f853 	bl	8007cb8 <_free_r>
 8007c12:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007c14:	b111      	cbz	r1, 8007c1c <_reclaim_reent+0x94>
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 f84e 	bl	8007cb8 <_free_r>
 8007c1c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c1e:	b111      	cbz	r1, 8007c26 <_reclaim_reent+0x9e>
 8007c20:	4620      	mov	r0, r4
 8007c22:	f000 f849 	bl	8007cb8 <_free_r>
 8007c26:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007c28:	b111      	cbz	r1, 8007c30 <_reclaim_reent+0xa8>
 8007c2a:	4620      	mov	r0, r4
 8007c2c:	f000 f844 	bl	8007cb8 <_free_r>
 8007c30:	6a23      	ldr	r3, [r4, #32]
 8007c32:	b11b      	cbz	r3, 8007c3c <_reclaim_reent+0xb4>
 8007c34:	4620      	mov	r0, r4
 8007c36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c3a:	4718      	bx	r3
 8007c3c:	bd70      	pop	{r4, r5, r6, pc}
 8007c3e:	bf00      	nop
 8007c40:	20000010 	.word	0x20000010

08007c44 <__errno>:
 8007c44:	4b01      	ldr	r3, [pc, #4]	@ (8007c4c <__errno+0x8>)
 8007c46:	6818      	ldr	r0, [r3, #0]
 8007c48:	4770      	bx	lr
 8007c4a:	bf00      	nop
 8007c4c:	20000010 	.word	0x20000010

08007c50 <__libc_init_array>:
 8007c50:	b570      	push	{r4, r5, r6, lr}
 8007c52:	4d0d      	ldr	r5, [pc, #52]	@ (8007c88 <__libc_init_array+0x38>)
 8007c54:	4c0d      	ldr	r4, [pc, #52]	@ (8007c8c <__libc_init_array+0x3c>)
 8007c56:	1b64      	subs	r4, r4, r5
 8007c58:	10a4      	asrs	r4, r4, #2
 8007c5a:	2600      	movs	r6, #0
 8007c5c:	42a6      	cmp	r6, r4
 8007c5e:	d109      	bne.n	8007c74 <__libc_init_array+0x24>
 8007c60:	4d0b      	ldr	r5, [pc, #44]	@ (8007c90 <__libc_init_array+0x40>)
 8007c62:	4c0c      	ldr	r4, [pc, #48]	@ (8007c94 <__libc_init_array+0x44>)
 8007c64:	f000 fa1e 	bl	80080a4 <_init>
 8007c68:	1b64      	subs	r4, r4, r5
 8007c6a:	10a4      	asrs	r4, r4, #2
 8007c6c:	2600      	movs	r6, #0
 8007c6e:	42a6      	cmp	r6, r4
 8007c70:	d105      	bne.n	8007c7e <__libc_init_array+0x2e>
 8007c72:	bd70      	pop	{r4, r5, r6, pc}
 8007c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c78:	4798      	blx	r3
 8007c7a:	3601      	adds	r6, #1
 8007c7c:	e7ee      	b.n	8007c5c <__libc_init_array+0xc>
 8007c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007c82:	4798      	blx	r3
 8007c84:	3601      	adds	r6, #1
 8007c86:	e7f2      	b.n	8007c6e <__libc_init_array+0x1e>
 8007c88:	08008170 	.word	0x08008170
 8007c8c:	08008170 	.word	0x08008170
 8007c90:	08008170 	.word	0x08008170
 8007c94:	08008174 	.word	0x08008174

08007c98 <__retarget_lock_acquire_recursive>:
 8007c98:	4770      	bx	lr

08007c9a <__retarget_lock_release_recursive>:
 8007c9a:	4770      	bx	lr

08007c9c <memcpy>:
 8007c9c:	440a      	add	r2, r1
 8007c9e:	4291      	cmp	r1, r2
 8007ca0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ca4:	d100      	bne.n	8007ca8 <memcpy+0xc>
 8007ca6:	4770      	bx	lr
 8007ca8:	b510      	push	{r4, lr}
 8007caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007cb2:	4291      	cmp	r1, r2
 8007cb4:	d1f9      	bne.n	8007caa <memcpy+0xe>
 8007cb6:	bd10      	pop	{r4, pc}

08007cb8 <_free_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4605      	mov	r5, r0
 8007cbc:	2900      	cmp	r1, #0
 8007cbe:	d041      	beq.n	8007d44 <_free_r+0x8c>
 8007cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cc4:	1f0c      	subs	r4, r1, #4
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	bfb8      	it	lt
 8007cca:	18e4      	addlt	r4, r4, r3
 8007ccc:	f000 f83e 	bl	8007d4c <__malloc_lock>
 8007cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8007d48 <_free_r+0x90>)
 8007cd2:	6813      	ldr	r3, [r2, #0]
 8007cd4:	b933      	cbnz	r3, 8007ce4 <_free_r+0x2c>
 8007cd6:	6063      	str	r3, [r4, #4]
 8007cd8:	6014      	str	r4, [r2, #0]
 8007cda:	4628      	mov	r0, r5
 8007cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ce0:	f000 b83a 	b.w	8007d58 <__malloc_unlock>
 8007ce4:	42a3      	cmp	r3, r4
 8007ce6:	d908      	bls.n	8007cfa <_free_r+0x42>
 8007ce8:	6820      	ldr	r0, [r4, #0]
 8007cea:	1821      	adds	r1, r4, r0
 8007cec:	428b      	cmp	r3, r1
 8007cee:	bf01      	itttt	eq
 8007cf0:	6819      	ldreq	r1, [r3, #0]
 8007cf2:	685b      	ldreq	r3, [r3, #4]
 8007cf4:	1809      	addeq	r1, r1, r0
 8007cf6:	6021      	streq	r1, [r4, #0]
 8007cf8:	e7ed      	b.n	8007cd6 <_free_r+0x1e>
 8007cfa:	461a      	mov	r2, r3
 8007cfc:	685b      	ldr	r3, [r3, #4]
 8007cfe:	b10b      	cbz	r3, 8007d04 <_free_r+0x4c>
 8007d00:	42a3      	cmp	r3, r4
 8007d02:	d9fa      	bls.n	8007cfa <_free_r+0x42>
 8007d04:	6811      	ldr	r1, [r2, #0]
 8007d06:	1850      	adds	r0, r2, r1
 8007d08:	42a0      	cmp	r0, r4
 8007d0a:	d10b      	bne.n	8007d24 <_free_r+0x6c>
 8007d0c:	6820      	ldr	r0, [r4, #0]
 8007d0e:	4401      	add	r1, r0
 8007d10:	1850      	adds	r0, r2, r1
 8007d12:	4283      	cmp	r3, r0
 8007d14:	6011      	str	r1, [r2, #0]
 8007d16:	d1e0      	bne.n	8007cda <_free_r+0x22>
 8007d18:	6818      	ldr	r0, [r3, #0]
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	6053      	str	r3, [r2, #4]
 8007d1e:	4408      	add	r0, r1
 8007d20:	6010      	str	r0, [r2, #0]
 8007d22:	e7da      	b.n	8007cda <_free_r+0x22>
 8007d24:	d902      	bls.n	8007d2c <_free_r+0x74>
 8007d26:	230c      	movs	r3, #12
 8007d28:	602b      	str	r3, [r5, #0]
 8007d2a:	e7d6      	b.n	8007cda <_free_r+0x22>
 8007d2c:	6820      	ldr	r0, [r4, #0]
 8007d2e:	1821      	adds	r1, r4, r0
 8007d30:	428b      	cmp	r3, r1
 8007d32:	bf04      	itt	eq
 8007d34:	6819      	ldreq	r1, [r3, #0]
 8007d36:	685b      	ldreq	r3, [r3, #4]
 8007d38:	6063      	str	r3, [r4, #4]
 8007d3a:	bf04      	itt	eq
 8007d3c:	1809      	addeq	r1, r1, r0
 8007d3e:	6021      	streq	r1, [r4, #0]
 8007d40:	6054      	str	r4, [r2, #4]
 8007d42:	e7ca      	b.n	8007cda <_free_r+0x22>
 8007d44:	bd38      	pop	{r3, r4, r5, pc}
 8007d46:	bf00      	nop
 8007d48:	20004d3c 	.word	0x20004d3c

08007d4c <__malloc_lock>:
 8007d4c:	4801      	ldr	r0, [pc, #4]	@ (8007d54 <__malloc_lock+0x8>)
 8007d4e:	f7ff bfa3 	b.w	8007c98 <__retarget_lock_acquire_recursive>
 8007d52:	bf00      	nop
 8007d54:	20004d38 	.word	0x20004d38

08007d58 <__malloc_unlock>:
 8007d58:	4801      	ldr	r0, [pc, #4]	@ (8007d60 <__malloc_unlock+0x8>)
 8007d5a:	f7ff bf9e 	b.w	8007c9a <__retarget_lock_release_recursive>
 8007d5e:	bf00      	nop
 8007d60:	20004d38 	.word	0x20004d38

08007d64 <atan2f>:
 8007d64:	f000 b822 	b.w	8007dac <__ieee754_atan2f>

08007d68 <sqrtf>:
 8007d68:	b508      	push	{r3, lr}
 8007d6a:	ed2d 8b02 	vpush	{d8}
 8007d6e:	eeb0 8a40 	vmov.f32	s16, s0
 8007d72:	f000 f817 	bl	8007da4 <__ieee754_sqrtf>
 8007d76:	eeb4 8a48 	vcmp.f32	s16, s16
 8007d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d7e:	d60c      	bvs.n	8007d9a <sqrtf+0x32>
 8007d80:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007da0 <sqrtf+0x38>
 8007d84:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007d88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d8c:	d505      	bpl.n	8007d9a <sqrtf+0x32>
 8007d8e:	f7ff ff59 	bl	8007c44 <__errno>
 8007d92:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007d96:	2321      	movs	r3, #33	@ 0x21
 8007d98:	6003      	str	r3, [r0, #0]
 8007d9a:	ecbd 8b02 	vpop	{d8}
 8007d9e:	bd08      	pop	{r3, pc}
 8007da0:	00000000 	.word	0x00000000

08007da4 <__ieee754_sqrtf>:
 8007da4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007da8:	4770      	bx	lr
	...

08007dac <__ieee754_atan2f>:
 8007dac:	ee10 2a90 	vmov	r2, s1
 8007db0:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8007db4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8007db8:	b510      	push	{r4, lr}
 8007dba:	eef0 7a40 	vmov.f32	s15, s0
 8007dbe:	d806      	bhi.n	8007dce <__ieee754_atan2f+0x22>
 8007dc0:	ee10 0a10 	vmov	r0, s0
 8007dc4:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8007dc8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007dcc:	d904      	bls.n	8007dd8 <__ieee754_atan2f+0x2c>
 8007dce:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8007dd2:	eeb0 0a67 	vmov.f32	s0, s15
 8007dd6:	bd10      	pop	{r4, pc}
 8007dd8:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8007ddc:	d103      	bne.n	8007de6 <__ieee754_atan2f+0x3a>
 8007dde:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007de2:	f000 b883 	b.w	8007eec <atanf>
 8007de6:	1794      	asrs	r4, r2, #30
 8007de8:	f004 0402 	and.w	r4, r4, #2
 8007dec:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8007df0:	b943      	cbnz	r3, 8007e04 <__ieee754_atan2f+0x58>
 8007df2:	2c02      	cmp	r4, #2
 8007df4:	d05e      	beq.n	8007eb4 <__ieee754_atan2f+0x108>
 8007df6:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8007ec8 <__ieee754_atan2f+0x11c>
 8007dfa:	2c03      	cmp	r4, #3
 8007dfc:	bf08      	it	eq
 8007dfe:	eef0 7a47 	vmoveq.f32	s15, s14
 8007e02:	e7e6      	b.n	8007dd2 <__ieee754_atan2f+0x26>
 8007e04:	b941      	cbnz	r1, 8007e18 <__ieee754_atan2f+0x6c>
 8007e06:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8007ecc <__ieee754_atan2f+0x120>
 8007e0a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8007ed0 <__ieee754_atan2f+0x124>
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	bfa8      	it	ge
 8007e12:	eef0 7a47 	vmovge.f32	s15, s14
 8007e16:	e7dc      	b.n	8007dd2 <__ieee754_atan2f+0x26>
 8007e18:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8007e1c:	d110      	bne.n	8007e40 <__ieee754_atan2f+0x94>
 8007e1e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007e22:	f104 34ff 	add.w	r4, r4, #4294967295
 8007e26:	d107      	bne.n	8007e38 <__ieee754_atan2f+0x8c>
 8007e28:	2c02      	cmp	r4, #2
 8007e2a:	d846      	bhi.n	8007eba <__ieee754_atan2f+0x10e>
 8007e2c:	4b29      	ldr	r3, [pc, #164]	@ (8007ed4 <__ieee754_atan2f+0x128>)
 8007e2e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8007e32:	edd3 7a00 	vldr	s15, [r3]
 8007e36:	e7cc      	b.n	8007dd2 <__ieee754_atan2f+0x26>
 8007e38:	2c02      	cmp	r4, #2
 8007e3a:	d841      	bhi.n	8007ec0 <__ieee754_atan2f+0x114>
 8007e3c:	4b26      	ldr	r3, [pc, #152]	@ (8007ed8 <__ieee754_atan2f+0x12c>)
 8007e3e:	e7f6      	b.n	8007e2e <__ieee754_atan2f+0x82>
 8007e40:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007e44:	d0df      	beq.n	8007e06 <__ieee754_atan2f+0x5a>
 8007e46:	1a5b      	subs	r3, r3, r1
 8007e48:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8007e4c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8007e50:	da1a      	bge.n	8007e88 <__ieee754_atan2f+0xdc>
 8007e52:	2a00      	cmp	r2, #0
 8007e54:	da01      	bge.n	8007e5a <__ieee754_atan2f+0xae>
 8007e56:	313c      	adds	r1, #60	@ 0x3c
 8007e58:	db19      	blt.n	8007e8e <__ieee754_atan2f+0xe2>
 8007e5a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8007e5e:	f000 f919 	bl	8008094 <fabsf>
 8007e62:	f000 f843 	bl	8007eec <atanf>
 8007e66:	eef0 7a40 	vmov.f32	s15, s0
 8007e6a:	2c01      	cmp	r4, #1
 8007e6c:	d012      	beq.n	8007e94 <__ieee754_atan2f+0xe8>
 8007e6e:	2c02      	cmp	r4, #2
 8007e70:	d017      	beq.n	8007ea2 <__ieee754_atan2f+0xf6>
 8007e72:	2c00      	cmp	r4, #0
 8007e74:	d0ad      	beq.n	8007dd2 <__ieee754_atan2f+0x26>
 8007e76:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007edc <__ieee754_atan2f+0x130>
 8007e7a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007e7e:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8007ee0 <__ieee754_atan2f+0x134>
 8007e82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007e86:	e7a4      	b.n	8007dd2 <__ieee754_atan2f+0x26>
 8007e88:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8007ed0 <__ieee754_atan2f+0x124>
 8007e8c:	e7ed      	b.n	8007e6a <__ieee754_atan2f+0xbe>
 8007e8e:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8007ee4 <__ieee754_atan2f+0x138>
 8007e92:	e7ea      	b.n	8007e6a <__ieee754_atan2f+0xbe>
 8007e94:	ee17 3a90 	vmov	r3, s15
 8007e98:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007e9c:	ee07 3a90 	vmov	s15, r3
 8007ea0:	e797      	b.n	8007dd2 <__ieee754_atan2f+0x26>
 8007ea2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8007edc <__ieee754_atan2f+0x130>
 8007ea6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007eaa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8007ee0 <__ieee754_atan2f+0x134>
 8007eae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007eb2:	e78e      	b.n	8007dd2 <__ieee754_atan2f+0x26>
 8007eb4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8007ee0 <__ieee754_atan2f+0x134>
 8007eb8:	e78b      	b.n	8007dd2 <__ieee754_atan2f+0x26>
 8007eba:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8007ee8 <__ieee754_atan2f+0x13c>
 8007ebe:	e788      	b.n	8007dd2 <__ieee754_atan2f+0x26>
 8007ec0:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8007ee4 <__ieee754_atan2f+0x138>
 8007ec4:	e785      	b.n	8007dd2 <__ieee754_atan2f+0x26>
 8007ec6:	bf00      	nop
 8007ec8:	c0490fdb 	.word	0xc0490fdb
 8007ecc:	bfc90fdb 	.word	0xbfc90fdb
 8007ed0:	3fc90fdb 	.word	0x3fc90fdb
 8007ed4:	0800813c 	.word	0x0800813c
 8007ed8:	08008130 	.word	0x08008130
 8007edc:	33bbbd2e 	.word	0x33bbbd2e
 8007ee0:	40490fdb 	.word	0x40490fdb
 8007ee4:	00000000 	.word	0x00000000
 8007ee8:	3f490fdb 	.word	0x3f490fdb

08007eec <atanf>:
 8007eec:	b538      	push	{r3, r4, r5, lr}
 8007eee:	ee10 5a10 	vmov	r5, s0
 8007ef2:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8007ef6:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8007efa:	eef0 7a40 	vmov.f32	s15, s0
 8007efe:	d310      	bcc.n	8007f22 <atanf+0x36>
 8007f00:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8007f04:	d904      	bls.n	8007f10 <atanf+0x24>
 8007f06:	ee70 7a00 	vadd.f32	s15, s0, s0
 8007f0a:	eeb0 0a67 	vmov.f32	s0, s15
 8007f0e:	bd38      	pop	{r3, r4, r5, pc}
 8007f10:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8008048 <atanf+0x15c>
 8007f14:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 800804c <atanf+0x160>
 8007f18:	2d00      	cmp	r5, #0
 8007f1a:	bfc8      	it	gt
 8007f1c:	eef0 7a47 	vmovgt.f32	s15, s14
 8007f20:	e7f3      	b.n	8007f0a <atanf+0x1e>
 8007f22:	4b4b      	ldr	r3, [pc, #300]	@ (8008050 <atanf+0x164>)
 8007f24:	429c      	cmp	r4, r3
 8007f26:	d810      	bhi.n	8007f4a <atanf+0x5e>
 8007f28:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8007f2c:	d20a      	bcs.n	8007f44 <atanf+0x58>
 8007f2e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8008054 <atanf+0x168>
 8007f32:	ee30 7a07 	vadd.f32	s14, s0, s14
 8007f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007f3a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8007f3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f42:	dce2      	bgt.n	8007f0a <atanf+0x1e>
 8007f44:	f04f 33ff 	mov.w	r3, #4294967295
 8007f48:	e013      	b.n	8007f72 <atanf+0x86>
 8007f4a:	f000 f8a3 	bl	8008094 <fabsf>
 8007f4e:	4b42      	ldr	r3, [pc, #264]	@ (8008058 <atanf+0x16c>)
 8007f50:	429c      	cmp	r4, r3
 8007f52:	d84f      	bhi.n	8007ff4 <atanf+0x108>
 8007f54:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8007f58:	429c      	cmp	r4, r3
 8007f5a:	d841      	bhi.n	8007fe0 <atanf+0xf4>
 8007f5c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8007f60:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8007f64:	eea0 7a27 	vfma.f32	s14, s0, s15
 8007f68:	2300      	movs	r3, #0
 8007f6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007f6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007f72:	1c5a      	adds	r2, r3, #1
 8007f74:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8007f78:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800805c <atanf+0x170>
 8007f7c:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8008060 <atanf+0x174>
 8007f80:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8008064 <atanf+0x178>
 8007f84:	ee66 6a06 	vmul.f32	s13, s12, s12
 8007f88:	eee6 5a87 	vfma.f32	s11, s13, s14
 8007f8c:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8008068 <atanf+0x17c>
 8007f90:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007f94:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800806c <atanf+0x180>
 8007f98:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007f9c:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8008070 <atanf+0x184>
 8007fa0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8007fa4:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008074 <atanf+0x188>
 8007fa8:	eee7 5a26 	vfma.f32	s11, s14, s13
 8007fac:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8008078 <atanf+0x18c>
 8007fb0:	eea6 5a87 	vfma.f32	s10, s13, s14
 8007fb4:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800807c <atanf+0x190>
 8007fb8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007fbc:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8008080 <atanf+0x194>
 8007fc0:	eea7 5a26 	vfma.f32	s10, s14, s13
 8007fc4:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008084 <atanf+0x198>
 8007fc8:	eea5 7a26 	vfma.f32	s14, s10, s13
 8007fcc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007fd0:	eea5 7a86 	vfma.f32	s14, s11, s12
 8007fd4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007fd8:	d121      	bne.n	800801e <atanf+0x132>
 8007fda:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fde:	e794      	b.n	8007f0a <atanf+0x1e>
 8007fe0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8007fe4:	ee30 7a67 	vsub.f32	s14, s0, s15
 8007fe8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007fec:	2301      	movs	r3, #1
 8007fee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8007ff2:	e7be      	b.n	8007f72 <atanf+0x86>
 8007ff4:	4b24      	ldr	r3, [pc, #144]	@ (8008088 <atanf+0x19c>)
 8007ff6:	429c      	cmp	r4, r3
 8007ff8:	d80b      	bhi.n	8008012 <atanf+0x126>
 8007ffa:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8007ffe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008002:	eea0 7a27 	vfma.f32	s14, s0, s15
 8008006:	2302      	movs	r3, #2
 8008008:	ee70 6a67 	vsub.f32	s13, s0, s15
 800800c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008010:	e7af      	b.n	8007f72 <atanf+0x86>
 8008012:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008016:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800801a:	2303      	movs	r3, #3
 800801c:	e7a9      	b.n	8007f72 <atanf+0x86>
 800801e:	4a1b      	ldr	r2, [pc, #108]	@ (800808c <atanf+0x1a0>)
 8008020:	491b      	ldr	r1, [pc, #108]	@ (8008090 <atanf+0x1a4>)
 8008022:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8008026:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800802a:	edd3 6a00 	vldr	s13, [r3]
 800802e:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008032:	2d00      	cmp	r5, #0
 8008034:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008038:	edd2 7a00 	vldr	s15, [r2]
 800803c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008040:	bfb8      	it	lt
 8008042:	eef1 7a67 	vneglt.f32	s15, s15
 8008046:	e760      	b.n	8007f0a <atanf+0x1e>
 8008048:	bfc90fdb 	.word	0xbfc90fdb
 800804c:	3fc90fdb 	.word	0x3fc90fdb
 8008050:	3edfffff 	.word	0x3edfffff
 8008054:	7149f2ca 	.word	0x7149f2ca
 8008058:	3f97ffff 	.word	0x3f97ffff
 800805c:	3c8569d7 	.word	0x3c8569d7
 8008060:	3d4bda59 	.word	0x3d4bda59
 8008064:	bd6ef16b 	.word	0xbd6ef16b
 8008068:	3d886b35 	.word	0x3d886b35
 800806c:	3dba2e6e 	.word	0x3dba2e6e
 8008070:	3e124925 	.word	0x3e124925
 8008074:	3eaaaaab 	.word	0x3eaaaaab
 8008078:	bd15a221 	.word	0xbd15a221
 800807c:	bd9d8795 	.word	0xbd9d8795
 8008080:	bde38e38 	.word	0xbde38e38
 8008084:	be4ccccd 	.word	0xbe4ccccd
 8008088:	401bffff 	.word	0x401bffff
 800808c:	08008158 	.word	0x08008158
 8008090:	08008148 	.word	0x08008148

08008094 <fabsf>:
 8008094:	ee10 3a10 	vmov	r3, s0
 8008098:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800809c:	ee00 3a10 	vmov	s0, r3
 80080a0:	4770      	bx	lr
	...

080080a4 <_init>:
 80080a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a6:	bf00      	nop
 80080a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080aa:	bc08      	pop	{r3}
 80080ac:	469e      	mov	lr, r3
 80080ae:	4770      	bx	lr

080080b0 <_fini>:
 80080b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080b2:	bf00      	nop
 80080b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080b6:	bc08      	pop	{r3}
 80080b8:	469e      	mov	lr, r3
 80080ba:	4770      	bx	lr
